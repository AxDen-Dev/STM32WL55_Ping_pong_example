
STM32WL55_Ping_pong_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800fb24  0800fb24  0001fb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010008  08010008  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08010008  08010008  00020008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010010  08010010  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010010  08010010  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010014  08010014  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08010018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002940  2000007c  08010094  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029bc  08010094  000329bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e99a  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd2  00000000  00000000  0006ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002de0  00000000  00000000  00075818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b70  00000000  00000000  000785f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a38  00000000  00000000  0007b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000312ff  00000000  00000000  000a1ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e24b5  00000000  00000000  000d2e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c904  00000000  00000000  001b53a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800fb0c 	.word	0x0800fb0c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800fb0c 	.word	0x0800fb0c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b96c 	b.w	8000f68 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	468e      	mov	lr, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8082 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4617      	mov	r7, r2
 8000cbe:	d946      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b14a      	cbz	r2, 8000cda <__udivmoddi4+0x32>
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa05 f302 	lsl.w	r3, r5, r2
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	4097      	lsls	r7, r2
 8000cd4:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fbbe fcf8 	udiv	ip, lr, r8
 8000ce4:	b2b9      	uxth	r1, r7
 8000ce6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000cea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cee:	fb0c f001 	mul.w	r0, ip, r1
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000cfc:	f080 8116 	bcs.w	8000f2c <__udivmoddi4+0x284>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f240 8113 	bls.w	8000f2c <__udivmoddi4+0x284>
 8000d06:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a1b      	subs	r3, r3, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f101 	mul.w	r1, r0, r1
 8000d20:	42a1      	cmp	r1, r4
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	f080 8101 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000d2e:	42a1      	cmp	r1, r4
 8000d30:	f240 80fe 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d34:	3802      	subs	r0, #2
 8000d36:	443c      	add	r4, r7
 8000d38:	1a64      	subs	r4, r4, r1
 8000d3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40d4      	lsrs	r4, r2
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d14f      	bne.n	8000dfa <__udivmoddi4+0x152>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2101      	movs	r1, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c25      	lsrs	r5, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	42ab      	cmp	r3, r5
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	197d      	adds	r5, r7, r5
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	f200 80e7 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1aed      	subs	r5, r5, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d7 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7c0      	b.n	8000d40 <__udivmoddi4+0x98>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80af 	beq.w	8000f26 <__udivmoddi4+0x27e>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d14b      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0x13e>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80b7 	bhi.w	8000f54 <__udivmoddi4+0x2ac>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0303 	sbc.w	r3, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	469e      	mov	lr, r3
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0aa      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000df4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000df8:	e7a7      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000dfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000dfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000e10:	4318      	orrs	r0, r3
 8000e12:	fbbc f1fe 	udiv	r1, ip, lr
 8000e16:	0c05      	lsrs	r5, r0, #16
 8000e18:	fb0e cc11 	mls	ip, lr, r1, ip
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e24:	fb01 f308 	mul.w	r3, r1, r8
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	197d      	adds	r5, r7, r5
 8000e32:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000e36:	f080 808b 	bcs.w	8000f50 <__udivmoddi4+0x2a8>
 8000e3a:	42ab      	cmp	r3, r5
 8000e3c:	f240 8088 	bls.w	8000f50 <__udivmoddi4+0x2a8>
 8000e40:	3902      	subs	r1, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	1aeb      	subs	r3, r5, r3
 8000e46:	b285      	uxth	r5, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	42ab      	cmp	r3, r5
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	197d      	adds	r5, r7, r5
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e62:	d271      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000e64:	42ab      	cmp	r3, r5
 8000e66:	d96f      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c1 0c20 	rsb	ip, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 f40c 	lsr.w	r4, r0, ip
 8000e84:	fa05 f301 	lsl.w	r3, r5, r1
 8000e88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	0c23      	lsrs	r3, r4, #16
 8000e94:	fbb5 f9fe 	udiv	r9, r5, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000ea0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000ea4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea8:	45aa      	cmp	sl, r5
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	fa00 f301 	lsl.w	r3, r0, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x21e>
 8000eb4:	197d      	adds	r5, r7, r5
 8000eb6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eba:	d247      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000ebc:	45aa      	cmp	sl, r5
 8000ebe:	d945      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000ec0:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	eba5 050a 	sub.w	r5, r5, sl
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ed0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ed4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ed8:	fb00 f808 	mul.w	r8, r0, r8
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x248>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ee6:	d22d      	bcs.n	8000f44 <__udivmoddi4+0x29c>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	d92b      	bls.n	8000f44 <__udivmoddi4+0x29c>
 8000eec:	3802      	subs	r0, #2
 8000eee:	443c      	add	r4, r7
 8000ef0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef4:	eba4 0408 	sub.w	r4, r4, r8
 8000ef8:	fba0 8902 	umull	r8, r9, r0, r2
 8000efc:	454c      	cmp	r4, r9
 8000efe:	46c6      	mov	lr, r8
 8000f00:	464d      	mov	r5, r9
 8000f02:	d319      	bcc.n	8000f38 <__udivmoddi4+0x290>
 8000f04:	d016      	beq.n	8000f34 <__udivmoddi4+0x28c>
 8000f06:	b15e      	cbz	r6, 8000f20 <__udivmoddi4+0x278>
 8000f08:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0c:	eb64 0405 	sbc.w	r4, r4, r5
 8000f10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f14:	40ca      	lsrs	r2, r1
 8000f16:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	e9c6 2400 	strd	r2, r4, [r6]
 8000f20:	2100      	movs	r1, #0
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	4631      	mov	r1, r6
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e70e      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f2c:	46ac      	mov	ip, r5
 8000f2e:	e6ed      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e701      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e6      	bcs.n	8000f06 <__udivmoddi4+0x25e>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0507 	sbc.w	r5, r9, r7
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7e0      	b.n	8000f06 <__udivmoddi4+0x25e>
 8000f44:	4628      	mov	r0, r5
 8000f46:	e7d3      	b.n	8000ef0 <__udivmoddi4+0x248>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78f      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7ba      	b.n	8000ec6 <__udivmoddi4+0x21e>
 8000f50:	4661      	mov	r1, ip
 8000f52:	e777      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e74b      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	443d      	add	r5, r7
 8000f5e:	e715      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e726      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fc4:	f001 fa86 	bl	80024d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fc8:	f000 f858 	bl	800107c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fcc:	f000 fa3e 	bl	800144c <MX_GPIO_Init>
	MX_SUBGHZ_Init();
 8000fd0:	f000 f992 	bl	80012f8 <MX_SUBGHZ_Init>
	MX_LPTIM1_Init();
 8000fd4:	f000 f934 	bl	8001240 <MX_LPTIM1_Init>
	MX_RTC_Init();
 8000fd8:	f000 f95e 	bl	8001298 <MX_RTC_Init>
	MX_ADC_Init();
 8000fdc:	f000 f8a2 	bl	8001124 <MX_ADC_Init>
	MX_I2C2_Init();
 8000fe0:	f000 f8ee 	bl	80011c0 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000fe4:	f000 f99a 	bl	800131c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000fe8:	f000 f9e4 	bl	80013b4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000fec:	f006 fe02 	bl	8007bf4 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of radioBinarySem */
	radioBinarySemHandle = osSemaphoreNew(1, 0, &radioBinarySem_attributes);
 8000ff0:	4a15      	ldr	r2, [pc, #84]	; (8001048 <main+0x88>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f007 f813 	bl	8008020 <osSemaphoreNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <main+0x8c>)
 8000ffe:	6013      	str	r3, [r2, #0]

	/* creation of mainBinarySem */
	mainBinarySemHandle = osSemaphoreNew(1, 0, &mainBinarySem_attributes);
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <main+0x90>)
 8001002:	2100      	movs	r1, #0
 8001004:	2001      	movs	r0, #1
 8001006:	f007 f80b 	bl	8008020 <osSemaphoreNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <main+0x94>)
 800100e:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of mainTimer */
	mainTimerHandle = osTimerNew(mainTimerCallback, osTimerPeriodic, NULL,
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <main+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	2101      	movs	r1, #1
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <main+0x9c>)
 8001018:	f006 ff3e 	bl	8007e98 <osTimerNew>
 800101c:	4603      	mov	r3, r0
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <main+0xa0>)
 8001020:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of radioTask */
	radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <main+0xa4>)
 8001024:	2100      	movs	r1, #0
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0xa8>)
 8001028:	f006 fe4c 	bl	8007cc4 <osThreadNew>
 800102c:	4603      	mov	r3, r0
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <main+0xac>)
 8001030:	6013      	str	r3, [r2, #0]

	/* creation of mainTask */
	mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <main+0xb0>)
 8001034:	2100      	movs	r1, #0
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0xb4>)
 8001038:	f006 fe44 	bl	8007cc4 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <main+0xb8>)
 8001040:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001042:	f006 fe09 	bl	8007c58 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001046:	e7fe      	b.n	8001046 <main+0x86>
 8001048:	0800fd28 	.word	0x0800fd28
 800104c:	20002394 	.word	0x20002394
 8001050:	0800fd38 	.word	0x0800fd38
 8001054:	20002628 	.word	0x20002628
 8001058:	0800fd18 	.word	0x0800fd18
 800105c:	08001cf9 	.word	0x08001cf9
 8001060:	2000262c 	.word	0x2000262c
 8001064:	0800fcd0 	.word	0x0800fcd0
 8001068:	080019dd 	.word	0x080019dd
 800106c:	20002028 	.word	0x20002028
 8001070:	0800fcf4 	.word	0x0800fcf4
 8001074:	08001ae5 	.word	0x08001ae5
 8001078:	20001fec 	.word	0x20001fec

0800107c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b09a      	sub	sp, #104	; 0x68
 8001080:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2248      	movs	r2, #72	; 0x48
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00e f8b0 	bl	800f1f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xa4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <SystemClock_Config+0xa4>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <SystemClock_Config+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80010be:	2309      	movs	r3, #9
 80010c0:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fa97 	bl	8004610 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x70>
		Error_Handler();
 80010e8:	f000 fe3c 	bl	8001d64 <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 80010ec:	234f      	movs	r3, #79	; 0x4f
 80010ee:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010f0:	2302      	movs	r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fe1b 	bl	8004d44 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x9c>
		Error_Handler();
 8001114:	f000 fe26 	bl	8001d64 <Error_Handler>
	}
}
 8001118:	bf00      	nop
 800111a:	3768      	adds	r7, #104	; 0x68
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58000400 	.word	0x58000400

08001124 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_ADC_Init+0x94>)
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <MX_ADC_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_ADC_Init+0x94>)
 8001130:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001134:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_ADC_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ADC_Init+0x94>)
 800114a:	2204      	movs	r2, #4
 800114c:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_ADC_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = DISABLE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	769a      	strb	r2, [r3, #26]
	hadc.Init.NbrOfConversion = 1;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_ADC_Init+0x94>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ADC_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_ADC_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_ADC_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_ADC_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.OversamplingMode = DISABLE;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_ADC_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_ADC_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC_Init+0x94>)
 80011a4:	f001 fafa 	bl	800279c <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC_Init+0x8e>
		Error_Handler();
 80011ae:	f000 fdd9 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20002630 	.word	0x20002630
 80011bc:	40012400 	.word	0x40012400

080011c0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C2_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C2_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x00300F38;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_I2C2_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_I2C2_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C2_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_I2C2_Init+0x74>)
 80011fc:	f002 fa1b 	bl	8003636 <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C2_Init+0x4a>
		Error_Handler();
 8001206:	f000 fdad 	bl	8001d64 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800120a:	2100      	movs	r1, #0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C2_Init+0x74>)
 800120e:	f002 fbe8 	bl	80039e2 <HAL_I2CEx_ConfigAnalogFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001218:	f000 fda4 	bl	8001d64 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800121c:	2100      	movs	r1, #0
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C2_Init+0x74>)
 8001220:	f002 fc29 	bl	8003a76 <HAL_I2CEx_ConfigDigitalFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C2_Init+0x6e>
		Error_Handler();
 800122a:	f000 fd9b 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000202c 	.word	0x2000202c
 8001238:	40005800 	.word	0x40005800
 800123c:	00300f38 	.word	0x00300f38

08001240 <MX_LPTIM1_Init>:
/**
 * @brief LPTIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM1_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	/* USER CODE END LPTIM1_Init 0 */

	/* USER CODE BEGIN LPTIM1_Init 1 */

	/* USER CODE END LPTIM1_Init 1 */
	hlptim1.Instance = LPTIM1;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <MX_LPTIM1_Init+0x54>)
 8001248:	601a      	str	r2, [r3, #0]
	hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
	hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
	hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	615a      	str	r2, [r3, #20]
	hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
	hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_LPTIM_Init(&hlptim1) != HAL_OK) {
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800127e:	f002 fcb7 	bl	8003bf0 <HAL_LPTIM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_LPTIM1_Init+0x4c>
		Error_Handler();
 8001288:	f000 fd6c 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN LPTIM1_Init 2 */

	/* USER CODE END LPTIM1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20002358 	.word	0x20002358
 8001294:	40007c00 	.word	0x40007c00

08001298 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_RTC_Init+0x58>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_RTC_Init+0x5c>)
 80012a0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_RTC_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_RTC_Init+0x58>)
 80012aa:	227f      	movs	r2, #127	; 0x7f
 80012ac:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_RTC_Init+0x58>)
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_RTC_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_RTC_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_RTC_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_RTC_Init+0x58>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_RTC_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_RTC_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_RTC_Init+0x58>)
 80012dc:	f004 fa4e 	bl	800577c <HAL_RTC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0x52>
		Error_Handler();
 80012e6:	f000 fd3d 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20002454 	.word	0x20002454
 80012f4:	40002800 	.word	0x40002800

080012f8 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SUBGHZ_Init+0x20>)
 80012fe:	2210      	movs	r2, #16
 8001300:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_SUBGHZ_Init+0x20>)
 8001304:	f004 fbe6 	bl	8005ad4 <HAL_SUBGHZ_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 800130e:	f000 fd29 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20001ff0 	.word	0x20001ff0

0800131c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_USART1_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001366:	f005 fa5d 	bl	8006824 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001370:	f000 fcf8 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001378:	f006 fb6d 	bl	8007a56 <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001382:	f000 fcef 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800138a:	f006 fba2 	bl	8007ad2 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001394:	f000 fce6 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800139a:	f006 fb24 	bl	80079e6 <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80013a4:	f000 fcde 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200022c8 	.word	0x200022c8
 80013b0:	40013800 	.word	0x40013800

080013b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART2_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013fe:	f005 fa11 	bl	8006824 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001408:	f000 fcac 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001410:	f006 fb21 	bl	8007a56 <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800141a:	f000 fca3 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001422:	f006 fb56 	bl	8007ad2 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800142c:	f000 fc9a 	bl	8001d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001432:	f006 fad8 	bl	80079e6 <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 800143c:	f000 fc92 	bl	8001d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20002598 	.word	0x20002598
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	2002      	movs	r0, #2
 8001462:	f7ff fd95 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fd92 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	2004      	movs	r0, #4
 800146e:	f7ff fd8f 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001472:	2200      	movs	r2, #0
 8001474:	2139      	movs	r1, #57	; 0x39
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <MX_GPIO_Init+0xb0>)
 8001478:	f002 f8ad 	bl	80035d6 <HAL_GPIO_WritePin>
	SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin | RF_SWITCH_CTRL_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800147c:	2200      	movs	r2, #0
 800147e:	f248 0123 	movw	r1, #32803	; 0x8023
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 f8a6 	bl	80035d6 <HAL_GPIO_WritePin>
	GPIO_0_Pin | GPIO_3_Pin | RF_SWITCH_VDD_Pin | SPI1_NSS_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin RF_SWITCH_CTRL_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin
 800148a:	2339      	movs	r3, #57	; 0x39
 800148c:	607b      	str	r3, [r7, #4]
			| RF_SWITCH_CTRL_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4817      	ldr	r0, [pc, #92]	; (80014fc <MX_GPIO_Init+0xb0>)
 80014a0:	f001 ff22 	bl	80032e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_1_Pin WKUP_Pin */
	GPIO_InitStruct.Pin = GPIO_1_Pin | WKUP_Pin;
 80014a4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80014a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_GPIO_Init+0xb0>)
 80014b8:	f001 ff16 	bl	80032e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_0_Pin GPIO_3_Pin RF_SWITCH_VDD_Pin SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = GPIO_0_Pin | GPIO_3_Pin | RF_SWITCH_VDD_Pin
 80014bc:	f248 0323 	movw	r3, #32803	; 0x8023
 80014c0:	607b      	str	r3, [r7, #4]
			| SPI1_NSS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 ff07 	bl	80032e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_2_Pin */
	GPIO_InitStruct.Pin = GPIO_2_Pin;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_GPIO_Init+0xb4>)
 80014ee:	f001 fefb 	bl	80032e8 <HAL_GPIO_Init>

}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800

08001504 <uart_usb_in_out_data_send>:

#endif

}

static void uart_usb_in_out_data_send(uint8_t *data, uint16_t size) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]

	uint8_t send_data = 0x00;
 8001510:	2300      	movs	r3, #0
 8001512:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < size; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	81fb      	strh	r3, [r7, #14]
 8001518:	e00e      	b.n	8001538 <uart_usb_in_out_data_send+0x34>

		send_data = data[i];
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart2, &send_data, 1, 10);
 8001524:	f107 010d 	add.w	r1, r7, #13
 8001528:	230a      	movs	r3, #10
 800152a:	2201      	movs	r2, #1
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <uart_usb_in_out_data_send+0x48>)
 800152e:	f005 f9c9 	bl	80068c4 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < size; i++) {
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	3301      	adds	r3, #1
 8001536:	81fb      	strh	r3, [r7, #14]
 8001538:	89fa      	ldrh	r2, [r7, #14]
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3ec      	bcc.n	800151a <uart_usb_in_out_data_send+0x16>

	}

}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20002598 	.word	0x20002598

08001550 <set_uart_usb_in_out_write_string>:

static void set_uart_usb_in_out_write_string(char *data) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

	uart_tx_buffer_length = 0;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <set_uart_usb_in_out_write_string+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 800155e:	22ff      	movs	r2, #255	; 0xff
 8001560:	2100      	movs	r1, #0
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <set_uart_usb_in_out_write_string+0x44>)
 8001564:	f00d fe44 	bl	800f1f0 <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer, "%s\r\n", data);
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	490b      	ldr	r1, [pc, #44]	; (8001598 <set_uart_usb_in_out_write_string+0x48>)
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <set_uart_usb_in_out_write_string+0x44>)
 800156e:	f00d ff1b 	bl	800f3a8 <siprintf>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <set_uart_usb_in_out_write_string+0x40>)
 8001578:	801a      	strh	r2, [r3, #0]

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <set_uart_usb_in_out_write_string+0x40>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <set_uart_usb_in_out_write_string+0x44>)
 8001582:	f7ff ffbf 	bl	8001504 <uart_usb_in_out_data_send>

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200000a0 	.word	0x200000a0
 8001594:	200000a4 	.word	0x200000a4
 8001598:	0800fb68 	.word	0x0800fb68

0800159c <set_uart_usb_in_out_find_i2c_address>:

static void set_uart_usb_in_out_find_i2c_address(uint8_t address) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]

	uart_tx_buffer_length = 0;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <set_uart_usb_in_out_find_i2c_address+0x44>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	2100      	movs	r1, #0
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <set_uart_usb_in_out_find_i2c_address+0x48>)
 80015b2:	f00d fe1d 	bl	800f1f0 <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	461a      	mov	r2, r3
 80015ba:	490b      	ldr	r1, [pc, #44]	; (80015e8 <set_uart_usb_in_out_find_i2c_address+0x4c>)
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <set_uart_usb_in_out_find_i2c_address+0x48>)
 80015be:	f00d fef3 	bl	800f3a8 <siprintf>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <set_uart_usb_in_out_find_i2c_address+0x44>)
 80015c8:	801a      	strh	r2, [r3, #0]
			"I2C Address : %02X\r\n", address);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <set_uart_usb_in_out_find_i2c_address+0x44>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <set_uart_usb_in_out_find_i2c_address+0x48>)
 80015d2:	f7ff ff97 	bl	8001504 <uart_usb_in_out_data_send>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000a0 	.word	0x200000a0
 80015e4:	200000a4 	.word	0x200000a4
 80015e8:	0800fb70 	.word	0x0800fb70

080015ec <set_uart_usb_in_out_mac_address>:

static void set_uart_usb_in_out_mac_address(uint8_t *mac_address) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	uart_tx_buffer_length = 0;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 80015fa:	22ff      	movs	r2, #255	; 0xff
 80015fc:	2100      	movs	r1, #0
 80015fe:	4823      	ldr	r0, [pc, #140]	; (800168c <set_uart_usb_in_out_mac_address+0xa0>)
 8001600:	f00d fdf6 	bl	800f1f0 <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer, "MAC Address : ");
 8001604:	4922      	ldr	r1, [pc, #136]	; (8001690 <set_uart_usb_in_out_mac_address+0xa4>)
 8001606:	4821      	ldr	r0, [pc, #132]	; (800168c <set_uart_usb_in_out_mac_address+0xa0>)
 8001608:	f00d fece 	bl	800f3a8 <siprintf>
 800160c:	4603      	mov	r3, r0
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001612:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 8; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e017      	b.n	800164a <set_uart_usb_in_out_mac_address+0x5e>

		uart_tx_buffer_length += sprintf(
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <set_uart_usb_in_out_mac_address+0xa0>)
 8001622:	18d0      	adds	r0, r2, r3
				(char*) uart_tx_buffer + uart_tx_buffer_length, "%02X",
				mac_address[i]);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
		uart_tx_buffer_length += sprintf(
 800162c:	461a      	mov	r2, r3
 800162e:	4919      	ldr	r1, [pc, #100]	; (8001694 <set_uart_usb_in_out_mac_address+0xa8>)
 8001630:	f00d feba 	bl	800f3a8 <siprintf>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	4413      	add	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001642:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3301      	adds	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d9e4      	bls.n	800161a <set_uart_usb_in_out_mac_address+0x2e>

	}

	uart_tx_buffer_length += sprintf(
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <set_uart_usb_in_out_mac_address+0xa0>)
 8001658:	4413      	add	r3, r2
 800165a:	490f      	ldr	r1, [pc, #60]	; (8001698 <set_uart_usb_in_out_mac_address+0xac>)
 800165c:	4618      	mov	r0, r3
 800165e:	f00d fea3 	bl	800f3a8 <siprintf>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001670:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "\r\n");

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <set_uart_usb_in_out_mac_address+0x9c>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <set_uart_usb_in_out_mac_address+0xa0>)
 800167a:	f7ff ff43 	bl	8001504 <uart_usb_in_out_data_send>

}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000a0 	.word	0x200000a0
 800168c:	200000a4 	.word	0x200000a4
 8001690:	0800fb88 	.word	0x0800fb88
 8001694:	0800fb98 	.word	0x0800fb98
 8001698:	0800fba0 	.word	0x0800fba0

0800169c <set_uart_usb_in_out_voltage>:

static void set_uart_usb_in_out_voltage(int16_t voltage) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]

	uart_tx_buffer_length = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <set_uart_usb_in_out_voltage+0x44>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 80016ac:	22ff      	movs	r2, #255	; 0xff
 80016ae:	2100      	movs	r1, #0
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <set_uart_usb_in_out_voltage+0x48>)
 80016b2:	f00d fd9d 	bl	800f1f0 <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	461a      	mov	r2, r3
 80016bc:	490a      	ldr	r1, [pc, #40]	; (80016e8 <set_uart_usb_in_out_voltage+0x4c>)
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <set_uart_usb_in_out_voltage+0x48>)
 80016c0:	f00d fe72 	bl	800f3a8 <siprintf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <set_uart_usb_in_out_voltage+0x44>)
 80016ca:	801a      	strh	r2, [r3, #0]
			"Voltage : %d V\r\n", voltage);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <set_uart_usb_in_out_voltage+0x44>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <set_uart_usb_in_out_voltage+0x48>)
 80016d4:	f7ff ff16 	bl	8001504 <uart_usb_in_out_data_send>

}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000a0 	.word	0x200000a0
 80016e4:	200000a4 	.word	0x200000a4
 80016e8:	0800fba4 	.word	0x0800fba4

080016ec <set_uart_usb_in_out_payload>:

static void set_uart_usb_in_out_payload(
		radio_packet_protocol_t receive_radio_packet, int16_t rssi, int8_t snr) {
 80016ec:	b084      	sub	sp, #16
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f107 0c10 	add.w	ip, r7, #16
 80016f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uart_tx_buffer_length = 0;
 80016fc:	4b6f      	ldr	r3, [pc, #444]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 8001702:	22ff      	movs	r2, #255	; 0xff
 8001704:	2100      	movs	r1, #0
 8001706:	486e      	ldr	r0, [pc, #440]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001708:	f00d fd72 	bl	800f1f0 <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 800170c:	496d      	ldr	r1, [pc, #436]	; (80018c4 <set_uart_usb_in_out_payload+0x1d8>)
 800170e:	486c      	ldr	r0, [pc, #432]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001710:	f00d fe4a 	bl	800f3a8 <siprintf>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800171a:	801a      	strh	r2, [r3, #0]
			"\r\nPacket Receive\r\n");

	uint16_t company_id = receive_radio_packet.Packet.company_id[0] << 8;
 800171c:	7c3b      	ldrb	r3, [r7, #16]
 800171e:	b29b      	uxth	r3, r3
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	80bb      	strh	r3, [r7, #4]
	company_id |= receive_radio_packet.Packet.company_id[1];
 8001724:	7c7b      	ldrb	r3, [r7, #17]
 8001726:	b29a      	uxth	r2, r3
 8001728:	88bb      	ldrh	r3, [r7, #4]
 800172a:	4313      	orrs	r3, r2
 800172c:	80bb      	strh	r3, [r7, #4]

	uart_tx_buffer_length += sprintf(
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	4b62      	ldr	r3, [pc, #392]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001736:	4413      	add	r3, r2
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	4963      	ldr	r1, [pc, #396]	; (80018c8 <set_uart_usb_in_out_payload+0x1dc>)
 800173c:	4618      	mov	r0, r3
 800173e:	f00d fe33 	bl	800f3a8 <siprintf>
 8001742:	4603      	mov	r3, r0
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b5b      	ldr	r3, [pc, #364]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001750:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Company ID : %d\r\n", company_id);

	uint16_t device_id = receive_radio_packet.Packet.device_id[0] << 8;
 8001752:	7cbb      	ldrb	r3, [r7, #18]
 8001754:	b29b      	uxth	r3, r3
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	807b      	strh	r3, [r7, #2]
	device_id |= receive_radio_packet.Packet.device_id[1];
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	b29a      	uxth	r2, r3
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	4313      	orrs	r3, r2
 8001762:	807b      	strh	r3, [r7, #2]

	uart_tx_buffer_length += sprintf(
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 800176c:	4413      	add	r3, r2
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	4956      	ldr	r1, [pc, #344]	; (80018cc <set_uart_usb_in_out_payload+0x1e0>)
 8001772:	4618      	mov	r0, r3
 8001774:	f00d fe18 	bl	800f3a8 <siprintf>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	4413      	add	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001786:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Device ID : %d\r\n", device_id);

	uart_tx_buffer_length += sprintf(
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001790:	4413      	add	r3, r2
 8001792:	494f      	ldr	r1, [pc, #316]	; (80018d0 <set_uart_usb_in_out_payload+0x1e4>)
 8001794:	4618      	mov	r0, r3
 8001796:	f00d fe07 	bl	800f3a8 <siprintf>
 800179a:	4603      	mov	r3, r0
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b45      	ldr	r3, [pc, #276]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017a8:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "MAC Address : ");

	for (uint8_t i = 0; i < 8; i++) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	e018      	b.n	80017e2 <set_uart_usb_in_out_payload+0xf6>

		uart_tx_buffer_length += sprintf(
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 80017b8:	18d0      	adds	r0, r2, r3
				(char*) uart_tx_buffer + uart_tx_buffer_length, "%02X",
				receive_radio_packet.Packet.mac_address[i]);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	4413      	add	r3, r2
 80017c2:	791b      	ldrb	r3, [r3, #4]
		uart_tx_buffer_length += sprintf(
 80017c4:	461a      	mov	r2, r3
 80017c6:	4943      	ldr	r1, [pc, #268]	; (80018d4 <set_uart_usb_in_out_payload+0x1e8>)
 80017c8:	f00d fdee 	bl	800f3a8 <siprintf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b38      	ldr	r3, [pc, #224]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017da:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	3301      	adds	r3, #1
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d9e3      	bls.n	80017b0 <set_uart_usb_in_out_payload+0xc4>

	}

	uart_tx_buffer_length += sprintf(
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 80017f0:	4413      	add	r3, r2
 80017f2:	4939      	ldr	r1, [pc, #228]	; (80018d8 <set_uart_usb_in_out_payload+0x1ec>)
 80017f4:	4618      	mov	r0, r3
 80017f6:	f00d fdd7 	bl	800f3a8 <siprintf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001808:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "\r\n");

	uart_tx_buffer_length += sprintf(
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001812:	4413      	add	r3, r2
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Control Number : %d\r\n",
			receive_radio_packet.Packet.control_number);
 8001814:	7f3a      	ldrb	r2, [r7, #28]
	uart_tx_buffer_length += sprintf(
 8001816:	4931      	ldr	r1, [pc, #196]	; (80018dc <set_uart_usb_in_out_payload+0x1f0>)
 8001818:	4618      	mov	r0, r3
 800181a:	f00d fdc5 	bl	800f3a8 <siprintf>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b24      	ldr	r3, [pc, #144]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800182c:	801a      	strh	r2, [r3, #0]

	uart_tx_buffer_length += sprintf(
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001836:	4413      	add	r3, r2
 8001838:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800183c:	4928      	ldr	r1, [pc, #160]	; (80018e0 <set_uart_usb_in_out_payload+0x1f4>)
 800183e:	4618      	mov	r0, r3
 8001840:	f00d fdb2 	bl	800f3a8 <siprintf>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	4413      	add	r3, r2
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001852:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "RSSI : %d\r\n",
			rssi);

	uart_tx_buffer_length += sprintf(
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 800185c:	4413      	add	r3, r2
 800185e:	f997 2094 	ldrsb.w	r2, [r7, #148]	; 0x94
 8001862:	4920      	ldr	r1, [pc, #128]	; (80018e4 <set_uart_usb_in_out_payload+0x1f8>)
 8001864:	4618      	mov	r0, r3
 8001866:	f00d fd9f 	bl	800f3a8 <siprintf>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001878:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "SNR : %d\r\n",
			snr);

	uart_tx_buffer_length += sprintf(
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 8001882:	4413      	add	r3, r2
 8001884:	f107 021d 	add.w	r2, r7, #29
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <set_uart_usb_in_out_payload+0x1fc>)
 800188a:	4618      	mov	r0, r3
 800188c:	f00d fd8c 	bl	800f3a8 <siprintf>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 800189e:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "Payload : %s\r\n",
			receive_radio_packet.Packet.paylaod);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <set_uart_usb_in_out_payload+0x1d0>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <set_uart_usb_in_out_payload+0x1d4>)
 80018a8:	f7ff fe2c 	bl	8001504 <uart_usb_in_out_data_send>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018b6:	b004      	add	sp, #16
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200000a0 	.word	0x200000a0
 80018c0:	200000a4 	.word	0x200000a4
 80018c4:	0800fbb8 	.word	0x0800fbb8
 80018c8:	0800fbcc 	.word	0x0800fbcc
 80018cc:	0800fbe0 	.word	0x0800fbe0
 80018d0:	0800fb88 	.word	0x0800fb88
 80018d4:	0800fb98 	.word	0x0800fb98
 80018d8:	0800fba0 	.word	0x0800fba0
 80018dc:	0800fbf4 	.word	0x0800fbf4
 80018e0:	0800fc0c 	.word	0x0800fc0c
 80018e4:	0800fc18 	.word	0x0800fc18
 80018e8:	0800fc24 	.word	0x0800fc24

080018ec <get_i2c_scan_address>:

static uint8_t get_i2c_scan_address() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

	uint8_t count = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;

	for (uint8_t i = 1; i < 128; i++) {
 80018f6:	2301      	movs	r3, #1
 80018f8:	71bb      	strb	r3, [r7, #6]
 80018fa:	e017      	b.n	800192c <get_i2c_scan_address+0x40>

		result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (i << 1), 2, 2);
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	b299      	uxth	r1, r3
 8001904:	2302      	movs	r3, #2
 8001906:	2202      	movs	r2, #2
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <get_i2c_scan_address+0x54>)
 800190a:	f001 ff23 	bl	8003754 <HAL_I2C_IsDeviceReady>
 800190e:	4603      	mov	r3, r0
 8001910:	717b      	strb	r3, [r7, #5]

		if (result == HAL_OK) {
 8001912:	797b      	ldrb	r3, [r7, #5]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <get_i2c_scan_address+0x3a>

			set_uart_usb_in_out_find_i2c_address(i);
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fe3e 	bl	800159c <set_uart_usb_in_out_find_i2c_address>

			count++;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	3301      	adds	r3, #1
 8001924:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 1; i < 128; i++) {
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	3301      	adds	r3, #1
 800192a:	71bb      	strb	r3, [r7, #6]
 800192c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dae3      	bge.n	80018fc <get_i2c_scan_address+0x10>

		}

	}

	return count;
 8001934:	79fb      	ldrb	r3, [r7, #7]

}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000202c 	.word	0x2000202c
 8001944:	00000000 	.word	0x00000000

08001948 <get_voltage_level>:

static void get_voltage_level() {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc);
 800194e:	4822      	ldr	r0, [pc, #136]	; (80019d8 <get_voltage_level+0x90>)
 8001950:	f001 f8ea 	bl	8002b28 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc, 10);
 8001954:	210a      	movs	r1, #10
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <get_voltage_level+0x90>)
 8001958:	f001 f95e 	bl	8002c18 <HAL_ADC_PollForConversion>
	float battery_adc = HAL_ADC_GetValue(&hadc);
 800195c:	481e      	ldr	r0, [pc, #120]	; (80019d8 <get_voltage_level+0x90>)
 800195e:	f001 f9f2 	bl	8002d46 <HAL_ADC_GetValue>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f92f 	bl	8000bc8 <__aeabi_ui2f>
 800196a:	4603      	mov	r3, r0
 800196c:	607b      	str	r3, [r7, #4]
	battery_adc = battery_adc * 3.3 / 4095;
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe fdba 	bl	80004e8 <__aeabi_f2d>
 8001974:	a314      	add	r3, pc, #80	; (adr r3, 80019c8 <get_voltage_level+0x80>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe0d 	bl	8000598 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	a312      	add	r3, pc, #72	; (adr r3, 80019d0 <get_voltage_level+0x88>)
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	f7fe ff2e 	bl	80007ec <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f810 	bl	80009bc <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	607b      	str	r3, [r7, #4]
	battery_adc *= 2;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f85f 	bl	8000a68 <__addsf3>
 80019aa:	4603      	mov	r3, r0
 80019ac:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc);
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <get_voltage_level+0x90>)
 80019b0:	f001 f900 	bl	8002bb4 <HAL_ADC_Stop>

	set_uart_usb_in_out_voltage((int16_t) 4);
 80019b4:	2004      	movs	r0, #4
 80019b6:	f7ff fe71 	bl	800169c <set_uart_usb_in_out_voltage>

}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	66666666 	.word	0x66666666
 80019cc:	400a6666 	.word	0x400a6666
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40affe00 	.word	0x40affe00
 80019d8:	20002630 	.word	0x20002630

080019dc <StartRadioTask>:
 * @brief  Function implementing the radioTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRadioTask */
void StartRadioTask(void *argument) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	/* init code for SubGHz_Phy */
	MX_SubGHz_Phy_Init();
 80019e4:	f00c ff3e 	bl	800e864 <MX_SubGHz_Phy_Init>
	/* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_Port, RF_SWITCH_VDD_Pin,
 80019e8:	2200      	movs	r2, #0
 80019ea:	2120      	movs	r1, #32
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f001 fdf1 	bl	80035d6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_vdd_pin(RF_SWITCH_VDD_GPIO_Port,
 80019f4:	2120      	movs	r1, #32
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f000 f9b9 	bl	8001d70 <set_radio_pin_manager_rf_switch_vdd_pin>
	RF_SWITCH_VDD_Pin);

	HAL_GPIO_WritePin(RF_SWITCH_CTRL_GPIO_Port, RF_SWITCH_CTRL_Pin,
 80019fe:	2200      	movs	r2, #0
 8001a00:	2101      	movs	r1, #1
 8001a02:	482d      	ldr	r0, [pc, #180]	; (8001ab8 <StartRadioTask+0xdc>)
 8001a04:	f001 fde7 	bl	80035d6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_pin(RF_SWITCH_CTRL_GPIO_Port,
 8001a08:	2101      	movs	r1, #1
 8001a0a:	482b      	ldr	r0, [pc, #172]	; (8001ab8 <StartRadioTask+0xdc>)
 8001a0c:	f000 f9c6 	bl	8001d9c <set_radio_pin_manager_rf_switch_pin>

#endif

#ifdef EXAMPLE_RX

		radio_timer_count = 0;
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <StartRadioTask+0xe0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	801a      	strh	r2, [r3, #0]
		radio_state = RADIO_RX_START;
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <StartRadioTask+0xe4>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]

		radio_rx_rssi = 0;
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <StartRadioTask+0xe8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
		radio_rx_snr = 0;
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <StartRadioTask+0xec>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		radio_rx_buffer_size = 0;
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <StartRadioTask+0xf0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
		memset(radio_rx_buffer, 0x00, sizeof(radio_rx_buffer));
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	2100      	movs	r1, #0
 8001a32:	4827      	ldr	r0, [pc, #156]	; (8001ad0 <StartRadioTask+0xf4>)
 8001a34:	f00d fbdc 	bl	800f1f0 <memset>

		MX_SubGhz_Phy_RecvicePacket();
 8001a38:	f00c ff92 	bl	800e960 <MX_SubGhz_Phy_RecvicePacket>

		osSemaphoreAcquire(radioBinarySemHandle, osWaitForever);
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <StartRadioTask+0xf8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fb87 	bl	8008158 <osSemaphoreAcquire>

		if (MX_SubGhz_Phy_Get_RecvicePacket_State() == 0x01) {
 8001a4a:	f00c ff95 	bl	800e978 <MX_SubGhz_Phy_Get_RecvicePacket_State>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <StartRadioTask+0x84>

			MX_SubGhz_Phy_Get_RecvicePacket(&radio_rx_rssi, &radio_rx_snr,
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <StartRadioTask+0xf0>)
 8001a56:	4a1e      	ldr	r2, [pc, #120]	; (8001ad0 <StartRadioTask+0xf4>)
 8001a58:	491b      	ldr	r1, [pc, #108]	; (8001ac8 <StartRadioTask+0xec>)
 8001a5a:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <StartRadioTask+0xe8>)
 8001a5c:	f00c ff96 	bl	800e98c <MX_SubGhz_Phy_Get_RecvicePacket>
					radio_rx_buffer, &radio_rx_buffer_size);

		}

		radio_timer_count = 0;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <StartRadioTask+0xe0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	801a      	strh	r2, [r3, #0]
		radio_state = RADIO_TX_START;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <StartRadioTask+0xe4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
		MX_SubGhz_Phy_SendPacket(radio_tx_buffer, radio_tx_buffer_size);
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <StartRadioTask+0xfc>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	481a      	ldr	r0, [pc, #104]	; (8001adc <StartRadioTask+0x100>)
 8001a74:	f00c ff56 	bl	800e924 <MX_SubGhz_Phy_SendPacket>

		osSemaphoreAcquire(radioBinarySemHandle, RADIO_TX_TIMEOUT_COUNT);
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <StartRadioTask+0xf8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a80:	4618      	mov	r0, r3
 8001a82:	f006 fb69 	bl	8008158 <osSemaphoreAcquire>

		if (MX_SubGhz_Phy_Get_SendPacket_State() == 0x01) {
 8001a86:	f00c ff61 	bl	800e94c <MX_SubGhz_Phy_Get_SendPacket_State>

		}

		radio_timer_count = 0;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <StartRadioTask+0xe0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	801a      	strh	r2, [r3, #0]
		radio_state = RADIO_SLEEP;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <StartRadioTask+0xe4>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
		MX_SubGhz_Phy_Radio_Sleep();
 8001a96:	f00c ff3f 	bl	800e918 <MX_SubGhz_Phy_Radio_Sleep>

		osSemaphoreRelease(mainBinarySemHandle);
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <StartRadioTask+0x104>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 fbc0 	bl	8008224 <osSemaphoreRelease>

		HAL_GPIO_TogglePin(GPIO_LED_2_Port, GPIO_LED_2_Pin);
 8001aa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f001 fdaa 	bl	8003604 <HAL_GPIO_TogglePin>

		osDelay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f006 f9ad 	bl	8007e10 <osDelay>
		radio_timer_count = 0;
 8001ab6:	e7ab      	b.n	8001a10 <StartRadioTask+0x34>
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	20000224 	.word	0x20000224
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	200002a8 	.word	0x200002a8
 8001ac8:	200002aa 	.word	0x200002aa
 8001acc:	200002ab 	.word	0x200002ab
 8001ad0:	200002ac 	.word	0x200002ac
 8001ad4:	20002394 	.word	0x20002394
 8001ad8:	20000226 	.word	0x20000226
 8001adc:	20000228 	.word	0x20000228
 8001ae0:	20002628 	.word	0x20002628

08001ae4 <StartMainTask>:
 * @brief Function implementing the mainTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument) {
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b0a5      	sub	sp, #148	; 0x94
 8001ae8:	af1e      	add	r7, sp, #120	; 0x78
 8001aea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMainTask */

	HAL_GPIO_WritePin(GPIO_LED_0_Port, GPIO_LED_0_Pin, 1);
 8001aec:	2201      	movs	r2, #1
 8001aee:	2110      	movs	r1, #16
 8001af0:	486d      	ldr	r0, [pc, #436]	; (8001ca8 <StartMainTask+0x1c4>)
 8001af2:	f001 fd70 	bl	80035d6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_LED_1_Port, GPIO_LED_1_Pin, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2108      	movs	r1, #8
 8001afa:	486b      	ldr	r0, [pc, #428]	; (8001ca8 <StartMainTask+0x1c4>)
 8001afc:	f001 fd6b 	bl	80035d6 <HAL_GPIO_WritePin>

	uint32_t ID1 = HAL_GetUIDw0();
 8001b00:	f000 fd48 	bl	8002594 <HAL_GetUIDw0>
 8001b04:	6178      	str	r0, [r7, #20]
	uint32_t ID2 = HAL_GetUIDw1();
 8001b06:	f000 fd4f 	bl	80025a8 <HAL_GetUIDw1>
 8001b0a:	6138      	str	r0, [r7, #16]
	uint32_t ID3 = HAL_GetUIDw2();
 8001b0c:	f000 fd56 	bl	80025bc <HAL_GetUIDw2>
 8001b10:	60f8      	str	r0, [r7, #12]

	mac_address[7] = (ID1 + ID3) >> 24;
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	0e1b      	lsrs	r3, r3, #24
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <StartMainTask+0x1c8>)
 8001b1e:	71da      	strb	r2, [r3, #7]
	mac_address[6] = (ID1 + ID3) >> 16;
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b60      	ldr	r3, [pc, #384]	; (8001cac <StartMainTask+0x1c8>)
 8001b2c:	719a      	strb	r2, [r3, #6]
	mac_address[5] = (ID1 + ID3) >> 8;
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b5c      	ldr	r3, [pc, #368]	; (8001cac <StartMainTask+0x1c8>)
 8001b3a:	715a      	strb	r2, [r3, #5]
	mac_address[4] = (ID1 + ID3);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b58      	ldr	r3, [pc, #352]	; (8001cac <StartMainTask+0x1c8>)
 8001b4a:	711a      	strb	r2, [r3, #4]
	mac_address[3] = ID2 >> 24;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	0e1b      	lsrs	r3, r3, #24
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b56      	ldr	r3, [pc, #344]	; (8001cac <StartMainTask+0x1c8>)
 8001b54:	70da      	strb	r2, [r3, #3]
	mac_address[2] = ID2 >> 16;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b53      	ldr	r3, [pc, #332]	; (8001cac <StartMainTask+0x1c8>)
 8001b5e:	709a      	strb	r2, [r3, #2]
	mac_address[1] = ID2 >> 8;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b51      	ldr	r3, [pc, #324]	; (8001cac <StartMainTask+0x1c8>)
 8001b68:	705a      	strb	r2, [r3, #1]
	mac_address[0] = ID2;
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	; (8001cac <StartMainTask+0x1c8>)
 8001b70:	701a      	strb	r2, [r3, #0]

	radio_packet_protocol.Packet.company_id[0] = COMPANY_ID >> 8;
 8001b72:	2300      	movs	r3, #0
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <StartMainTask+0x1cc>)
 8001b7c:	701a      	strb	r2, [r3, #0]
	radio_packet_protocol.Packet.company_id[1] = COMPANY_ID;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <StartMainTask+0x1cc>)
 8001b84:	705a      	strb	r2, [r3, #1]

	radio_packet_protocol.Packet.device_id[0] = DEVICE_ID >> 8;
 8001b86:	2300      	movs	r3, #0
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <StartMainTask+0x1cc>)
 8001b90:	709a      	strb	r2, [r3, #2]
	radio_packet_protocol.Packet.device_id[1] = DEVICE_ID;
 8001b92:	2300      	movs	r3, #0
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <StartMainTask+0x1cc>)
 8001b98:	70da      	strb	r2, [r3, #3]

	memcpy(radio_packet_protocol.Packet.mac_address, mac_address, 8);
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <StartMainTask+0x1cc>)
 8001b9c:	4a43      	ldr	r2, [pc, #268]	; (8001cac <StartMainTask+0x1c8>)
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba4:	e883 0003 	stmia.w	r3, {r0, r1}

	radio_packet_protocol.Packet.control_number = 0;
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <StartMainTask+0x1cc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	731a      	strb	r2, [r3, #12]

	memset(radio_packet_protocol.Packet.paylaod, 0x00,
 8001bae:	2273      	movs	r2, #115	; 0x73
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4840      	ldr	r0, [pc, #256]	; (8001cb4 <StartMainTask+0x1d0>)
 8001bb4:	f00d fb1c 	bl	800f1f0 <memset>
			sizeof(radio_packet_protocol.Packet.paylaod));

	set_uart_usb_in_out_write_string("\r\n\r\n");
 8001bb8:	483f      	ldr	r0, [pc, #252]	; (8001cb8 <StartMainTask+0x1d4>)
 8001bba:	f7ff fcc9 	bl	8001550 <set_uart_usb_in_out_write_string>

#endif

#ifdef EXAMPLE_RX

	uart_rx_buffer_size = sprintf((char*) uart_rx_buffer, "Pong");
 8001bbe:	493f      	ldr	r1, [pc, #252]	; (8001cbc <StartMainTask+0x1d8>)
 8001bc0:	483f      	ldr	r0, [pc, #252]	; (8001cc0 <StartMainTask+0x1dc>)
 8001bc2:	f00d fbf1 	bl	800f3a8 <siprintf>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <StartMainTask+0x1e0>)
 8001bcc:	701a      	strb	r2, [r3, #0]

	radio_packet_protocol_size = PACKET_HEAD_SIZE;
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <StartMainTask+0x1e4>)
 8001bd0:	220d      	movs	r2, #13
 8001bd2:	701a      	strb	r2, [r3, #0]
	radio_packet_protocol_size += uart_rx_buffer_size;
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <StartMainTask+0x1e4>)
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <StartMainTask+0x1e0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <StartMainTask+0x1e4>)
 8001be2:	701a      	strb	r2, [r3, #0]
	memcpy(radio_packet_protocol.Packet.paylaod, uart_rx_buffer,
 8001be4:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <StartMainTask+0x1e0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <StartMainTask+0x1dc>)
 8001bec:	4831      	ldr	r0, [pc, #196]	; (8001cb4 <StartMainTask+0x1d0>)
 8001bee:	f00d faf1 	bl	800f1d4 <memcpy>
			uart_rx_buffer_size);

	radio_tx_buffer_size = 0;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <StartMainTask+0x1e8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
	memset(radio_tx_buffer, 0x0, sizeof(radio_tx_buffer));
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4834      	ldr	r0, [pc, #208]	; (8001cd0 <StartMainTask+0x1ec>)
 8001bfe:	f00d faf7 	bl	800f1f0 <memset>

	radio_tx_buffer_size = radio_packet_protocol_size;
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <StartMainTask+0x1e4>)
 8001c04:	781a      	ldrb	r2, [r3, #0]
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <StartMainTask+0x1e8>)
 8001c08:	701a      	strb	r2, [r3, #0]
	memcpy(radio_tx_buffer, radio_packet_protocol.buffer,
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <StartMainTask+0x1e4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <StartMainTask+0x1cc>)
 8001c12:	482f      	ldr	r0, [pc, #188]	; (8001cd0 <StartMainTask+0x1ec>)
 8001c14:	f00d fade 	bl	800f1d4 <memcpy>
			radio_packet_protocol_size);

	set_uart_usb_in_out_write_string("Start AxDen RX Example");
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <StartMainTask+0x1f0>)
 8001c1a:	f7ff fc99 	bl	8001550 <set_uart_usb_in_out_write_string>

#endif

	set_uart_usb_in_out_mac_address(mac_address);
 8001c1e:	4823      	ldr	r0, [pc, #140]	; (8001cac <StartMainTask+0x1c8>)
 8001c20:	f7ff fce4 	bl	80015ec <set_uart_usb_in_out_mac_address>

	set_uart_usb_in_out_write_string("Start I2C scan");
 8001c24:	482c      	ldr	r0, [pc, #176]	; (8001cd8 <StartMainTask+0x1f4>)
 8001c26:	f7ff fc93 	bl	8001550 <set_uart_usb_in_out_write_string>

	get_i2c_scan_address();
 8001c2a:	f7ff fe5f 	bl	80018ec <get_i2c_scan_address>

	get_voltage_level();
 8001c2e:	f7ff fe8b 	bl	8001948 <get_voltage_level>

	HAL_UART_Receive_IT(&huart2, &uart_2_data, 1);

#endif

	if (mainTimerHandle != NULL) {
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <StartMainTask+0x1f8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <StartMainTask+0x162>

		osTimerStart(mainTimerHandle, 100);
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <StartMainTask+0x1f8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2164      	movs	r1, #100	; 0x64
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 f9ad 	bl	8007fa0 <osTimerStart>

#endif

#ifdef EXAMPLE_RX

		osSemaphoreAcquire(mainBinarySemHandle, osWaitForever);
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <StartMainTask+0x1fc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f006 fa82 	bl	8008158 <osSemaphoreAcquire>

		if (radio_rx_buffer_size > 0) {
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <StartMainTask+0x200>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <StartMainTask+0x1ba>

			memset(&radio_packet_protocol, 0x00,
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <StartMainTask+0x1cc>)
 8001c62:	f00d fac5 	bl	800f1f0 <memset>
					sizeof(radio_packet_protocol_t));

			memcpy(radio_packet_protocol.buffer, radio_rx_buffer,
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <StartMainTask+0x200>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <StartMainTask+0x204>)
 8001c6e:	4810      	ldr	r0, [pc, #64]	; (8001cb0 <StartMainTask+0x1cc>)
 8001c70:	f00d fab0 	bl	800f1d4 <memcpy>
					radio_rx_buffer_size);

			set_uart_usb_in_out_payload(radio_packet_protocol, radio_rx_rssi,
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <StartMainTask+0x208>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <StartMainTask+0x20c>)
 8001c7c:	f992 2000 	ldrsb.w	r2, [r2]
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <StartMainTask+0x1cc>)
 8001c82:	921d      	str	r2, [sp, #116]	; 0x74
 8001c84:	931c      	str	r3, [sp, #112]	; 0x70
 8001c86:	4668      	mov	r0, sp
 8001c88:	f104 0310 	add.w	r3, r4, #16
 8001c8c:	2270      	movs	r2, #112	; 0x70
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f00d faa0 	bl	800f1d4 <memcpy>
 8001c94:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c98:	f7ff fd28 	bl	80016ec <set_uart_usb_in_out_payload>
 8001c9c:	e7d3      	b.n	8001c46 <StartMainTask+0x162>
					radio_rx_snr);

		} else {

			set_uart_usb_in_out_write_string("RX Timeout");
 8001c9e:	4815      	ldr	r0, [pc, #84]	; (8001cf4 <StartMainTask+0x210>)
 8001ca0:	f7ff fc56 	bl	8001550 <set_uart_usb_in_out_write_string>
		osSemaphoreAcquire(mainBinarySemHandle, osWaitForever);
 8001ca4:	e7cf      	b.n	8001c46 <StartMainTask+0x162>
 8001ca6:	bf00      	nop
 8001ca8:	48000400 	.word	0x48000400
 8001cac:	20000098 	.word	0x20000098
 8001cb0:	200001a4 	.word	0x200001a4
 8001cb4:	200001b1 	.word	0x200001b1
 8001cb8:	0800fc34 	.word	0x0800fc34
 8001cbc:	0800fc3c 	.word	0x0800fc3c
 8001cc0:	20000330 	.word	0x20000330
 8001cc4:	2000032c 	.word	0x2000032c
 8001cc8:	200001a3 	.word	0x200001a3
 8001ccc:	20000226 	.word	0x20000226
 8001cd0:	20000228 	.word	0x20000228
 8001cd4:	0800fc44 	.word	0x0800fc44
 8001cd8:	0800fc5c 	.word	0x0800fc5c
 8001cdc:	2000262c 	.word	0x2000262c
 8001ce0:	20002628 	.word	0x20002628
 8001ce4:	200002ab 	.word	0x200002ab
 8001ce8:	200002ac 	.word	0x200002ac
 8001cec:	200002a8 	.word	0x200002a8
 8001cf0:	200002aa 	.word	0x200002aa
 8001cf4:	0800fc6c 	.word	0x0800fc6c

08001cf8 <mainTimerCallback>:
	}
	/* USER CODE END StartMainTask */
}

/* mainTimerCallback function */
void mainTimerCallback(void *argument) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

	}

#endif

	if (HAL_GPIO_ReadPin(GPIO_BUTTON_0_Port, GPIO_BUTTON_0_Pin) == 0x01) {
 8001d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <mainTimerCallback+0x40>)
 8001d06:	f001 fc4f 	bl	80035a8 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d103      	bne.n	8001d18 <mainTimerCallback+0x20>

		HAL_GPIO_TogglePin(GPIO_LED_0_Port, GPIO_LED_0_Pin);
 8001d10:	2110      	movs	r1, #16
 8001d12:	4809      	ldr	r0, [pc, #36]	; (8001d38 <mainTimerCallback+0x40>)
 8001d14:	f001 fc76 	bl	8003604 <HAL_GPIO_TogglePin>

	}

	if (HAL_GPIO_ReadPin(GPIO_BUTTON_1_Port, GPIO_BUTTON_1_Pin) == 0x01) {
 8001d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <mainTimerCallback+0x44>)
 8001d1e:	f001 fc43 	bl	80035a8 <HAL_GPIO_ReadPin>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d103      	bne.n	8001d30 <mainTimerCallback+0x38>

		HAL_GPIO_TogglePin(GPIO_LED_1_Port, GPIO_LED_1_Pin);
 8001d28:	2108      	movs	r1, #8
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <mainTimerCallback+0x40>)
 8001d2c:	f001 fc6a 	bl	8003604 <HAL_GPIO_TogglePin>

	}

	/* USER CODE END mainTimerCallback */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800

08001d40 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001d52:	f000 fbdf 	bl	8002514 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40014800 	.word	0x40014800

08001d64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <set_radio_pin_manager_rf_switch_vdd_pin>:
static uint16_t RF_SWITCH_VDD_GPIO_PIN;

static GPIO_TypeDef *RF_SWITCH_GPIO_PORT;
static uint16_t RF_SWITCH_GPIO_PIN;

void set_radio_pin_manager_rf_switch_vdd_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_VDD_GPIO_PORT = port;
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <set_radio_pin_manager_rf_switch_vdd_pin+0x24>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
	RF_SWITCH_VDD_GPIO_PIN = pin;
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <set_radio_pin_manager_rf_switch_vdd_pin+0x28>)
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	8013      	strh	r3, [r2, #0]

}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200003b0 	.word	0x200003b0
 8001d98:	200003b4 	.word	0x200003b4

08001d9c <set_radio_pin_manager_rf_switch_pin>:
	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_PORT, RF_SWITCH_VDD_GPIO_PIN,
			GPIO_PIN_RESET);

}

void set_radio_pin_manager_rf_switch_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_GPIO_PORT = port;
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <set_radio_pin_manager_rf_switch_pin+0x24>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
	RF_SWITCH_GPIO_PIN = pin;
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <set_radio_pin_manager_rf_switch_pin+0x28>)
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	8013      	strh	r3, [r2, #0]

}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200003b8 	.word	0x200003b8
 8001dc4:	200003bc 	.word	0x200003bc

08001dc8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_AHB2_GRP1_EnableClock>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f06f 0001 	mvn.w	r0, #1
 8001eb4:	f001 f933 	bl	800311e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_ADC_MspInit+0x74>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d123      	bne.n	8001f26 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ede:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee2:	f7ff ffb1 	bl	8001e48 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff ff7e 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ff7b 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    PA10     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = ADC_0_Pin;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_0_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	4619      	mov	r1, r3
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <HAL_ADC_MspInit+0x78>)
 8001f06:	f001 f9ef 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f10:	2303      	movs	r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f22:	f001 f9e1 	bl	80032e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40012400 	.word	0x40012400
 8001f34:	48000400 	.word	0x48000400

08001f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b096      	sub	sp, #88	; 0x58
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2238      	movs	r2, #56	; 0x38
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f00d f949 	bl	800f1f0 <memset>
  if(hi2c->Instance==I2C2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d127      	bne.n	8001fb8 <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f6c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fae6 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f82:	f7ff feef 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff ff2e 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA11     ------> I2C2_SDA
    PA12     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f92:	2312      	movs	r3, #18
 8001f94:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f001 f99c 	bl	80032e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fb0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001fb4:	f7ff ff30 	bl	8001e18 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3758      	adds	r7, #88	; 0x58
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40005800 	.word	0x40005800

08001fc4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b090      	sub	sp, #64	; 0x40
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	2238      	movs	r2, #56	; 0x38
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00d f90b 	bl	800f1f0 <memset>
  if(hlptim->Instance==LPTIM1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_LPTIM_MspInit+0x50>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d113      	bne.n	800200c <HAL_LPTIM_MspInit+0x48>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8001fea:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 faa7 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8002000:	f7ff feb0 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002004:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002008:	f7ff ff06 	bl	8001e18 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800200c:	bf00      	nop
 800200e:	3740      	adds	r7, #64	; 0x40
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40007c00 	.word	0x40007c00

08002018 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b090      	sub	sp, #64	; 0x40
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	2238      	movs	r2, #56	; 0x38
 8002026:	2100      	movs	r1, #0
 8002028:	4618      	mov	r0, r3
 800202a:	f00d f8e1 	bl	800f1f0 <memset>
  if(hrtc->Instance==RTC)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_RTC_MspInit+0x54>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d115      	bne.n	8002064 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fa7d 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002054:	f7ff fe86 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002058:	f7ff feb6 	bl	8001dc8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800205c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002060:	f7ff feda 	bl	8001e18 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3740      	adds	r7, #64	; 0x40
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40002800 	.word	0x40002800

08002070 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff fefd 	bl	8001e78 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2032      	movs	r0, #50	; 0x32
 8002084:	f001 f84b 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002088:	2032      	movs	r0, #50	; 0x32
 800208a:	f001 f862 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	; 0x58
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2238      	movs	r2, #56	; 0x38
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00d f899 	bl	800f1f0 <memset>
  if(huart->Instance==USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a35      	ldr	r2, [pc, #212]	; (8002198 <HAL_UART_MspInit+0x100>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d12e      	bne.n	8002126 <HAL_UART_MspInit+0x8e>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020cc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020d0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fa36 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020e2:	f7ff fe3f 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ea:	f7ff fead 	bl	8001e48 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2002      	movs	r0, #2
 80020f0:	f7ff fe7a 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f4:	23c0      	movs	r3, #192	; 0xc0
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002104:	2307      	movs	r3, #7
 8002106:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800210c:	4619      	mov	r1, r3
 800210e:	4823      	ldr	r0, [pc, #140]	; (800219c <HAL_UART_MspInit+0x104>)
 8002110:	f001 f8ea 	bl	80032e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002114:	2200      	movs	r2, #0
 8002116:	2105      	movs	r1, #5
 8002118:	2024      	movs	r0, #36	; 0x24
 800211a:	f001 f800 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211e:	2024      	movs	r0, #36	; 0x24
 8002120:	f001 f817 	bl	8003152 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002124:	e033      	b.n	800218e <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_UART_MspInit+0x108>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d12e      	bne.n	800218e <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002130:	2302      	movs	r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002134:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002138:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fa02 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_MspInit+0xb6>
      Error_Handler();
 800214a:	f7ff fe0b 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800214e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002152:	f7ff fe61 	bl	8001e18 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff fe46 	bl	8001de8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800215c:	230c      	movs	r3, #12
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216c:	2307      	movs	r3, #7
 800216e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f001 f8b5 	bl	80032e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2105      	movs	r1, #5
 8002182:	2025      	movs	r0, #37	; 0x25
 8002184:	f000 ffcb 	bl	800311e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002188:	2025      	movs	r0, #37	; 0x25
 800218a:	f000 ffe2 	bl	8003152 <HAL_NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3758      	adds	r7, #88	; 0x58
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40013800 	.word	0x40013800
 800219c:	48000400 	.word	0x48000400
 80021a0:	40004400 	.word	0x40004400

080021a4 <LL_APB2_GRP1_EnableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80021ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80021ee:	f7ff ffd9 	bl	80021a4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f2:	f107 020c 	add.w	r2, r7, #12
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 ffbb 	bl	8005178 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002202:	f002 ffa7 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8002206:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_InitTick+0xbc>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	3b01      	subs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_InitTick+0xc0>)
 8002218:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <HAL_InitTick+0xc4>)
 800221a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_InitTick+0xc0>)
 800221e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002222:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_InitTick+0xc0>)
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_InitTick+0xc0>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_InitTick+0xc0>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8002236:	4817      	ldr	r0, [pc, #92]	; (8002294 <HAL_InitTick+0xc0>)
 8002238:	f004 f866 	bl	8006308 <HAL_TIM_Base_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11b      	bne.n	8002282 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800224a:	4812      	ldr	r0, [pc, #72]	; (8002294 <HAL_InitTick+0xc0>)
 800224c:	f004 f8bc 	bl	80063c8 <HAL_TIM_Base_Start_IT>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800225a:	2b00      	cmp	r3, #0
 800225c:	d111      	bne.n	8002282 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800225e:	201d      	movs	r0, #29
 8002260:	f000 ff77 	bl	8003152 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d808      	bhi.n	800227c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 800226a:	2200      	movs	r2, #0
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	201d      	movs	r0, #29
 8002270:	f000 ff55 	bl	800311e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_InitTick+0xc8>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e002      	b.n	8002282 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
 /* Return function status */
  return status;
 8002282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002286:	4618      	mov	r0, r3
 8002288:	3738      	adds	r7, #56	; 0x38
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	431bde83 	.word	0x431bde83
 8002294:	20002894 	.word	0x20002894
 8002298:	40014800 	.word	0x40014800
 800229c:	20000008 	.word	0x20000008

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
	...

080022cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <TIM17_IRQHandler+0x10>)
 80022d2:	f004 f8c5 	bl	8006460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20002894 	.word	0x20002894

080022e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <USART1_IRQHandler+0x10>)
 80022e6:	f004 fb83 	bl	80069f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200022c8 	.word	0x200022c8

080022f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <USART2_IRQHandler+0x10>)
 80022fa:	f004 fb79 	bl	80069f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20002598 	.word	0x20002598

08002308 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <SUBGHZ_Radio_IRQHandler+0x10>)
 800230e:	f003 fe5d 	bl	8005fcc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20001ff0 	.word	0x20001ff0

0800231c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <_sbrk+0x5c>)
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <_sbrk+0x60>)
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <_sbrk+0x64>)
 8002346:	4a12      	ldr	r2, [pc, #72]	; (8002390 <_sbrk+0x68>)
 8002348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d207      	bcs.n	8002368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002358:	f00c ff10 	bl	800f17c <__errno>
 800235c:	4603      	mov	r3, r0
 800235e:	220c      	movs	r2, #12
 8002360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002366:	e009      	b.n	800237c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <_sbrk+0x64>)
 8002378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20010000 	.word	0x20010000
 8002388:	00000400 	.word	0x00000400
 800238c:	200003c0 	.word	0x200003c0
 8002390:	200029c0 	.word	0x200029c0

08002394 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 80023d8:	79fb      	ldrb	r3, [r7, #7]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <TIMER_IF_SetTimerContext+0x10>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	200003c4 	.word	0x200003c4

080023f8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 80023fc:	4b02      	ldr	r3, [pc, #8]	; (8002408 <TIMER_IF_GetTimerContext+0x10>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	200003c4 	.word	0x200003c4

0800240c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002416:	687b      	ldr	r3, [r7, #4]
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002442:	687b      	ldr	r3, [r7, #4]
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
	...

08002480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002482:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002484:	f7ff ff86 	bl	8002394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <LoopForever+0x6>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <LoopForever+0xe>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <LoopForever+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024ae:	f00c fe6b 	bl	800f188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024b2:	f7fe fd85 	bl	8000fc0 <main>

080024b6 <LoopForever>:

LoopForever:
    b LoopForever
 80024b6:	e7fe      	b.n	80024b6 <LoopForever>
  ldr   r0, =_estack
 80024b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80024c4:	08010018 	.word	0x08010018
  ldr r2, =_sbss
 80024c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80024cc:	200029bc 	.word	0x200029bc

080024d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC_IRQHandler>
	...

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024de:	2003      	movs	r0, #3
 80024e0:	f000 fe12 	bl	8003108 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024e4:	f002 fe10 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_Init+0x3c>)
 80024ec:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ee:	200f      	movs	r0, #15
 80024f0:	f7ff fe70 	bl	80021d4 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	e001      	b.n	8002504 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002500:	f7ff fcd2 	bl	8001ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002504:	79fb      	ldrb	r3, [r7, #7]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000004 	.word	0x20000004

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x1c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_IncTick+0x20>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a03      	ldr	r2, [pc, #12]	; (8002534 <HAL_IncTick+0x20>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	2000000c 	.word	0x2000000c
 8002534:	200028e0 	.word	0x200028e0

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_GetTick+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	200028e0 	.word	0x200028e0

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fff0 	bl	8002538 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffe0 	bl	8002538 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2000000c 	.word	0x2000000c

08002594 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <HAL_GetUIDw0+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	1fff7590 	.word	0x1fff7590

080025a8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_GetUIDw1+0x10>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	1fff7594 	.word	0x1fff7594

080025bc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <HAL_GetUIDw2+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	1fff7598 	.word	0x1fff7598

080025d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2107      	movs	r1, #7
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	401a      	ands	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	431a      	orrs	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800265a:	f023 0317 	bic.w	r3, r3, #23
 800265e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002684:	d101      	bne.n	800268a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	f023 0317 	bic.w	r3, r3, #23
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	f023 0317 	bic.w	r3, r3, #23
 80026d0:	f043 0202 	orr.w	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <LL_ADC_IsEnabled+0x18>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_ADC_IsEnabled+0x1a>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d101      	bne.n	800271e <LL_ADC_IsDisableOngoing+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_IsDisableOngoing+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800273a:	f023 0317 	bic.w	r3, r3, #23
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002760:	f023 0317 	bic.w	r3, r3, #23
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b04      	cmp	r3, #4
 8002788:	d101      	bne.n	800278e <LL_ADC_REG_IsConversionOngoing+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
	...

0800279c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1ae      	b.n	8002b1c <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fb75 	bl	8001ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff43 	bl	8002670 <LL_ADC_IsInternalRegulatorEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d115      	bne.n	800281c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff28 	bl	800264a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fa:	4b9b      	ldr	r3, [pc, #620]	; (8002a68 <HAL_ADC_Init+0x2cc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	4a9a      	ldr	r2, [pc, #616]	; (8002a6c <HAL_ADC_Init+0x2d0>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	3301      	adds	r3, #1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800280e:	e002      	b.n	8002816 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	3b01      	subs	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f9      	bne.n	8002810 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff25 	bl	8002670 <LL_ADC_IsInternalRegulatorEnabled>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff92 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002852:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 8154 	bne.w	8002b0a <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 8150 	bne.w	8002b0a <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff2f 	bl	80026e2 <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d14f      	bne.n	800292a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f023 0118 	bic.w	r1, r3, #24
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d111      	bne.n	80028e2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80028ca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80028d0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80028d6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <HAL_ADC_Init+0x2d4>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80028fe:	d014      	beq.n	800292a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d00f      	beq.n	800292a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800290e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002912:	d00a      	beq.n	800292a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002914:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <HAL_ADC_Init+0x2d8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002924:	4953      	ldr	r1, [pc, #332]	; (8002a74 <HAL_ADC_Init+0x2d8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7e1b      	ldrb	r3, [r3, #24]
 800292e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7e5b      	ldrb	r3, [r3, #25]
 8002934:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002936:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7e9b      	ldrb	r3, [r3, #26]
 800293c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800293e:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002944:	2a00      	cmp	r2, #0
 8002946:	d002      	beq.n	800294e <HAL_ADC_Init+0x1b2>
 8002948:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800294c:	e000      	b.n	8002950 <HAL_ADC_Init+0x1b4>
 800294e:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002950:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002956:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da04      	bge.n	800296a <HAL_ADC_Init+0x1ce>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002968:	e001      	b.n	800296e <HAL_ADC_Init+0x1d2>
 800296a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 800296e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002976:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002978:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d114      	bne.n	80029b4 <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7e9b      	ldrb	r3, [r3, #26]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d104      	bne.n	800299c <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	e00b      	b.n	80029b4 <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80029c8:	4313      	orrs	r3, r2
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80029da:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_ADC_Init+0x2dc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	461a      	mov	r2, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	f7ff fdef 	bl	80025ea <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a14:	461a      	mov	r2, r3
 8002a16:	4919      	ldr	r1, [pc, #100]	; (8002a7c <HAL_ADC_Init+0x2e0>)
 8002a18:	f7ff fde7 	bl	80025ea <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f062 020f 	orn	r2, r2, #15
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
 8002a34:	e044      	b.n	8002ac0 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3e:	d13f      	bne.n	8002ac0 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e00c      	b.n	8002a60 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	d9ef      	bls.n	8002a46 <HAL_ADC_Init+0x2aa>
 8002a66:	e00c      	b.n	8002a82 <HAL_ADC_Init+0x2e6>
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	053e2d63 	.word	0x053e2d63
 8002a70:	1ffffc02 	.word	0x1ffffc02
 8002a74:	40012708 	.word	0x40012708
 8002a78:	dffffc02 	.word	0xdffffc02
 8002a7c:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002a80:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d108      	bne.n	8002a9a <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f062 020f 	orn	r2, r2, #15
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
 8002a98:	e012      	b.n	8002ac0 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	f06f 020f 	mvn.w	r2, #15
 8002ab0:	fa02 f103 	lsl.w	r1, r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_ADC_Init+0x388>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d10b      	bne.n	8002ae8 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ae6:	e018      	b.n	8002b1a <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f023 0312 	bic.w	r3, r3, #18
 8002af0:	f043 0210 	orr.w	r2, r3, #16
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b08:	e007      	b.n	8002b1a <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	833fffe7 	.word	0x833fffe7

08002b28 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fe1e 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d132      	bne.n	8002ba6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Start+0x26>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e02e      	b.n	8002bac <HAL_ADC_Start+0x84>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f946 	bl	8002de8 <ADC_Enable>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11a      	bne.n	8002b9c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	221c      	movs	r2, #28
 8002b86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fdc8 	bl	800272a <LL_ADC_REG_StartConversion>
 8002b9a:	e006      	b.n	8002baa <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ba4:	e001      	b.n	8002baa <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Stop+0x16>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e022      	b.n	8002c10 <HAL_ADC_Stop+0x5c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8c3 	bl	8002d5e <ADC_ConversionStop>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d111      	bne.n	8002c06 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f986 	bl	8002ef4 <ADC_Disable>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d102      	bne.n	8002c30 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e010      	b.n	8002c52 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d007      	beq.n	8002c4e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e077      	b.n	8002d3e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002c4e:	2304      	movs	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c52:	f7ff fc71 	bl	8002538 <HAL_GetTick>
 8002c56:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002c58:	e021      	b.n	8002c9e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c60:	d01d      	beq.n	8002c9e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c62:	f7ff fc69 	bl	8002538 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d302      	bcc.n	8002c78 <HAL_ADC_PollForConversion+0x60>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d112      	bne.n	8002c9e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f043 0204 	orr.w	r2, r3, #4
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04f      	b.n	8002d3e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0d6      	beq.n	8002c5a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fcb2 	bl	8002626 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d031      	beq.n	8002d2c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	7e9b      	ldrb	r3, [r3, #26]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12d      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d126      	bne.n	8002d2c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fd47 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d112      	bne.n	8002d14 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020c 	bic.w	r2, r2, #12
 8002cfc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	; 0x58
 8002d12:	e00b      	b.n	8002d2c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e1b      	ldrb	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	220c      	movs	r2, #12
 8002d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fd03 	bl	8002776 <LL_ADC_REG_IsConversionOngoing>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d033      	beq.n	8002dde <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fcc3 	bl	8002706 <LL_ADC_IsDisableOngoing>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff fce0 	bl	8002750 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d90:	f7ff fbd2 	bl	8002538 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002d96:	e01b      	b.n	8002dd0 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002d98:	f7ff fbce 	bl	8002538 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d914      	bls.n	8002dd0 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f043 0210 	orr.w	r2, r3, #16
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1dc      	bne.n	8002d98 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fc72 	bl	80026e2 <LL_ADC_IsEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d169      	bne.n	8002ed8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <ADC_Enable+0xfc>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e055      	b.n	8002eda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fc2f 	bl	8002696 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e38:	482b      	ldr	r0, [pc, #172]	; (8002ee8 <ADC_Enable+0x100>)
 8002e3a:	f7ff fbc9 	bl	80025d0 <LL_ADC_GetCommonPathInternalCh>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00f      	beq.n	8002e68 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e48:	4b28      	ldr	r3, [pc, #160]	; (8002eec <ADC_Enable+0x104>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	4a28      	ldr	r2, [pc, #160]	; (8002ef0 <ADC_Enable+0x108>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	3301      	adds	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e5a:	e002      	b.n	8002e62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f9      	bne.n	8002e5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7e5b      	ldrb	r3, [r3, #25]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d033      	beq.n	8002ed8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002e70:	f7ff fb62 	bl	8002538 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e76:	e028      	b.n	8002eca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fc30 	bl	80026e2 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d104      	bne.n	8002e92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fc02 	bl	8002696 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e92:	f7ff fb51 	bl	8002538 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d914      	bls.n	8002eca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d00d      	beq.n	8002eca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d1cf      	bne.n	8002e78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	80000017 	.word	0x80000017
 8002ee8:	40012708 	.word	0x40012708
 8002eec:	20000004 	.word	0x20000004
 8002ef0:	053e2d63 	.word	0x053e2d63

08002ef4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fc00 	bl	8002706 <LL_ADC_IsDisableOngoing>
 8002f06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fbe8 	bl	80026e2 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d047      	beq.n	8002fa8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d144      	bne.n	8002fa8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0305 	and.w	r3, r3, #5
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10c      	bne.n	8002f46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fbc3 	bl	80026bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f3e:	f7ff fafb 	bl	8002538 <HAL_GetTick>
 8002f42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f44:	e029      	b.n	8002f9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	f043 0210 	orr.w	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e023      	b.n	8002faa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f62:	f7ff fae9 	bl	8002538 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d914      	bls.n	8002f9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e007      	b.n	8002faa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1dc      	bne.n	8002f62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4906      	ldr	r1, [pc, #24]	; (800304c <__NVIC_EnableIRQ+0x34>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100

08003050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	6039      	str	r1, [r7, #0]
 800305a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db0a      	blt.n	800307a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2da      	uxtb	r2, r3
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <__NVIC_SetPriority+0x4c>)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	0112      	lsls	r2, r2, #4
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	440b      	add	r3, r1
 8003074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003078:	e00a      	b.n	8003090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4908      	ldr	r1, [pc, #32]	; (80030a0 <__NVIC_SetPriority+0x50>)
 8003080:	79fb      	ldrb	r3, [r7, #7]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	3b04      	subs	r3, #4
 8003088:	0112      	lsls	r2, r2, #4
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	440b      	add	r3, r1
 800308e:	761a      	strb	r2, [r3, #24]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	2b04      	cmp	r3, #4
 80030c0:	bf28      	it	cs
 80030c2:	2304      	movcs	r3, #4
 80030c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d902      	bls.n	80030d4 <NVIC_EncodePriority+0x30>
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3b03      	subs	r3, #3
 80030d2:	e000      	b.n	80030d6 <NVIC_EncodePriority+0x32>
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43da      	mvns	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	401a      	ands	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	4313      	orrs	r3, r2
         );
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3724      	adds	r7, #36	; 0x24
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff ff4f 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	4603      	mov	r3, r0
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800312c:	f7ff ff66 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 8003130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	6978      	ldr	r0, [r7, #20]
 8003138:	f7ff ffb4 	bl	80030a4 <NVIC_EncodePriority>
 800313c:	4602      	mov	r2, r0
 800313e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff83 	bl	8003050 <__NVIC_SetPriority>
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff59 	bl	8003018 <__NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e04f      	b.n	8003220 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d008      	beq.n	800319e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e040      	b.n	8003220 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020e 	bic.w	r2, r2, #14
 80031ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f003 021c 	and.w	r2, r3, #28
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2101      	movs	r1, #1
 80031dc:	fa01 f202 	lsl.w	r2, r1, r2
 80031e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00c      	beq.n	800320e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003202:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800320c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d005      	beq.n	800324e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e047      	b.n	80032de <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 020e 	bic.w	r2, r2, #14
 800325c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f003 021c 	and.w	r2, r3, #28
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f202 	lsl.w	r2, r1, r2
 8003290:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800329a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
    }
  }
  return status;
 80032de:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f6:	e140      	b.n	800357a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2101      	movs	r1, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8132 	beq.w	8003574 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d005      	beq.n	8003328 <HAL_GPIO_Init+0x40>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d130      	bne.n	800338a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	2203      	movs	r2, #3
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335e:	2201      	movs	r2, #1
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0201 	and.w	r2, r3, #1
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b03      	cmp	r3, #3
 8003394:	d017      	beq.n	80033c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d123      	bne.n	800341a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	08da      	lsrs	r2, r3, #3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3208      	adds	r2, #8
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	6939      	ldr	r1, [r7, #16]
 8003416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0203 	and.w	r2, r3, #3
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 808c 	beq.w	8003574 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800345c:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	2207      	movs	r2, #7
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003486:	d00d      	beq.n	80034a4 <HAL_GPIO_Init+0x1bc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a44      	ldr	r2, [pc, #272]	; (800359c <HAL_GPIO_Init+0x2b4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x1b8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a43      	ldr	r2, [pc, #268]	; (80035a0 <HAL_GPIO_Init+0x2b8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_GPIO_Init+0x1b4>
 8003498:	2302      	movs	r3, #2
 800349a:	e004      	b.n	80034a6 <HAL_GPIO_Init+0x1be>
 800349c:	2307      	movs	r3, #7
 800349e:	e002      	b.n	80034a6 <HAL_GPIO_Init+0x1be>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_GPIO_Init+0x1be>
 80034a4:	2300      	movs	r3, #0
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b6:	4938      	ldr	r1, [pc, #224]	; (8003598 <HAL_GPIO_Init+0x2b0>)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80034ea:	4a2e      	ldr	r2, [pc, #184]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 80034f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003544:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_GPIO_Init+0x2bc>)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	3301      	adds	r3, #1
 8003578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f aeb7 	bne.w	80032f8 <HAL_GPIO_Init+0x10>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40010000 	.word	0x40010000
 800359c:	48000400 	.word	0x48000400
 80035a0:	48000800 	.word	0x48000800
 80035a4:	58000800 	.word	0x58000800

080035a8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	73fb      	strb	r3, [r7, #15]
 80035c4:	e001      	b.n	80035ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	807b      	strh	r3, [r7, #2]
 80035e2:	4613      	mov	r3, r2
 80035e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e6:	787b      	ldrb	r3, [r7, #1]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035ec:	887a      	ldrh	r2, [r7, #2]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f2:	e002      	b.n	80035fa <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035f4:	887a      	ldrh	r2, [r7, #2]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43d9      	mvns	r1, r3
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	400b      	ands	r3, r1
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e081      	b.n	800374c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe fc6b 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2224      	movs	r2, #36	; 0x24
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003686:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003696:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d107      	bne.n	80036b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d104      	bne.n	80036d0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69d9      	ldr	r1, [r3, #28]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	460b      	mov	r3, r1
 8003762:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	f040 80f1 	bne.w	8003958 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003784:	d101      	bne.n	800378a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	e0e7      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_I2C_IsDeviceReady+0x44>
 8003794:	2302      	movs	r3, #2
 8003796:	e0e0      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_I2C_IsDeviceReady+0x72>
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037c4:	e004      	b.n	80037d0 <HAL_I2C_IsDeviceReady+0x7c>
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037cc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe feaf 	bl	8002538 <HAL_GetTick>
 80037da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003808:	e034      	b.n	8003874 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003810:	d01a      	beq.n	8003848 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fe fe91 	bl	8002538 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <HAL_I2C_IsDeviceReady+0xd4>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e088      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003874:	7ffb      	ldrb	r3, [r7, #31]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_I2C_IsDeviceReady+0x12c>
 800387a:	7fbb      	ldrb	r3, [r7, #30]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0c4      	beq.n	800380a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d01a      	beq.n	80038c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	2120      	movs	r1, #32
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f862 	bl	8003962 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e058      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e04a      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2120      	movs	r1, #32
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f847 	bl	8003962 <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e03d      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2220      	movs	r2, #32
 80038ec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d118      	bne.n	8003928 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003904:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	2120      	movs	r1, #32
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f826 	bl	8003962 <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e01c      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3301      	adds	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	f63f af3b 	bhi.w	80037ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003972:	e022      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397a:	d01e      	beq.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397c:	f7fe fddc 	bl	8002538 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d302      	bcc.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x30>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d0cd      	beq.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d138      	bne.n	8003a6a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e032      	b.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a34:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e000      	b.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
  }
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b085      	sub	sp, #20
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d139      	bne.n	8003b00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e033      	b.n	8003b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e000      	b.n	8003b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <LL_RCC_SetLPTIMClockSource>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <LL_RCC_GetLPTIMClockSource>:
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4013      	ands	r3, r2
 8003b52:	0c1a      	lsrs	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <LL_APB1_GRP1_ForceReset>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <LL_APB1_GRP2_ForceReset>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <LL_APB1_GRP1_ReleaseReset>:
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <LL_APB1_GRP2_ReleaseReset>:
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be0:	4013      	ands	r3, r2
 8003be2:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0b6      	b.n	8003d70 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fe f9d1 	bl	8001fc4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c42:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8003c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8a2 	bl	8003d9c <LPTIM_WaitForFlag>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d101      	bne.n	8003c62 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e086      	b.n	8003d70 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8ca 	bl	8003dfc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f889 	bl	8003d80 <HAL_LPTIM_GetState>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d101      	bne.n	8003c78 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e07b      	b.n	8003d70 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d004      	beq.n	8003c92 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c90:	d103      	bne.n	8003c9a <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 031e 	bic.w	r3, r3, #30
 8003c98:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d005      	beq.n	8003cb2 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003cac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_LPTIM_Init+0x188>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cc2:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003cc8:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003cce:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003cd4:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003cec:	4313      	orrs	r3, r2
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d004      	beq.n	8003d06 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d04:	d107      	bne.n	8003d16 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00a      	beq.n	8003d38 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d2a:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003d30:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_LPTIM_Init+0x18c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d108      	bne.n	8003d5c <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e004      	b.n	8003d66 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d64:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	ff19f1fe 	.word	0xff19f1fe
 8003d7c:	40007c00 	.word	0x40007c00

08003d80 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d8e:	b2db      	uxtb	r3, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
	...

08003d9c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <LPTIM_WaitForFlag+0x58>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <LPTIM_WaitForFlag+0x5c>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	0b9b      	lsrs	r3, r3, #14
 8003db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d002      	beq.n	8003de6 <LPTIM_WaitForFlag+0x4a>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ec      	bne.n	8003dc0 <LPTIM_WaitForFlag+0x24>

  return result;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000004 	.word	0x20000004
 8003df8:	d1b71759 	.word	0xd1b71759

08003dfc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003e08:	b672      	cpsid	i
}
 8003e0a:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8d      	ldr	r2, [pc, #564]	; (8004048 <LPTIM_Disable+0x24c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d015      	beq.n	8003e42 <LPTIM_Disable+0x46>
 8003e16:	4a8c      	ldr	r2, [pc, #560]	; (8004048 <LPTIM_Disable+0x24c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d818      	bhi.n	8003e4e <LPTIM_Disable+0x52>
 8003e1c:	4a8b      	ldr	r2, [pc, #556]	; (800404c <LPTIM_Disable+0x250>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <LPTIM_Disable+0x2e>
 8003e22:	4a8b      	ldr	r2, [pc, #556]	; (8004050 <LPTIM_Disable+0x254>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d006      	beq.n	8003e36 <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8003e28:	e011      	b.n	8003e4e <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003e2a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003e2e:	f7ff fe86 	bl	8003b3e <LL_RCC_GetLPTIMClockSource>
 8003e32:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003e34:	e00c      	b.n	8003e50 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003e36:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003e3a:	f7ff fe80 	bl	8003b3e <LL_RCC_GetLPTIMClockSource>
 8003e3e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003e40:	e006      	b.n	8003e50 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8003e42:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8003e46:	f7ff fe7a 	bl	8003b3e <LL_RCC_GetLPTIMClockSource>
 8003e4a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003e4c:	e000      	b.n	8003e50 <LPTIM_Disable+0x54>
      break;
 8003e4e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a70      	ldr	r2, [pc, #448]	; (8004048 <LPTIM_Disable+0x24c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d019      	beq.n	8003ebe <LPTIM_Disable+0xc2>
 8003e8a:	4a6f      	ldr	r2, [pc, #444]	; (8004048 <LPTIM_Disable+0x24c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d81d      	bhi.n	8003ecc <LPTIM_Disable+0xd0>
 8003e90:	4a6e      	ldr	r2, [pc, #440]	; (800404c <LPTIM_Disable+0x250>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <LPTIM_Disable+0xa2>
 8003e96:	4a6e      	ldr	r2, [pc, #440]	; (8004050 <LPTIM_Disable+0x254>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8003e9c:	e016      	b.n	8003ecc <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003e9e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003ea2:	f7ff fe5e 	bl	8003b62 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003ea6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003eaa:	f7ff fe7c 	bl	8003ba6 <LL_APB1_GRP1_ReleaseReset>
      break;
 8003eae:	e00e      	b.n	8003ece <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003eb0:	2020      	movs	r0, #32
 8003eb2:	f7ff fe67 	bl	8003b84 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003eb6:	2020      	movs	r0, #32
 8003eb8:	f7ff fe87 	bl	8003bca <LL_APB1_GRP2_ReleaseReset>
      break;
 8003ebc:	e007      	b.n	8003ece <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8003ebe:	2040      	movs	r0, #64	; 0x40
 8003ec0:	f7ff fe60 	bl	8003b84 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8003ec4:	2040      	movs	r0, #64	; 0x40
 8003ec6:	f7ff fe80 	bl	8003bca <LL_APB1_GRP2_ReleaseReset>
      break;
 8003eca:	e000      	b.n	8003ece <LPTIM_Disable+0xd2>
      break;
 8003ecc:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <LPTIM_Disable+0xe6>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <LPTIM_Disable+0xe6>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8096 	beq.w	800400e <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a58      	ldr	r2, [pc, #352]	; (8004048 <LPTIM_Disable+0x24c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <LPTIM_Disable+0x118>
 8003eec:	4a56      	ldr	r2, [pc, #344]	; (8004048 <LPTIM_Disable+0x24c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d815      	bhi.n	8003f1e <LPTIM_Disable+0x122>
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <LPTIM_Disable+0x250>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <LPTIM_Disable+0x104>
 8003ef8:	4a55      	ldr	r2, [pc, #340]	; (8004050 <LPTIM_Disable+0x254>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d005      	beq.n	8003f0a <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8003efe:	e00e      	b.n	8003f1e <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003f00:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003f04:	f7ff fe02 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 8003f08:	e00a      	b.n	8003f20 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003f0a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003f0e:	f7ff fdfd 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 8003f12:	e005      	b.n	8003f20 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8003f14:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8003f18:	f7ff fdf8 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 8003f1c:	e000      	b.n	8003f20 <LPTIM_Disable+0x124>
        break;
 8003f1e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01a      	beq.n	8003f5c <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003f3e:	2108      	movs	r1, #8
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff2b 	bl	8003d9c <LPTIM_WaitForFlag>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d103      	bne.n	8003f54 <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01a      	beq.n	8003f98 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003f7a:	2110      	movs	r1, #16
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff0d 	bl	8003d9c <LPTIM_WaitForFlag>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	d103      	bne.n	8003f90 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2210      	movs	r2, #16
 8003f96:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01c      	beq.n	8003fd8 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8003fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff feee 	bl	8003d9c <LPTIM_WaitForFlag>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d103      	bne.n	8003fce <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd6:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <LPTIM_Disable+0x24c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d011      	beq.n	8004006 <LPTIM_Disable+0x20a>
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <LPTIM_Disable+0x24c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d814      	bhi.n	8004012 <LPTIM_Disable+0x216>
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <LPTIM_Disable+0x250>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <LPTIM_Disable+0x1fa>
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <LPTIM_Disable+0x254>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8003ff4:	e00d      	b.n	8004012 <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff8:	f7ff fd88 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 8003ffc:	e00a      	b.n	8004014 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004000:	f7ff fd84 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 8004004:	e006      	b.n	8004014 <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004008:	f7ff fd80 	bl	8003b0c <LL_RCC_SetLPTIMClockSource>
        break;
 800400c:	e002      	b.n	8004014 <LPTIM_Disable+0x218>
    }
  }
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <LPTIM_Disable+0x218>
        break;
 8004012:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 800403c:	b662      	cpsie	i
}
 800403e:	bf00      	nop

  __enable_irq();
}
 8004040:	bf00      	nop
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40009800 	.word	0x40009800
 800404c:	40007c00 	.word	0x40007c00
 8004050:	40009400 	.word	0x40009400

08004054 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_PWR_EnableBkUpAccess+0x18>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a03      	ldr	r2, [pc, #12]	; (800406c <HAL_PWR_EnableBkUpAccess+0x18>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	58000400 	.word	0x58000400

08004070 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_PWREx_GetVoltageRange+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	58000400 	.word	0x58000400

08004088 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004098:	d101      	bne.n	800409e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	58000400 	.word	0x58000400

080040ac <LL_RCC_HSE_EnableTcxo>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <LL_RCC_HSE_DisableTcxo>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f6:	d101      	bne.n	80040fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <LL_RCC_HSE_Enable>:
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6013      	str	r3, [r2, #0]
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <LL_RCC_HSE_Disable>:
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <LL_RCC_HSE_IsReady>:
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004150:	d101      	bne.n	8004156 <LL_RCC_HSE_IsReady+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_HSE_IsReady+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_RCC_HSI_Enable>:
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <LL_RCC_HSI_Disable>:
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418e:	6013      	str	r3, [r2, #0]
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <LL_RCC_HSI_IsReady>:
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d101      	bne.n	80041b0 <LL_RCC_HSI_IsReady+0x18>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LL_RCC_HSI_IsReady+0x1a>
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	061b      	lsls	r3, r3, #24
 80041d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr

080041e2 <LL_RCC_LSE_IsReady>:
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d101      	bne.n	80041fa <LL_RCC_LSE_IsReady+0x18>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <LL_RCC_LSE_IsReady+0x1a>
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <LL_RCC_LSI_Enable>:
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <LL_RCC_LSI_Disable>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_RCC_LSI_IsReady>:
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d101      	bne.n	800425c <LL_RCC_LSI_IsReady+0x18>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <LL_RCC_LSI_IsReady+0x1a>
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <LL_RCC_MSI_Enable>:
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <LL_RCC_MSI_Disable>:
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <LL_RCC_MSI_IsReady>:
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d101      	bne.n	80042b4 <LL_RCC_MSI_IsReady+0x16>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <LL_RCC_MSI_IsReady+0x18>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80042c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d101      	bne.n	80042d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_RCC_MSI_GetRange>:
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004300:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <LL_RCC_MSI_SetCalibTrimming>:
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <LL_RCC_SetSysClkSource>:
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <LL_RCC_GetSysClkSource>:
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 030c 	and.w	r3, r3, #12
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <LL_RCC_SetAHBPrescaler>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_SetAHB3Prescaler>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043d0:	f023 020f 	bic.w	r2, r3, #15
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_SetAPB1Prescaler>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <LL_RCC_SetAPB2Prescaler>:
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <LL_RCC_GetAHBPrescaler>:
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_C2_RCC_GetAHBPrescaler>:
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800445a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <LL_RCC_GetAHB3Prescaler>:
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <LL_RCC_GetAPB1Prescaler>:
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <LL_RCC_GetAPB2Prescaler>:
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044be:	6013      	str	r3, [r2, #0]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044f6:	d101      	bne.n	80044fc <LL_RCC_PLL_IsReady+0x18>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <LL_RCC_PLL_IsReady+0x1a>
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr

08004506 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004506:	b480      	push	{r7}
 8004508:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800450a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0303 	and.w	r3, r3, #3
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004572:	d101      	bne.n	8004578 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004596:	d101      	bne.n	800459c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ba:	d101      	bne.n	80045c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045dc:	d101      	bne.n	80045e2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045fe:	d101      	bne.n	8004604 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e38a      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004622:	f7ff fe9a 	bl	800435a <LL_RCC_GetSysClkSource>
 8004626:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	f7ff ff8f 	bl	800454a <LL_RCC_PLL_GetMainSource>
 800462c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80c9 	beq.w	80047ce <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_RCC_OscConfig+0x3e>
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b0c      	cmp	r3, #12
 8004646:	d17b      	bne.n	8004740 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d178      	bne.n	8004740 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800464e:	f7ff fe26 	bl	800429e <LL_RCC_MSI_IsReady>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_RCC_OscConfig+0x54>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e369      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <HAL_RCC_OscConfig+0x72>
 8004676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	e006      	b.n	8004690 <HAL_RCC_OscConfig+0x80>
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004690:	4293      	cmp	r3, r2
 8004692:	d222      	bcs.n	80046da <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fdab 	bl	80051f4 <RCC_SetFlashLatencyFromMSIRange>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e347      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fe1a 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>
 80046d8:	e021      	b.n	800471e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e4:	f043 0308 	orr.w	r3, r3, #8
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fe01 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd70 	bl	80051f4 <RCC_SetFlashLatencyFromMSIRange>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e30c      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800471e:	f000 fcf3 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8004722:	4603      	mov	r3, r0
 8004724:	4ab4      	ldr	r2, [pc, #720]	; (80049f8 <HAL_RCC_OscConfig+0x3e8>)
 8004726:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004728:	4bb4      	ldr	r3, [pc, #720]	; (80049fc <HAL_RCC_OscConfig+0x3ec>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fd fd51 	bl	80021d4 <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d047      	beq.n	80047cc <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	e2fb      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d02c      	beq.n	80047a2 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004748:	f7ff fd8d 	bl	8004266 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800474c:	f7fd fef4 	bl	8002538 <HAL_GetTick>
 8004750:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004754:	f7fd fef0 	bl	8002538 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e2e8      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004766:	f7ff fd9a 	bl	800429e <LL_RCC_MSI_IsReady>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f1      	beq.n	8004754 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	f043 0308 	orr.w	r3, r3, #8
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004792:	4313      	orrs	r3, r2
 8004794:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fdb6 	bl	800430c <LL_RCC_MSI_SetCalibTrimming>
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047a2:	f7ff fd6e 	bl	8004282 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047a6:	f7fd fec7 	bl	8002538 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ae:	f7fd fec3 	bl	8002538 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e2bb      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80047c0:	f7ff fd6d 	bl	800429e <LL_RCC_MSI_IsReady>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f1      	bne.n	80047ae <HAL_RCC_OscConfig+0x19e>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d05f      	beq.n	800489a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d005      	beq.n	80047ec <HAL_RCC_OscConfig+0x1dc>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d10d      	bne.n	8004802 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d10a      	bne.n	8004802 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	f7ff fca7 	bl	800413e <LL_RCC_HSE_IsReady>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d050      	beq.n	8004898 <HAL_RCC_OscConfig+0x288>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d14c      	bne.n	8004898 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e29a      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004814:	4313      	orrs	r3, r2
 8004816:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d102      	bne.n	8004828 <HAL_RCC_OscConfig+0x218>
 8004822:	f7ff fc70 	bl	8004106 <LL_RCC_HSE_Enable>
 8004826:	e00d      	b.n	8004844 <HAL_RCC_OscConfig+0x234>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004830:	d104      	bne.n	800483c <HAL_RCC_OscConfig+0x22c>
 8004832:	f7ff fc3b 	bl	80040ac <LL_RCC_HSE_EnableTcxo>
 8004836:	f7ff fc66 	bl	8004106 <LL_RCC_HSE_Enable>
 800483a:	e003      	b.n	8004844 <HAL_RCC_OscConfig+0x234>
 800483c:	f7ff fc71 	bl	8004122 <LL_RCC_HSE_Disable>
 8004840:	f7ff fc42 	bl	80040c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fe74 	bl	8002538 <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004854:	f7fd fe70 	bl	8002538 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	; 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e268      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004866:	f7ff fc6a 	bl	800413e <LL_RCC_HSE_IsReady>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f1      	beq.n	8004854 <HAL_RCC_OscConfig+0x244>
 8004870:	e013      	b.n	800489a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fd fe61 	bl	8002538 <HAL_GetTick>
 8004876:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487a:	f7fd fe5d 	bl	8002538 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e255      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 800488c:	f7ff fc57 	bl	800413e <LL_RCC_HSE_IsReady>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f1      	bne.n	800487a <HAL_RCC_OscConfig+0x26a>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d04b      	beq.n	800493e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_OscConfig+0x2a8>
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	d113      	bne.n	80048da <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d110      	bne.n	80048da <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048b8:	f7ff fc6e 	bl	8004198 <LL_RCC_HSI_IsReady>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x2be>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e234      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fc71 	bl	80041ba <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	e031      	b.n	800493e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048e2:	f7ff fc3d 	bl	8004160 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fd fe27 	bl	8002538 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ee:	f7fd fe23 	bl	8002538 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e21b      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004900:	f7ff fc4a 	bl	8004198 <LL_RCC_HSI_IsReady>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f1      	beq.n	80048ee <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fc53 	bl	80041ba <LL_RCC_HSI_SetCalibTrimming>
 8004914:	e013      	b.n	800493e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004916:	f7ff fc31 	bl	800417c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd fe0d 	bl	8002538 <HAL_GetTick>
 800491e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004922:	f7fd fe09 	bl	8002538 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e201      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004934:	f7ff fc30 	bl	8004198 <LL_RCC_HSI_IsReady>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f1      	bne.n	8004922 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d06e      	beq.n	8004a28 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d056      	beq.n	8004a00 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69da      	ldr	r2, [r3, #28]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	429a      	cmp	r2, r3
 8004968:	d031      	beq.n	80049ce <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d006      	beq.n	8004982 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e1da      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800498c:	f7ff fc4a 	bl	8004224 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004990:	f7fd fdd2 	bl	8002538 <HAL_GetTick>
 8004994:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004998:	f7fd fdce 	bl	8002538 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b11      	cmp	r3, #17
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1c6      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80049aa:	f7ff fc4b 	bl	8004244 <LL_RCC_LSI_IsReady>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f1      	bne.n	8004998 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049bc:	f023 0210 	bic.w	r2, r3, #16
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ce:	f7ff fc19 	bl	8004204 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d2:	f7fd fdb1 	bl	8002538 <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049da:	f7fd fdad 	bl	8002538 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b11      	cmp	r3, #17
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1a5      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80049ec:	f7ff fc2a 	bl	8004244 <LL_RCC_LSI_IsReady>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f1      	beq.n	80049da <HAL_RCC_OscConfig+0x3ca>
 80049f6:	e017      	b.n	8004a28 <HAL_RCC_OscConfig+0x418>
 80049f8:	20000004 	.word	0x20000004
 80049fc:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a00:	f7ff fc10 	bl	8004224 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fd98 	bl	8002538 <HAL_GetTick>
 8004a08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fd fd94 	bl	8002538 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b11      	cmp	r3, #17
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e18c      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004a1e:	f7ff fc11 	bl	8004244 <LL_RCC_LSI_IsReady>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f1      	bne.n	8004a0c <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80d8 	beq.w	8004be6 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004a36:	f7ff fb27 	bl	8004088 <LL_PWR_IsEnabledBkUpAccess>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d113      	bne.n	8004a68 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a40:	f7ff fb08 	bl	8004054 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a44:	f7fd fd78 	bl	8002538 <HAL_GetTick>
 8004a48:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4c:	f7fd fd74 	bl	8002538 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e16c      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004a5e:	f7ff fb13 	bl	8004088 <LL_PWR_IsEnabledBkUpAccess>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f1      	beq.n	8004a4c <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d07b      	beq.n	8004b68 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	2b85      	cmp	r3, #133	; 0x85
 8004a76:	d003      	beq.n	8004a80 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d109      	bne.n	8004a94 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a94:	f7fd fd50 	bl	8002538 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fd fd42 	bl	8002538 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e138      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ac6:	f7ff fb8c 	bl	80041e2 <LL_RCC_LSE_IsReady>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b81      	cmp	r3, #129	; 0x81
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b85      	cmp	r3, #133	; 0x85
 8004ade:	d121      	bne.n	8004b24 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fd2a 	bl	8002538 <HAL_GetTick>
 8004ae4:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd fd1c 	bl	8002538 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e112      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0ec      	beq.n	8004afc <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b22:	e060      	b.n	8004be6 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fd08 	bl	8002538 <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b40:	f7fd fcfa 	bl	8002538 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0f0      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ec      	bne.n	8004b40 <HAL_RCC_OscConfig+0x530>
 8004b66:	e03e      	b.n	8004be6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fce6 	bl	8002538 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fd fcd8 	bl	8002538 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e0ce      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1ec      	bne.n	8004b84 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd fcc5 	bl	8002538 <HAL_GetTick>
 8004bae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fd fcb7 	bl	8002538 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0ad      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004bdc:	f7ff fb01 	bl	80041e2 <LL_RCC_LSE_IsReady>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ef      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80a3 	beq.w	8004d36 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d076      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d14b      	bne.n	8004c96 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	f7ff fc63 	bl	80044c8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fd fc99 	bl	8002538 <HAL_GetTick>
 8004c06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fd fc95 	bl	8002538 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b0a      	cmp	r3, #10
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e08d      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c1c:	f7ff fc62 	bl	80044e4 <LL_RCC_PLL_IsReady>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f1      	bne.n	8004c0a <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	4b44      	ldr	r3, [pc, #272]	; (8004d40 <HAL_RCC_OscConfig+0x730>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3e:	0212      	lsls	r2, r2, #8
 8004c40:	4311      	orrs	r1, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c46:	4311      	orrs	r1, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c4c:	4311      	orrs	r1, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c52:	430a      	orrs	r2, r1
 8004c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5c:	f7ff fc26 	bl	80044ac <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fd fc62 	bl	8002538 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fd fc5e 	bl	8002538 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b0a      	cmp	r3, #10
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e056      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004c8a:	f7ff fc2b 	bl	80044e4 <LL_RCC_PLL_IsReady>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f1      	beq.n	8004c78 <HAL_RCC_OscConfig+0x668>
 8004c94:	e04f      	b.n	8004d36 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	f7ff fc17 	bl	80044c8 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fd fc3b 	bl	8002538 <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fd fc37 	bl	8002538 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b0a      	cmp	r3, #10
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e02f      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cd8:	f7ff fc04 	bl	80044e4 <LL_RCC_PLL_IsReady>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f1      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x6b6>
 8004ce2:	e028      	b.n	8004d36 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e023      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0203 	and.w	r2, r3, #3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d115      	bne.n	8004d32 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d10e      	bne.n	8004d32 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d001      	beq.n	8004d36 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	11c1808c 	.word	0x11c1808c

08004d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e12c      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b98      	ldr	r3, [pc, #608]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d91b      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b95      	ldr	r3, [pc, #596]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 0207 	bic.w	r2, r3, #7
 8004d6e:	4993      	ldr	r1, [pc, #588]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fd fbdf 	bl	8002538 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d7e:	f7fd fbdb 	bl	8002538 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e110      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d90:	4b8a      	ldr	r3, [pc, #552]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d1ef      	bne.n	8004d7e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fade 	bl	8004370 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004db4:	f7fd fbc0 	bl	8002538 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dbc:	f7fd fbbc 	bl	8002538 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e0f1      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004dce:	f7ff fbc7 	bl	8004560 <LL_RCC_IsActiveFlag_HPRE>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f1      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d016      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fad4 	bl	8004396 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dee:	f7fd fba3 	bl	8002538 <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004df6:	f7fd fb9f 	bl	8002538 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0d4      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e08:	f7ff fbbb 	bl	8004582 <LL_RCC_IsActiveFlag_C2HPRE>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f1      	beq.n	8004df6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff facc 	bl	80043c0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e28:	f7fd fb86 	bl	8002538 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e30:	f7fd fb82 	bl	8002538 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0b7      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004e42:	f7ff fbb0 	bl	80045a6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f1      	beq.n	8004e30 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d016      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fac5 	bl	80043ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e62:	f7fd fb69 	bl	8002538 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e6a:	f7fd fb65 	bl	8002538 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e09a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e7c:	f7ff fba5 	bl	80045ca <LL_RCC_IsActiveFlag_PPRE1>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f1      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d017      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff faba 	bl	8004412 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fb4b 	bl	8002538 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ea6:	f7fd fb47 	bl	8002538 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e07c      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004eb8:	f7ff fb98 	bl	80045ec <LL_RCC_IsActiveFlag_PPRE2>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f1      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d043      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004ed6:	f7ff f932 	bl	800413e <LL_RCC_HSE_IsReady>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d11e      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e066      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d106      	bne.n	8004efa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004eec:	f7ff fafa 	bl	80044e4 <LL_RCC_PLL_IsReady>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d113      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e05b      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f02:	f7ff f9cc 	bl	800429e <LL_RCC_MSI_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e050      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f10:	f7ff f942 	bl	8004198 <LL_RCC_HSI_IsReady>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e049      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fa06 	bl	8004334 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fd fb06 	bl	8002538 <HAL_GetTick>
 8004f2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f30:	f7fd fb02 	bl	8002538 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e035      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	f7ff fa08 	bl	800435a <LL_RCC_GetSysClkSource>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d1ec      	bne.n	8004f30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d21b      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 0207 	bic.w	r2, r3, #7
 8004f6c:	4913      	ldr	r1, [pc, #76]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f74:	f7fd fae0 	bl	8002538 <HAL_GetTick>
 8004f78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f7c:	f7fd fadc 	bl	8002538 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e011      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_ClockConfig+0x278>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1ef      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f9c:	f000 f8b4 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4a07      	ldr	r2, [pc, #28]	; (8004fc0 <HAL_RCC_ClockConfig+0x27c>)
 8004fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fa6:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <HAL_RCC_ClockConfig+0x280>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd f912 	bl	80021d4 <HAL_InitTick>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58004000 	.word	0x58004000
 8004fc0:	20000004 	.word	0x20000004
 8004fc4:	20000008 	.word	0x20000008

08004fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd6:	f7ff f9c0 	bl	800435a <LL_RCC_GetSysClkSource>
 8004fda:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fdc:	f7ff fab5 	bl	800454a <LL_RCC_PLL_GetMainSource>
 8004fe0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x2c>
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d139      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d136      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004ff4:	f7ff f963 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d115      	bne.n	800502a <HAL_RCC_GetSysClockFreq+0x62>
 8004ffe:	f7ff f95e 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d106      	bne.n	8005016 <HAL_RCC_GetSysClockFreq+0x4e>
 8005008:	f7ff f969 	bl	80042de <LL_RCC_MSI_GetRange>
 800500c:	4603      	mov	r3, r0
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	e005      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x5a>
 8005016:	f7ff f96d 	bl	80042f4 <LL_RCC_MSI_GetRangeAfterStandby>
 800501a:	4603      	mov	r3, r0
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	4a36      	ldr	r2, [pc, #216]	; (80050fc <HAL_RCC_GetSysClockFreq+0x134>)
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	e014      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x8c>
 800502a:	f7ff f948 	bl	80042be <LL_RCC_MSI_IsEnabledRangeSelect>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d106      	bne.n	8005042 <HAL_RCC_GetSysClockFreq+0x7a>
 8005034:	f7ff f953 	bl	80042de <LL_RCC_MSI_GetRange>
 8005038:	4603      	mov	r3, r0
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	e005      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x86>
 8005042:	f7ff f957 	bl	80042f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8005046:	4603      	mov	r3, r0
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	4a2b      	ldr	r2, [pc, #172]	; (80050fc <HAL_RCC_GetSysClockFreq+0x134>)
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d115      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005060:	e012      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d102      	bne.n	800506e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <HAL_RCC_GetSysClockFreq+0x138>)
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e00c      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d109      	bne.n	8005088 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005074:	f7ff f836 	bl	80040e4 <LL_RCC_HSE_IsEnabledDiv2>
 8005078:	4603      	mov	r3, r0
 800507a:	2b01      	cmp	r3, #1
 800507c:	d102      	bne.n	8005084 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <HAL_RCC_GetSysClockFreq+0x138>)
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e001      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005086:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005088:	f7ff f967 	bl	800435a <LL_RCC_GetSysClkSource>
 800508c:	4603      	mov	r3, r0
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d12f      	bne.n	80050f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005092:	f7ff fa5a 	bl	800454a <LL_RCC_PLL_GetMainSource>
 8005096:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d003      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0xde>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0xe4>
 80050a4:	e00d      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_RCC_GetSysClockFreq+0x138>)
 80050a8:	60fb      	str	r3, [r7, #12]
        break;
 80050aa:	e00d      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050ac:	f7ff f81a 	bl	80040e4 <LL_RCC_HSE_IsEnabledDiv2>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d102      	bne.n	80050bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCC_GetSysClockFreq+0x138>)
 80050b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80050ba:	e005      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_RCC_GetSysClockFreq+0x13c>)
 80050be:	60fb      	str	r3, [r7, #12]
        break;
 80050c0:	e002      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	60fb      	str	r3, [r7, #12]
        break;
 80050c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80050c8:	f7ff fa1d 	bl	8004506 <LL_RCC_PLL_GetN>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	fb03 f402 	mul.w	r4, r3, r2
 80050d4:	f7ff fa2e 	bl	8004534 <LL_RCC_PLL_GetDivider>
 80050d8:	4603      	mov	r3, r0
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	3301      	adds	r3, #1
 80050de:	fbb4 f4f3 	udiv	r4, r4, r3
 80050e2:	f7ff fa1c 	bl	800451e <LL_RCC_PLL_GetR>
 80050e6:	4603      	mov	r3, r0
 80050e8:	0f5b      	lsrs	r3, r3, #29
 80050ea:	3301      	adds	r3, #1
 80050ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80050f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd90      	pop	{r4, r7, pc}
 80050fc:	0800fda8 	.word	0x0800fda8
 8005100:	00f42400 	.word	0x00f42400
 8005104:	01e84800 	.word	0x01e84800

08005108 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005108:	b598      	push	{r3, r4, r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800510c:	f7ff ff5c 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8005110:	4604      	mov	r4, r0
 8005112:	f7ff f991 	bl	8004438 <LL_RCC_GetAHBPrescaler>
 8005116:	4603      	mov	r3, r0
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	4a03      	ldr	r2, [pc, #12]	; (800512c <HAL_RCC_GetHCLKFreq+0x24>)
 8005120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005124:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd98      	pop	{r3, r4, r7, pc}
 800512c:	0800fd48 	.word	0x0800fd48

08005130 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005130:	b598      	push	{r3, r4, r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005134:	f7ff ffe8 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005138:	4604      	mov	r4, r0
 800513a:	f7ff f9a1 	bl	8004480 <LL_RCC_GetAPB1Prescaler>
 800513e:	4603      	mov	r3, r0
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005148:	fa24 f303 	lsr.w	r3, r4, r3
}
 800514c:	4618      	mov	r0, r3
 800514e:	bd98      	pop	{r3, r4, r7, pc}
 8005150:	0800fd88 	.word	0x0800fd88

08005154 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b598      	push	{r3, r4, r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005158:	f7ff ffd6 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 800515c:	4604      	mov	r4, r0
 800515e:	f7ff f99a 	bl	8004496 <LL_RCC_GetAPB2Prescaler>
 8005162:	4603      	mov	r3, r0
 8005164:	0adb      	lsrs	r3, r3, #11
 8005166:	4a03      	ldr	r2, [pc, #12]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd98      	pop	{r3, r4, r7, pc}
 8005174:	0800fd88 	.word	0x0800fd88

08005178 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02f      	beq.n	80051e8 <HAL_RCC_GetClockConfig+0x70>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d02c      	beq.n	80051e8 <HAL_RCC_GetClockConfig+0x70>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	224f      	movs	r2, #79	; 0x4f
 8005192:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80051a0:	f7ff f8db 	bl	800435a <LL_RCC_GetSysClkSource>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80051aa:	f7ff f945 	bl	8004438 <LL_RCC_GetAHBPrescaler>
 80051ae:	4602      	mov	r2, r0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80051b4:	f7ff f964 	bl	8004480 <LL_RCC_GetAPB1Prescaler>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80051be:	f7ff f96a 	bl	8004496 <LL_RCC_GetAPB2Prescaler>
 80051c2:	4602      	mov	r2, r0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	611a      	str	r2, [r3, #16]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80051c8:	f7ff f941 	bl	800444e <LL_C2_RCC_GetAHBPrescaler>
 80051cc:	4602      	mov	r2, r0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 80051d2:	f7ff f948 	bl	8004466 <LL_RCC_GetAHB3Prescaler>
 80051d6:	4602      	mov	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <HAL_RCC_GetClockConfig+0x78>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0207 	and.w	r2, r3, #7
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	601a      	str	r2, [r3, #0]
  }
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	58004000 	.word	0x58004000

080051f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	4a10      	ldr	r2, [pc, #64]	; (8005248 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800520c:	f7ff f92b 	bl	8004466 <LL_RCC_GetAHB3Prescaler>
 8005210:	4603      	mov	r3, r0
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	4a0c      	ldr	r2, [pc, #48]	; (800524c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0c9c      	lsrs	r4, r3, #18
 8005230:	f7fe ff1e 	bl	8004070 <HAL_PWREx_GetVoltageRange>
 8005234:	4603      	mov	r3, r0
 8005236:	4619      	mov	r1, r3
 8005238:	4620      	mov	r0, r4
 800523a:	f000 f80b 	bl	8005254 <RCC_SetFlashLatency>
 800523e:	4603      	mov	r3, r0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	0800fda8 	.word	0x0800fda8
 800524c:	0800fd48 	.word	0x0800fd48
 8005250:	431bde83 	.word	0x431bde83

08005254 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08e      	sub	sp, #56	; 0x38
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800525e:	4a3c      	ldr	r2, [pc, #240]	; (8005350 <RCC_SetFlashLatency+0xfc>)
 8005260:	f107 0320 	add.w	r3, r7, #32
 8005264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005268:	6018      	str	r0, [r3, #0]
 800526a:	3304      	adds	r3, #4
 800526c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800526e:	4a39      	ldr	r2, [pc, #228]	; (8005354 <RCC_SetFlashLatency+0x100>)
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005278:	6018      	str	r0, [r3, #0]
 800527a:	3304      	adds	r3, #4
 800527c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800527e:	4a36      	ldr	r2, [pc, #216]	; (8005358 <RCC_SetFlashLatency+0x104>)
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	ca07      	ldmia	r2, {r0, r1, r2}
 8005286:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005294:	d11d      	bne.n	80052d2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005296:	2300      	movs	r3, #0
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	e016      	b.n	80052ca <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052a4:	4413      	add	r3, r2
 80052a6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80052aa:	461a      	mov	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d808      	bhi.n	80052c4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052ba:	4413      	add	r3, r2
 80052bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052c2:	e023      	b.n	800530c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	3301      	adds	r3, #1
 80052c8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d9e5      	bls.n	800529c <RCC_SetFlashLatency+0x48>
 80052d0:	e01c      	b.n	800530c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052d2:	2300      	movs	r3, #0
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	e016      	b.n	8005306 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052e0:	4413      	add	r3, r2
 80052e2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d808      	bhi.n	8005300 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80052f6:	4413      	add	r3, r2
 80052f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052fe:	e005      	b.n	800530c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	3301      	adds	r3, #1
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b02      	cmp	r3, #2
 800530a:	d9e5      	bls.n	80052d8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <RCC_SetFlashLatency+0x108>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f023 0207 	bic.w	r2, r3, #7
 8005314:	4911      	ldr	r1, [pc, #68]	; (800535c <RCC_SetFlashLatency+0x108>)
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	4313      	orrs	r3, r2
 800531a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800531c:	f7fd f90c 	bl	8002538 <HAL_GetTick>
 8005320:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005322:	e008      	b.n	8005336 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005324:	f7fd f908 	bl	8002538 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e007      	b.n	8005346 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <RCC_SetFlashLatency+0x108>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005340:	429a      	cmp	r2, r3
 8005342:	d1ef      	bne.n	8005324 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3738      	adds	r7, #56	; 0x38
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	0800fc78 	.word	0x0800fc78
 8005354:	0800fc80 	.word	0x0800fc80
 8005358:	0800fc88 	.word	0x0800fc88
 800535c:	58004000 	.word	0x58004000

08005360 <LL_RCC_LSE_IsReady>:
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b02      	cmp	r3, #2
 8005372:	d101      	bne.n	8005378 <LL_RCC_LSE_IsReady+0x18>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <LL_RCC_LSE_IsReady+0x1a>
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <LL_RCC_SetUSARTClockSource>:
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800538a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	43db      	mvns	r3, r3
 8005398:	401a      	ands	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <LL_RCC_SetI2SClockSource>:
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80053ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <LL_RCC_SetLPUARTClockSource>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <LL_RCC_SetI2CClockSource>:
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800540e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800541e:	43db      	mvns	r3, r3
 8005420:	401a      	ands	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800542a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <LL_RCC_SetLPTIMClockSource>:
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <LL_RCC_SetRNGClockSource>:
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005480:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr

0800549a <LL_RCC_SetADCClockSource>:
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <LL_RCC_SetRTCClockSource>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <LL_RCC_GetRTCClockSource>:
{
 80054ee:	b480      	push	{r7}
 80054f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <LL_RCC_ForceBackupDomainReset>:
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800551e:	bf00      	nop
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
	...

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005554:	2300      	movs	r3, #0
 8005556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005558:	2300      	movs	r3, #0
 800555a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d058      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005568:	f7fe fd74 	bl	8004054 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800556c:	f7fc ffe4 	bl	8002538 <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005572:	e009      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fc ffe0 	bl	8002538 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d902      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	74fb      	strb	r3, [r7, #19]
        break;
 8005586:	e006      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005588:	4b7b      	ldr	r3, [pc, #492]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d1ee      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005596:	7cfb      	ldrb	r3, [r7, #19]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d13c      	bne.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800559c:	f7ff ffa7 	bl	80054ee <LL_RCC_GetRTCClockSource>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d00f      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b8:	f7ff ffa5 	bl	8005506 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055bc:	f7ff ffb3 	bl	8005526 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d014      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fc ffb0 	bl	8002538 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80055da:	e00b      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055dc:	f7fc ffac 	bl	8002538 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d902      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	74fb      	strb	r3, [r7, #19]
            break;
 80055f2:	e004      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80055f4:	f7ff feb4 	bl	8005360 <LL_RCC_LSE_IsReady>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d1ee      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff ff5b 	bl	80054c4 <LL_RCC_SetRTCClockSource>
 800560e:	e004      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
 8005614:	e001      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fea9 	bl	8005382 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d004      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fe9e 	bl	8005382 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fec0 	bl	80053dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fee6 	bl	800543e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fedb 	bl	800543e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005690:	2b00      	cmp	r3, #0
 8005692:	d004      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fed0 	bl	800543e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d004      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fea9 	bl	8005406 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fe9e 	bl	8005406 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d004      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fe93 	bl	8005406 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d011      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fe5e 	bl	80053b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d107      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d010      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fea5 	bl	8005470 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d107      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d011      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fea3 	bl	800549a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800575e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800576e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	58000400 	.word	0x58000400

0800577c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d068      	beq.n	8005860 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fc38 	bl	8002018 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b0:	4b2e      	ldr	r3, [pc, #184]	; (800586c <HAL_RTC_Init+0xf0>)
 80057b2:	22ca      	movs	r2, #202	; 0xca
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
 80057b6:	4b2d      	ldr	r3, [pc, #180]	; (800586c <HAL_RTC_Init+0xf0>)
 80057b8:	2253      	movs	r2, #83	; 0x53
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f87d 	bl	80058bc <RTC_EnterInitMode>
 80057c2:	4603      	mov	r3, r0
 80057c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d13f      	bne.n	800584c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_RTC_Init+0xf0>)
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <HAL_RTC_Init+0xf0>)
 80057d2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80057d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057da:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057dc:	4b23      	ldr	r3, [pc, #140]	; (800586c <HAL_RTC_Init+0xf0>)
 80057de:	699a      	ldr	r2, [r3, #24]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	4319      	orrs	r1, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	430b      	orrs	r3, r1
 80057f0:	491e      	ldr	r1, [pc, #120]	; (800586c <HAL_RTC_Init+0xf0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	491a      	ldr	r1, [pc, #104]	; (800586c <HAL_RTC_Init+0xf0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8005806:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_RTC_Init+0xf0>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	430b      	orrs	r3, r1
 8005818:	4914      	ldr	r1, [pc, #80]	; (800586c <HAL_RTC_Init+0xf0>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f880 	bl	8005924 <RTC_ExitInitMode>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10e      	bne.n	800584c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <HAL_RTC_Init+0xf0>)
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a19      	ldr	r1, [r3, #32]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4319      	orrs	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	430b      	orrs	r3, r1
 8005846:	4909      	ldr	r1, [pc, #36]	; (800586c <HAL_RTC_Init+0xf0>)
 8005848:	4313      	orrs	r3, r2
 800584a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800584c:	4b07      	ldr	r3, [pc, #28]	; (800586c <HAL_RTC_Init+0xf0>)
 800584e:	22ff      	movs	r2, #255	; 0xff
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40002800 	.word	0x40002800

08005870 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <HAL_RTC_WaitForSynchro+0x48>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a0e      	ldr	r2, [pc, #56]	; (80058b8 <HAL_RTC_WaitForSynchro+0x48>)
 800587e:	f023 0320 	bic.w	r3, r3, #32
 8005882:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005884:	f7fc fe58 	bl	8002538 <HAL_GetTick>
 8005888:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800588a:	e009      	b.n	80058a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800588c:	f7fc fe54 	bl	8002538 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589a:	d901      	bls.n	80058a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e006      	b.n	80058ae <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RTC_WaitForSynchro+0x48>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0ef      	beq.n	800588c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40002800 	.word	0x40002800

080058bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <RTC_EnterInitMode+0x64>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d120      	bne.n	8005916 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80058d4:	4b12      	ldr	r3, [pc, #72]	; (8005920 <RTC_EnterInitMode+0x64>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a11      	ldr	r2, [pc, #68]	; (8005920 <RTC_EnterInitMode+0x64>)
 80058da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058de:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80058e0:	f7fc fe2a 	bl	8002538 <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058e6:	e00d      	b.n	8005904 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058e8:	f7fc fe26 	bl	8002538 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058f6:	d905      	bls.n	8005904 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2203      	movs	r2, #3
 8005900:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <RTC_EnterInitMode+0x64>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <RTC_EnterInitMode+0x5a>
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d1e8      	bne.n	80058e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40002800 	.word	0x40002800

08005924 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <RTC_ExitInitMode+0x78>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <RTC_ExitInitMode+0x78>)
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <RTC_ExitInitMode+0x78>)
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff91 	bl	8005870 <HAL_RTC_WaitForSynchro>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01e      	beq.n	8005992 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2203      	movs	r2, #3
 8005958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e017      	b.n	8005992 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <RTC_ExitInitMode+0x78>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4a0d      	ldr	r2, [pc, #52]	; (800599c <RTC_ExitInitMode+0x78>)
 8005968:	f023 0320 	bic.w	r3, r3, #32
 800596c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff ff7e 	bl	8005870 <HAL_RTC_WaitForSynchro>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <RTC_ExitInitMode+0x78>)
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <RTC_ExitInitMode+0x78>)
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40002800 	.word	0x40002800

080059a0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b0:	4904      	ldr	r1, [pc, #16]	; (80059c4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	608b      	str	r3, [r1, #8]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	58000400 	.word	0x58000400

080059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	4a04      	ldr	r2, [pc, #16]	; (80059e4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80059d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	58000400 	.word	0x58000400

080059e8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80059f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	58000400 	.word	0x58000400

08005a08 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005a0c:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a12:	619a      	str	r2, [r3, #24]
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	58000400 	.word	0x58000400

08005a20 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005a24:	4b06      	ldr	r3, [pc, #24]	; (8005a40 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d101      	bne.n	8005a34 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	58000400 	.word	0x58000400

08005a44 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d101      	bne.n	8005a58 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	58000400 	.word	0x58000400

08005a68 <LL_RCC_RF_DisableReset>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_IsRFUnderReset>:
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a9c:	d101      	bne.n	8005aa2 <LL_RCC_IsRFUnderReset+0x1a>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <LL_RCC_IsRFUnderReset+0x1c>
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005ab4:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <LL_EXTI_EnableIT_32_63+0x24>)
 8005ab6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005aba:	4905      	ldr	r1, [pc, #20]	; (8005ad0 <LL_EXTI_EnableIT_32_63+0x24>)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	58000800 	.word	0x58000800

08005ad4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
    return status;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	e04b      	b.n	8005b82 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	799b      	ldrb	r3, [r3, #6]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fc fab6 	bl	8002070 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8005b0a:	f7ff ffad 	bl	8005a68 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b0e:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <HAL_SUBGHZ_Init+0xb8>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	0cdb      	lsrs	r3, r3, #19
 8005b1c:	2264      	movs	r2, #100	; 0x64
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	609a      	str	r2, [r3, #8]
      break;
 8005b34:	e007      	b.n	8005b46 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005b3c:	f7ff ffa4 	bl	8005a88 <LL_RCC_IsRFUnderReset>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1ee      	bne.n	8005b24 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b46:	f7ff ff3f 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005b4a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005b4e:	f7ff ffad 	bl	8005aac <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005b52:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b56:	f7ff ff23 	bl	80059a0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005b5a:	f7ff ff55 	bl	8005a08 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 faad 	bl	80060c8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	719a      	strb	r2, [r3, #6]

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000004 	.word	0x20000004

08005b90 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	817b      	strh	r3, [r7, #10]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	799b      	ldrb	r3, [r3, #6]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d14a      	bne.n	8005c44 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	795b      	ldrb	r3, [r3, #5]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e045      	b.n	8005c46 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fb4c 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005bcc:	f7ff ff0c 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005bd0:	210d      	movs	r1, #13
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 fa98 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005bd8:	897b      	ldrh	r3, [r7, #10]
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	4619      	mov	r1, r3
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fa90 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005be8:	897b      	ldrh	r3, [r7, #10]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	4619      	mov	r1, r3
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fa8a 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	82bb      	strh	r3, [r7, #20]
 8005bf8:	e00a      	b.n	8005c10 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005bfa:	8abb      	ldrh	r3, [r7, #20]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fa7f 	bl	8006108 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c0a:	8abb      	ldrh	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	82bb      	strh	r3, [r7, #20]
 8005c10:	8aba      	ldrh	r2, [r7, #20]
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3f0      	bcc.n	8005bfa <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c18:	f7ff fed6 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fb45 	bl	80062ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
 8005c2e:	e001      	b.n	8005c34 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	715a      	strb	r2, [r3, #5]

    return status;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
 8005c42:	e000      	b.n	8005c46 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b088      	sub	sp, #32
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	817b      	strh	r3, [r7, #10]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	799b      	ldrb	r3, [r3, #6]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d14a      	bne.n	8005d06 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	795b      	ldrb	r3, [r3, #5]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e045      	b.n	8005d08 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 faee 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c88:	f7ff feae 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005c8c:	211d      	movs	r1, #29
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fa3a 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005c94:	897b      	ldrh	r3, [r7, #10]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fa32 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005ca4:	897b      	ldrh	r3, [r7, #10]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fa2c 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fa28 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	82fb      	strh	r3, [r7, #22]
 8005cbc:	e009      	b.n	8005cd2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fa77 	bl	80061b4 <SUBGHZSPI_Receive>
      pData++;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005ccc:	8afb      	ldrh	r3, [r7, #22]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	82fb      	strh	r3, [r7, #22]
 8005cd2:	8afa      	ldrh	r2, [r7, #22]
 8005cd4:	893b      	ldrh	r3, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3f1      	bcc.n	8005cbe <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005cda:	f7ff fe75 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fae4 	bl	80062ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e001      	b.n	8005cf6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	715a      	strb	r2, [r3, #5]

    return status;
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	e000      	b.n	8005d08 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	72fb      	strb	r3, [r7, #11]
 8005d20:	4613      	mov	r3, r2
 8005d22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	799b      	ldrb	r3, [r3, #6]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d14a      	bne.n	8005dc4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	795b      	ldrb	r3, [r3, #5]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e045      	b.n	8005dc6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fa8f 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005d46:	7afb      	ldrb	r3, [r7, #11]
 8005d48:	2b84      	cmp	r3, #132	; 0x84
 8005d4a:	d002      	beq.n	8005d52 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	2b94      	cmp	r3, #148	; 0x94
 8005d50:	d103      	bne.n	8005d5a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	711a      	strb	r2, [r3, #4]
 8005d58:	e002      	b.n	8005d60 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d60:	f7ff fe42 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005d64:	7afb      	ldrb	r3, [r7, #11]
 8005d66:	4619      	mov	r1, r3
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f9cd 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d6e:	2300      	movs	r3, #0
 8005d70:	82bb      	strh	r3, [r7, #20]
 8005d72:	e00a      	b.n	8005d8a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005d74:	8abb      	ldrh	r3, [r7, #20]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f9c2 	bl	8006108 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d84:	8abb      	ldrh	r3, [r7, #20]
 8005d86:	3301      	adds	r3, #1
 8005d88:	82bb      	strh	r3, [r7, #20]
 8005d8a:	8aba      	ldrh	r2, [r7, #20]
 8005d8c:	893b      	ldrh	r3, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d3f0      	bcc.n	8005d74 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d92:	f7ff fe19 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005d96:	7afb      	ldrb	r3, [r7, #11]
 8005d98:	2b84      	cmp	r3, #132	; 0x84
 8005d9a:	d002      	beq.n	8005da2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 fa85 	bl	80062ac <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
 8005dae:	e001      	b.n	8005db4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	715a      	strb	r2, [r3, #5]

    return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	e000      	b.n	8005dc6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	460b      	mov	r3, r1
 8005ddc:	72fb      	strb	r3, [r7, #11]
 8005dde:	4613      	mov	r3, r2
 8005de0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	799b      	ldrb	r3, [r3, #6]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d13d      	bne.n	8005e6c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	795b      	ldrb	r3, [r3, #5]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e038      	b.n	8005e6e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa2e 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e08:	f7ff fdee 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f979 	bl	8006108 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005e16:	2100      	movs	r1, #0
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f975 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	82fb      	strh	r3, [r7, #22]
 8005e22:	e009      	b.n	8005e38 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e24:	69b9      	ldr	r1, [r7, #24]
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f9c4 	bl	80061b4 <SUBGHZSPI_Receive>
      pData++;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	3301      	adds	r3, #1
 8005e36:	82fb      	strh	r3, [r7, #22]
 8005e38:	8afa      	ldrh	r2, [r7, #22]
 8005e3a:	893b      	ldrh	r3, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3f1      	bcc.n	8005e24 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005e40:	f7ff fdc2 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 fa31 	bl	80062ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e001      	b.n	8005e5c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	715a      	strb	r2, [r3, #5]

    return status;
 8005e68:	7ffb      	ldrb	r3, [r7, #31]
 8005e6a:	e000      	b.n	8005e6e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	607a      	str	r2, [r7, #4]
 8005e80:	461a      	mov	r2, r3
 8005e82:	460b      	mov	r3, r1
 8005e84:	72fb      	strb	r3, [r7, #11]
 8005e86:	4613      	mov	r3, r2
 8005e88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	799b      	ldrb	r3, [r3, #6]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d13e      	bne.n	8005f12 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	795b      	ldrb	r3, [r3, #5]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e039      	b.n	8005f14 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f000 f9dc 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005eac:	f7ff fd9c 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005eb0:	210e      	movs	r1, #14
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f928 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f923 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	82bb      	strh	r3, [r7, #20]
 8005ec6:	e00a      	b.n	8005ede <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ec8:	8abb      	ldrh	r3, [r7, #20]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f918 	bl	8006108 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ed8:	8abb      	ldrh	r3, [r7, #20]
 8005eda:	3301      	adds	r3, #1
 8005edc:	82bb      	strh	r3, [r7, #20]
 8005ede:	8aba      	ldrh	r2, [r7, #20]
 8005ee0:	893b      	ldrh	r3, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3f0      	bcc.n	8005ec8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ee6:	f7ff fd6f 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f9de 	bl	80062ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
 8005efc:	e001      	b.n	8005f02 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	715a      	strb	r2, [r3, #5]

    return status;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	e000      	b.n	8005f14 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005f12:	2302      	movs	r3, #2
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	461a      	mov	r2, r3
 8005f28:	460b      	mov	r3, r1
 8005f2a:	72fb      	strb	r3, [r7, #11]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	799b      	ldrb	r3, [r3, #6]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d141      	bne.n	8005fc2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	795b      	ldrb	r3, [r3, #5]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e03c      	b.n	8005fc4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f987 	bl	8006264 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f56:	f7ff fd47 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005f5a:	211e      	movs	r1, #30
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f8d3 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	4619      	mov	r1, r3
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f8ce 	bl	8006108 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f8ca 	bl	8006108 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	82fb      	strh	r3, [r7, #22]
 8005f78:	e009      	b.n	8005f8e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f919 	bl	80061b4 <SUBGHZSPI_Receive>
      pData++;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005f88:	8afb      	ldrh	r3, [r7, #22]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	82fb      	strh	r3, [r7, #22]
 8005f8e:	8afa      	ldrh	r2, [r7, #22]
 8005f90:	893b      	ldrh	r3, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d3f1      	bcc.n	8005f7a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f96:	f7ff fd17 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f986 	bl	80062ac <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e001      	b.n	8005fb2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	715a      	strb	r2, [r3, #5]

    return status;
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	e000      	b.n	8005fc4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 8005fd8:	f107 020c 	add.w	r2, r7, #12
 8005fdc:	2302      	movs	r3, #2
 8005fde:	2112      	movs	r1, #18
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fef4 	bl	8005dce <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8005fe6:	7b3b      	ldrb	r3, [r7, #12]
 8005fe8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 8005fea:	89fb      	ldrh	r3, [r7, #14]
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	b21a      	sxth	r2, r3
 8005ff0:	7b7b      	ldrb	r3, [r7, #13]
 8005ff2:	b21b      	sxth	r3, r3
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	b21b      	sxth	r3, r3
 8005ff8:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005ffa:	89fb      	ldrh	r3, [r7, #14]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f008 fa5f 	bl	800e4c8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f008 fa64 	bl	800e4e4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800601c:	89fb      	ldrh	r3, [r7, #14]
 800601e:	089b      	lsrs	r3, r3, #2
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f008 fab3 	bl	800e594 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800602e:	89fb      	ldrh	r3, [r7, #14]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f008 fab8 	bl	800e5b0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006040:	89fb      	ldrh	r3, [r7, #14]
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f008 fabd 	bl	800e5cc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f008 fa8a 	bl	800e578 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f008 fa45 	bl	800e500 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006082:	89fb      	ldrh	r3, [r7, #14]
 8006084:	0a1b      	lsrs	r3, r3, #8
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800608e:	2101      	movs	r1, #1
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f008 fa43 	bl	800e51c <HAL_SUBGHZ_CADStatusCallback>
 8006096:	e003      	b.n	80060a0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006098:	2100      	movs	r1, #0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f008 fa3e 	bl	800e51c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	0a5b      	lsrs	r3, r3, #9
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f008 fa53 	bl	800e558 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80060b2:	f107 020c 	add.w	r2, r7, #12
 80060b6:	2302      	movs	r3, #2
 80060b8:	2102      	movs	r1, #2
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fe28 	bl	8005d10 <HAL_SUBGHZ_ExecSetCmd>
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0b      	ldr	r2, [pc, #44]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060da:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80060e4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060e8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80060ec:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a04      	ldr	r2, [pc, #16]	; (8006104 <SUBGHZSPI_Init+0x3c>)
 80060f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060f8:	6013      	str	r3, [r2, #0]
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr
 8006104:	58010000 	.word	0x58010000

08006108 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006118:	4b23      	ldr	r3, [pc, #140]	; (80061a8 <SUBGHZSPI_Transmit+0xa0>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	0cdb      	lsrs	r3, r3, #19
 8006126:	2264      	movs	r2, #100	; 0x64
 8006128:	fb02 f303 	mul.w	r3, r2, r3
 800612c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	609a      	str	r2, [r3, #8]
      break;
 800613e:	e008      	b.n	8006152 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3b01      	subs	r3, #1
 8006144:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006146:	4b19      	ldr	r3, [pc, #100]	; (80061ac <SUBGHZSPI_Transmit+0xa4>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d1ed      	bne.n	800612e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006152:	4b17      	ldr	r3, [pc, #92]	; (80061b0 <SUBGHZSPI_Transmit+0xa8>)
 8006154:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <SUBGHZSPI_Transmit+0xa0>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	0cdb      	lsrs	r3, r3, #19
 800616a:	2264      	movs	r2, #100	; 0x64
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	609a      	str	r2, [r3, #8]
      break;
 8006182:	e008      	b.n	8006196 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b01      	subs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <SUBGHZSPI_Transmit+0xa4>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b01      	cmp	r3, #1
 8006194:	d1ed      	bne.n	8006172 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006196:	4b05      	ldr	r3, [pc, #20]	; (80061ac <SUBGHZSPI_Transmit+0xa4>)
 8006198:	68db      	ldr	r3, [r3, #12]

  return status;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc80      	pop	{r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	20000004 	.word	0x20000004
 80061ac:	58010000 	.word	0x58010000
 80061b0:	5801000c 	.word	0x5801000c

080061b4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80061c2:	4b25      	ldr	r3, [pc, #148]	; (8006258 <SUBGHZSPI_Receive+0xa4>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	0cdb      	lsrs	r3, r3, #19
 80061d0:	2264      	movs	r2, #100	; 0x64
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	609a      	str	r2, [r3, #8]
      break;
 80061e8:	e008      	b.n	80061fc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80061f0:	4b1a      	ldr	r3, [pc, #104]	; (800625c <SUBGHZSPI_Receive+0xa8>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d1ed      	bne.n	80061d8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <SUBGHZSPI_Receive+0xac>)
 80061fe:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <SUBGHZSPI_Receive+0xa4>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4613      	mov	r3, r2
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	0cdb      	lsrs	r3, r3, #19
 8006214:	2264      	movs	r2, #100	; 0x64
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	609a      	str	r2, [r3, #8]
      break;
 800622c:	e008      	b.n	8006240 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3b01      	subs	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <SUBGHZSPI_Receive+0xa8>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b01      	cmp	r3, #1
 800623e:	d1ed      	bne.n	800621c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <SUBGHZSPI_Receive+0xa8>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	701a      	strb	r2, [r3, #0]

  return status;
 800624a:	7dfb      	ldrb	r3, [r7, #23]
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	20000004 	.word	0x20000004
 800625c:	58010000 	.word	0x58010000
 8006260:	5801000c 	.word	0x5801000c

08006264 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	791b      	ldrb	r3, [r3, #4]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d111      	bne.n	8006298 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <SUBGHZ_CheckDeviceReady+0x44>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006284:	f7ff fbb0 	bl	80059e8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b01      	subs	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f9      	bne.n	8006288 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006294:	f7ff fb98 	bl	80059c8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f807 	bl	80062ac <SUBGHZ_WaitOnBusy>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000004 	.word	0x20000004

080062ac <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <SUBGHZ_WaitOnBusy+0x58>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	4413      	add	r3, r2
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	0d1b      	lsrs	r3, r3, #20
 80062c6:	2264      	movs	r2, #100	; 0x64
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80062ce:	f7ff fbb9 	bl	8005a44 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80062d2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	609a      	str	r2, [r3, #8]
      break;
 80062e4:	e009      	b.n	80062fa <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80062ec:	f7ff fb98 	bl	8005a20 <LL_PWR_IsActiveFlag_RFBUSYS>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d0e9      	beq.n	80062ce <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20000004 	.word	0x20000004

08006308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e049      	b.n	80063ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f841 	bl	80063b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3304      	adds	r3, #4
 8006344:	4619      	mov	r1, r3
 8006346:	4610      	mov	r0, r2
 8006348:	f000 f9ce 	bl	80066e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e036      	b.n	800644e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a16      	ldr	r2, [pc, #88]	; (8006458 <HAL_TIM_Base_Start_IT+0x90>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_TIM_Base_Start_IT+0x44>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d115      	bne.n	8006438 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_TIM_Base_Start_IT+0x94>)
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b06      	cmp	r3, #6
 800641c:	d015      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x82>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006424:	d011      	beq.n	800644a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	e008      	b.n	800644a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e000      	b.n	800644c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	00010007 	.word	0x00010007

08006460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b02      	cmp	r3, #2
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0202 	mvn.w	r2, #2
 800648c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f904 	bl	80066b0 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f8f7 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f906 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0204 	mvn.w	r2, #4
 80064e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2202      	movs	r2, #2
 80064e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f8da 	bl	80066b0 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f8cd 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f8dc 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b08      	cmp	r3, #8
 800651c:	d122      	bne.n	8006564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d11b      	bne.n	8006564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0208 	mvn.w	r2, #8
 8006534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2204      	movs	r2, #4
 800653a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f8b0 	bl	80066b0 <HAL_TIM_IC_CaptureCallback>
 8006550:	e005      	b.n	800655e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8a3 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f8b2 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	2b10      	cmp	r3, #16
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b10      	cmp	r3, #16
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0210 	mvn.w	r2, #16
 8006588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2208      	movs	r2, #8
 800658e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f886 	bl	80066b0 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f879 	bl	800669e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f888 	bl	80066c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d10e      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0201 	mvn.w	r2, #1
 80065dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fb fbae 	bl	8001d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d10e      	bne.n	8006610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d107      	bne.n	8006610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8d7 	bl	80067be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	d10e      	bne.n	800663e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662a:	2b80      	cmp	r3, #128	; 0x80
 800662c:	d107      	bne.n	800663e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8c9 	bl	80067d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d10e      	bne.n	800666a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d107      	bne.n	800666a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f835 	bl	80066d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0320 	and.w	r3, r3, #32
 8006674:	2b20      	cmp	r3, #32
 8006676:	d10e      	bne.n	8006696 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b20      	cmp	r3, #32
 8006684:	d107      	bne.n	8006696 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0220 	mvn.w	r2, #32
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f88b 	bl	80067ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
	...

080066e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <TIM_Base_SetConfig+0xb8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_Base_SetConfig+0x20>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d108      	bne.n	800671a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a20      	ldr	r2, [pc, #128]	; (80067a0 <TIM_Base_SetConfig+0xb8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00b      	beq.n	800673a <TIM_Base_SetConfig+0x52>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d007      	beq.n	800673a <TIM_Base_SetConfig+0x52>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <TIM_Base_SetConfig+0xbc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_Base_SetConfig+0x52>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <TIM_Base_SetConfig+0xc0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d108      	bne.n	800674c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <TIM_Base_SetConfig+0xb8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d007      	beq.n	8006788 <TIM_Base_SetConfig+0xa0>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <TIM_Base_SetConfig+0xbc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0xa0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <TIM_Base_SetConfig+0xc0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d103      	bne.n	8006790 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	615a      	str	r2, [r3, #20]
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40014400 	.word	0x40014400
 80067a8:	40014800 	.word	0x40014800

080067ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr

080067be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <LL_RCC_GetUSARTClockSource>:
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80067ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	401a      	ands	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	041b      	lsls	r3, r3, #16
 80067fa:	4313      	orrs	r3, r2
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <LL_RCC_GetLPUARTClockSource>:
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006812:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4013      	ands	r3, r2
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e042      	b.n	80068bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fb fc25 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2224      	movs	r2, #36	; 0x24
 8006852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fbf8 	bl	800705c <UART_SetConfig>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e022      	b.n	80068bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fe3c 	bl	80074fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fec2 	bl	800763e <UART_CheckIdleState>
 80068ba:	4603      	mov	r3, r0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068da:	2b20      	cmp	r3, #32
 80068dc:	f040 8083 	bne.w	80069e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <HAL_UART_Transmit+0x28>
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e07b      	b.n	80069e8 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Transmit+0x3a>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e074      	b.n	80069e8 <HAL_UART_Transmit+0x124>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2221      	movs	r2, #33	; 0x21
 8006912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006916:	f7fb fe0f 	bl	8002538 <HAL_GetTick>
 800691a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	88fa      	ldrh	r2, [r7, #6]
 8006920:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006934:	d108      	bne.n	8006948 <HAL_UART_Transmit+0x84>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d104      	bne.n	8006948 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	e003      	b.n	8006950 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006958:	e02c      	b.n	80069b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2200      	movs	r2, #0
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 feb5 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d001      	beq.n	8006974 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e039      	b.n	80069e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006988:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	3302      	adds	r3, #2
 800698e:	61bb      	str	r3, [r7, #24]
 8006990:	e007      	b.n	80069a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	781a      	ldrb	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3301      	adds	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1cc      	bne.n	800695a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2200      	movs	r2, #0
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fe82 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e006      	b.n	80069e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	e000      	b.n	80069e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80069e6:	2302      	movs	r3, #2
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b0ba      	sub	sp, #232	; 0xe8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a1e:	4013      	ands	r3, r2
 8006a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d11b      	bne.n	8006a64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d015      	beq.n	8006a64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 82d6 	beq.w	8007006 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	4798      	blx	r3
      }
      return;
 8006a62:	e2d0      	b.n	8007006 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 811f 	beq.w	8006cac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a72:	4b8b      	ldr	r3, [pc, #556]	; (8006ca0 <HAL_UART_IRQHandler+0x2b0>)
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <HAL_UART_IRQHandler+0x2b4>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8112 	beq.w	8006cac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d011      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xc8>
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aae:	f043 0201 	orr.w	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d011      	beq.n	8006ae8 <HAL_UART_IRQHandler+0xf8>
 8006ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ade:	f043 0204 	orr.w	r2, r3, #4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d011      	beq.n	8006b18 <HAL_UART_IRQHandler+0x128>
 8006af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2204      	movs	r2, #4
 8006b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0e:	f043 0202 	orr.w	r2, r3, #2
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d017      	beq.n	8006b54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b34:	4b5a      	ldr	r3, [pc, #360]	; (8006ca0 <HAL_UART_IRQHandler+0x2b0>)
 8006b36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2208      	movs	r2, #8
 8006b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4a:	f043 0208 	orr.w	r2, r3, #8
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d012      	beq.n	8006b86 <HAL_UART_IRQHandler+0x196>
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00c      	beq.n	8006b86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 823c 	beq.w	800700a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d013      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04f      	beq.n	8006c8a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fe3a 	bl	8007864 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d141      	bne.n	8006c82 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d9      	bne.n	8006bfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c56:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <HAL_UART_IRQHandler+0x2b8>)
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fc fae3 	bl	800322a <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00f      	b.n	8006c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9d9 	bl	8007032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e00b      	b.n	8006c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9d5 	bl	8007032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e007      	b.n	8006c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9d1 	bl	8007032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006c98:	e1b7      	b.n	800700a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	bf00      	nop
    return;
 8006c9c:	e1b5      	b.n	800700a <HAL_UART_IRQHandler+0x61a>
 8006c9e:	bf00      	nop
 8006ca0:	10000001 	.word	0x10000001
 8006ca4:	04000120 	.word	0x04000120
 8006ca8:	0800792f 	.word	0x0800792f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 814a 	bne.w	8006f4a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8143 	beq.w	8006f4a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 813c 	beq.w	8006f4a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	f040 80b5 	bne.w	8006e54 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 8187 	beq.w	800700e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	f080 817f 	bcs.w	800700e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f040 8086 	bne.w	8006e38 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1da      	bne.n	8006d2c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3308      	adds	r3, #8
 8006d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e1      	bne.n	8006d76 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e3      	bne.n	8006db2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e08:	f023 0310 	bic.w	r3, r3, #16
 8006e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	461a      	mov	r2, r3
 8006e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e4      	bne.n	8006df8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fc f99b 	bl	800316e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8f9 	bl	8007044 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e52:	e0dc      	b.n	800700e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80ce 	beq.w	8007012 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80c9 	beq.w	8007012 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e4      	bne.n	8006e80 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3308      	adds	r3, #8
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ede:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e1      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0310 	bic.w	r3, r3, #16
 8006f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	617b      	str	r3, [r7, #20]
   return(result);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e4      	bne.n	8006f06 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f87e 	bl	8007044 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f48:	e063      	b.n	8007012 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00e      	beq.n	8006f74 <HAL_UART_IRQHandler+0x584>
 8006f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fd1f 	bl	80079b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f72:	e051      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d014      	beq.n	8006faa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d03a      	beq.n	8007016 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
    }
    return;
 8006fa8:	e035      	b.n	8007016 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_UART_IRQHandler+0x5da>
 8006fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fcc9 	bl	800795a <UART_EndTransmit_IT>
    return;
 8006fc8:	e026      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <HAL_UART_IRQHandler+0x5fa>
 8006fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcf6 	bl	80079d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fe8:	e016      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <HAL_UART_IRQHandler+0x628>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da0c      	bge.n	8007018 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fcdf 	bl	80079c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007004:	e008      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
      return;
 8007006:	bf00      	nop
 8007008:	e006      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
    return;
 800700a:	bf00      	nop
 800700c:	e004      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
      return;
 800700e:	bf00      	nop
 8007010:	e002      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
      return;
 8007012:	bf00      	nop
 8007014:	e000      	b.n	8007018 <HAL_UART_IRQHandler+0x628>
    return;
 8007016:	bf00      	nop
  }
}
 8007018:	37e8      	adds	r7, #232	; 0xe8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop

08007020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr

08007044 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr
	...

0800705c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800705c:	b5b0      	push	{r4, r5, r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4313      	orrs	r3, r2
 800707e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4bab      	ldr	r3, [pc, #684]	; (8007334 <UART_SetConfig+0x2d8>)
 8007088:	4013      	ands	r3, r2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	69f9      	ldr	r1, [r7, #28]
 8007090:	430b      	orrs	r3, r1
 8007092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4aa0      	ldr	r2, [pc, #640]	; (8007338 <UART_SetConfig+0x2dc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d004      	beq.n	80070c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	69f9      	ldr	r1, [r7, #28]
 80070d8:	430b      	orrs	r3, r1
 80070da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	f023 010f 	bic.w	r1, r3, #15
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a91      	ldr	r2, [pc, #580]	; (800733c <UART_SetConfig+0x2e0>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d122      	bne.n	8007142 <UART_SetConfig+0xe6>
 80070fc:	2003      	movs	r0, #3
 80070fe:	f7ff fb70 	bl	80067e2 <LL_RCC_GetUSARTClockSource>
 8007102:	4603      	mov	r3, r0
 8007104:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007108:	2b03      	cmp	r3, #3
 800710a:	d817      	bhi.n	800713c <UART_SetConfig+0xe0>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <UART_SetConfig+0xb8>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007125 	.word	0x08007125
 8007118:	08007131 	.word	0x08007131
 800711c:	0800712b 	.word	0x0800712b
 8007120:	08007137 	.word	0x08007137
 8007124:	2301      	movs	r3, #1
 8007126:	76fb      	strb	r3, [r7, #27]
 8007128:	e072      	b.n	8007210 <UART_SetConfig+0x1b4>
 800712a:	2302      	movs	r3, #2
 800712c:	76fb      	strb	r3, [r7, #27]
 800712e:	e06f      	b.n	8007210 <UART_SetConfig+0x1b4>
 8007130:	2304      	movs	r3, #4
 8007132:	76fb      	strb	r3, [r7, #27]
 8007134:	e06c      	b.n	8007210 <UART_SetConfig+0x1b4>
 8007136:	2308      	movs	r3, #8
 8007138:	76fb      	strb	r3, [r7, #27]
 800713a:	e069      	b.n	8007210 <UART_SetConfig+0x1b4>
 800713c:	2310      	movs	r3, #16
 800713e:	76fb      	strb	r3, [r7, #27]
 8007140:	e066      	b.n	8007210 <UART_SetConfig+0x1b4>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a7e      	ldr	r2, [pc, #504]	; (8007340 <UART_SetConfig+0x2e4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d134      	bne.n	80071b6 <UART_SetConfig+0x15a>
 800714c:	200c      	movs	r0, #12
 800714e:	f7ff fb48 	bl	80067e2 <LL_RCC_GetUSARTClockSource>
 8007152:	4603      	mov	r3, r0
 8007154:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007158:	2b0c      	cmp	r3, #12
 800715a:	d829      	bhi.n	80071b0 <UART_SetConfig+0x154>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x108>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007199 	.word	0x08007199
 8007168:	080071b1 	.word	0x080071b1
 800716c:	080071b1 	.word	0x080071b1
 8007170:	080071b1 	.word	0x080071b1
 8007174:	080071a5 	.word	0x080071a5
 8007178:	080071b1 	.word	0x080071b1
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080071b1 	.word	0x080071b1
 8007184:	0800719f 	.word	0x0800719f
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b1 	.word	0x080071b1
 8007194:	080071ab 	.word	0x080071ab
 8007198:	2300      	movs	r3, #0
 800719a:	76fb      	strb	r3, [r7, #27]
 800719c:	e038      	b.n	8007210 <UART_SetConfig+0x1b4>
 800719e:	2302      	movs	r3, #2
 80071a0:	76fb      	strb	r3, [r7, #27]
 80071a2:	e035      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071a4:	2304      	movs	r3, #4
 80071a6:	76fb      	strb	r3, [r7, #27]
 80071a8:	e032      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071aa:	2308      	movs	r3, #8
 80071ac:	76fb      	strb	r3, [r7, #27]
 80071ae:	e02f      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071b0:	2310      	movs	r3, #16
 80071b2:	76fb      	strb	r3, [r7, #27]
 80071b4:	e02c      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a5f      	ldr	r2, [pc, #380]	; (8007338 <UART_SetConfig+0x2dc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d125      	bne.n	800720c <UART_SetConfig+0x1b0>
 80071c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80071c4:	f7ff fb1f 	bl	8006806 <LL_RCC_GetLPUARTClockSource>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ce:	d017      	beq.n	8007200 <UART_SetConfig+0x1a4>
 80071d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071d4:	d817      	bhi.n	8007206 <UART_SetConfig+0x1aa>
 80071d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071da:	d00b      	beq.n	80071f4 <UART_SetConfig+0x198>
 80071dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e0:	d811      	bhi.n	8007206 <UART_SetConfig+0x1aa>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <UART_SetConfig+0x192>
 80071e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ea:	d006      	beq.n	80071fa <UART_SetConfig+0x19e>
 80071ec:	e00b      	b.n	8007206 <UART_SetConfig+0x1aa>
 80071ee:	2300      	movs	r3, #0
 80071f0:	76fb      	strb	r3, [r7, #27]
 80071f2:	e00d      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071f4:	2302      	movs	r3, #2
 80071f6:	76fb      	strb	r3, [r7, #27]
 80071f8:	e00a      	b.n	8007210 <UART_SetConfig+0x1b4>
 80071fa:	2304      	movs	r3, #4
 80071fc:	76fb      	strb	r3, [r7, #27]
 80071fe:	e007      	b.n	8007210 <UART_SetConfig+0x1b4>
 8007200:	2308      	movs	r3, #8
 8007202:	76fb      	strb	r3, [r7, #27]
 8007204:	e004      	b.n	8007210 <UART_SetConfig+0x1b4>
 8007206:	2310      	movs	r3, #16
 8007208:	76fb      	strb	r3, [r7, #27]
 800720a:	e001      	b.n	8007210 <UART_SetConfig+0x1b4>
 800720c:	2310      	movs	r3, #16
 800720e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a48      	ldr	r2, [pc, #288]	; (8007338 <UART_SetConfig+0x2dc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	f040 8098 	bne.w	800734c <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800721c:	7efb      	ldrb	r3, [r7, #27]
 800721e:	2b08      	cmp	r3, #8
 8007220:	d823      	bhi.n	800726a <UART_SetConfig+0x20e>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x1cc>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800724d 	.word	0x0800724d
 800722c:	0800726b 	.word	0x0800726b
 8007230:	08007255 	.word	0x08007255
 8007234:	0800726b 	.word	0x0800726b
 8007238:	0800725b 	.word	0x0800725b
 800723c:	0800726b 	.word	0x0800726b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007263 	.word	0x08007263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fd ff70 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8007250:	6178      	str	r0, [r7, #20]
        break;
 8007252:	e00f      	b.n	8007274 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007254:	4b3b      	ldr	r3, [pc, #236]	; (8007344 <UART_SetConfig+0x2e8>)
 8007256:	617b      	str	r3, [r7, #20]
        break;
 8007258:	e00c      	b.n	8007274 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725a:	f7fd feb5 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 800725e:	6178      	str	r0, [r7, #20]
        break;
 8007260:	e008      	b.n	8007274 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007266:	617b      	str	r3, [r7, #20]
        break;
 8007268:	e004      	b.n	8007274 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	76bb      	strb	r3, [r7, #26]
        break;
 8007272:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 8128 	beq.w	80074cc <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	4a31      	ldr	r2, [pc, #196]	; (8007348 <UART_SetConfig+0x2ec>)
 8007282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007286:	461a      	mov	r2, r3
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	fbb3 f3f2 	udiv	r3, r3, r2
 800728e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d305      	bcc.n	80072ac <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d902      	bls.n	80072b2 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	76bb      	strb	r3, [r7, #26]
 80072b0:	e10c      	b.n	80074cc <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f04f 0100 	mov.w	r1, #0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	4a22      	ldr	r2, [pc, #136]	; (8007348 <UART_SetConfig+0x2ec>)
 80072c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	f04f 0300 	mov.w	r3, #0
 80072ca:	f7f9 fcd5 	bl	8000c78 <__aeabi_uldivmod>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	020b      	lsls	r3, r1, #8
 80072e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072e4:	0202      	lsls	r2, r0, #8
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	6849      	ldr	r1, [r1, #4]
 80072ea:	0849      	lsrs	r1, r1, #1
 80072ec:	4608      	mov	r0, r1
 80072ee:	f04f 0100 	mov.w	r1, #0
 80072f2:	1814      	adds	r4, r2, r0
 80072f4:	eb43 0501 	adc.w	r5, r3, r1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	461a      	mov	r2, r3
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f9 fcb7 	bl	8000c78 <__aeabi_uldivmod>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4613      	mov	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007318:	d308      	bcc.n	800732c <UART_SetConfig+0x2d0>
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007320:	d204      	bcs.n	800732c <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	e0cf      	b.n	80074cc <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	76bb      	strb	r3, [r7, #26]
 8007330:	e0cc      	b.n	80074cc <UART_SetConfig+0x470>
 8007332:	bf00      	nop
 8007334:	cfff69f3 	.word	0xcfff69f3
 8007338:	40008000 	.word	0x40008000
 800733c:	40013800 	.word	0x40013800
 8007340:	40004400 	.word	0x40004400
 8007344:	00f42400 	.word	0x00f42400
 8007348:	0800fe14 	.word	0x0800fe14
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	d165      	bne.n	8007422 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8007356:	7efb      	ldrb	r3, [r7, #27]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d828      	bhi.n	80073ae <UART_SetConfig+0x352>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x308>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	080073af 	.word	0x080073af
 8007374:	0800739f 	.word	0x0800739f
 8007378:	080073af 	.word	0x080073af
 800737c:	080073af 	.word	0x080073af
 8007380:	080073af 	.word	0x080073af
 8007384:	080073a7 	.word	0x080073a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fd fed2 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 800738c:	6178      	str	r0, [r7, #20]
        break;
 800738e:	e013      	b.n	80073b8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fd fee0 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8007394:	6178      	str	r0, [r7, #20]
        break;
 8007396:	e00f      	b.n	80073b8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007398:	4b56      	ldr	r3, [pc, #344]	; (80074f4 <UART_SetConfig+0x498>)
 800739a:	617b      	str	r3, [r7, #20]
        break;
 800739c:	e00c      	b.n	80073b8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739e:	f7fd fe13 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 80073a2:	6178      	str	r0, [r7, #20]
        break;
 80073a4:	e008      	b.n	80073b8 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	617b      	str	r3, [r7, #20]
        break;
 80073ac:	e004      	b.n	80073b8 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	76bb      	strb	r3, [r7, #26]
        break;
 80073b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f000 8086 	beq.w	80074cc <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	4a4c      	ldr	r2, [pc, #304]	; (80074f8 <UART_SetConfig+0x49c>)
 80073c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ca:	461a      	mov	r2, r3
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80073d2:	005a      	lsls	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	085b      	lsrs	r3, r3, #1
 80073da:	441a      	add	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b0f      	cmp	r3, #15
 80073ec:	d916      	bls.n	800741c <UART_SetConfig+0x3c0>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f4:	d212      	bcs.n	800741c <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	f023 030f 	bic.w	r3, r3, #15
 80073fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	085b      	lsrs	r3, r3, #1
 8007404:	b29b      	uxth	r3, r3
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	b29a      	uxth	r2, r3
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	4313      	orrs	r3, r2
 8007410:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	89fa      	ldrh	r2, [r7, #14]
 8007418:	60da      	str	r2, [r3, #12]
 800741a:	e057      	b.n	80074cc <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	76bb      	strb	r3, [r7, #26]
 8007420:	e054      	b.n	80074cc <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007422:	7efb      	ldrb	r3, [r7, #27]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d828      	bhi.n	800747a <UART_SetConfig+0x41e>
 8007428:	a201      	add	r2, pc, #4	; (adr r2, 8007430 <UART_SetConfig+0x3d4>)
 800742a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742e:	bf00      	nop
 8007430:	08007455 	.word	0x08007455
 8007434:	0800745d 	.word	0x0800745d
 8007438:	08007465 	.word	0x08007465
 800743c:	0800747b 	.word	0x0800747b
 8007440:	0800746b 	.word	0x0800746b
 8007444:	0800747b 	.word	0x0800747b
 8007448:	0800747b 	.word	0x0800747b
 800744c:	0800747b 	.word	0x0800747b
 8007450:	08007473 	.word	0x08007473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007454:	f7fd fe6c 	bl	8005130 <HAL_RCC_GetPCLK1Freq>
 8007458:	6178      	str	r0, [r7, #20]
        break;
 800745a:	e013      	b.n	8007484 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745c:	f7fd fe7a 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8007460:	6178      	str	r0, [r7, #20]
        break;
 8007462:	e00f      	b.n	8007484 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007464:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <UART_SetConfig+0x498>)
 8007466:	617b      	str	r3, [r7, #20]
        break;
 8007468:	e00c      	b.n	8007484 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800746a:	f7fd fdad 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 800746e:	6178      	str	r0, [r7, #20]
        break;
 8007470:	e008      	b.n	8007484 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007476:	617b      	str	r3, [r7, #20]
        break;
 8007478:	e004      	b.n	8007484 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	76bb      	strb	r3, [r7, #26]
        break;
 8007482:	bf00      	nop
    }

    if (pclk != 0U)
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d020      	beq.n	80074cc <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <UART_SetConfig+0x49c>)
 8007490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007494:	461a      	mov	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	fbb3 f2f2 	udiv	r2, r3, r2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	441a      	add	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d908      	bls.n	80074c8 <UART_SetConfig+0x46c>
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d204      	bcs.n	80074c8 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	60da      	str	r2, [r3, #12]
 80074c6:	e001      	b.n	80074cc <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80074e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bdb0      	pop	{r4, r5, r7, pc}
 80074f2:	bf00      	nop
 80074f4:	00f42400 	.word	0x00f42400
 80074f8:	0800fe14 	.word	0x0800fe14

080074fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01a      	beq.n	8007612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fa:	d10a      	bne.n	8007612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr

0800763e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af02      	add	r7, sp, #8
 8007644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800764e:	f7fa ff73 	bl	8002538 <HAL_GetTick>
 8007652:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b08      	cmp	r3, #8
 8007660:	d10e      	bne.n	8007680 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007662:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f82f 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e025      	b.n	80076cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b04      	cmp	r3, #4
 800768c:	d10e      	bne.n	80076ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f819 	bl	80076d4 <UART_WaitOnFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e00f      	b.n	80076cc <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b09c      	sub	sp, #112	; 0x70
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	603b      	str	r3, [r7, #0]
 80076e0:	4613      	mov	r3, r2
 80076e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e4:	e0a9      	b.n	800783a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ec:	f000 80a5 	beq.w	800783a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f0:	f7fa ff22 	bl	8002538 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <UART_WaitOnFlagUntilTimeout+0x32>
 8007700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007702:	2b00      	cmp	r3, #0
 8007704:	d140      	bne.n	8007788 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800770e:	e853 3f00 	ldrex	r3, [r3]
 8007712:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007716:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800771a:	667b      	str	r3, [r7, #100]	; 0x64
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007726:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800772a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1e6      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	f023 0301 	bic.w	r3, r3, #1
 800774e:	663b      	str	r3, [r7, #96]	; 0x60
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007758:	64ba      	str	r2, [r7, #72]	; 0x48
 800775a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800775e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2220      	movs	r2, #32
 8007770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2220      	movs	r2, #32
 8007778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e069      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d051      	beq.n	800783a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a4:	d149      	bne.n	800783a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e6      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	e853 3f00 	ldrex	r3, [r3]
 80077f0:	613b      	str	r3, [r7, #16]
   return(result);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f023 0301 	bic.w	r3, r3, #1
 80077f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007802:	623a      	str	r2, [r7, #32]
 8007804:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	6a3a      	ldr	r2, [r7, #32]
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e5      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e010      	b.n	800785c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4013      	ands	r3, r2
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	bf0c      	ite	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	2300      	movne	r3, #0
 800784e:	b2db      	uxtb	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	79fb      	ldrb	r3, [r7, #7]
 8007854:	429a      	cmp	r2, r3
 8007856:	f43f af46 	beq.w	80076e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3770      	adds	r7, #112	; 0x70
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b095      	sub	sp, #84	; 0x54
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007880:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788a:	643b      	str	r3, [r7, #64]	; 0x40
 800788c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b4:	f023 0301 	bic.w	r3, r3, #1
 80078b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d118      	bne.n	8007910 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	647b      	str	r3, [r7, #68]	; 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6979      	ldr	r1, [r7, #20]
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	613b      	str	r3, [r7, #16]
   return(result);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007924:	bf00      	nop
 8007926:	3754      	adds	r7, #84	; 0x54
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f7ff fb70 	bl	8007032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	461a      	mov	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	613b      	str	r3, [r7, #16]
   return(result);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e6      	bne.n	8007962 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fb3c 	bl	8007020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079a8:	bf00      	nop
 80079aa:	3720      	adds	r7, #32
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr

080079e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_UARTEx_DisableFifoMode+0x16>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e027      	b.n	8007a4c <HAL_UARTEx_DisableFifoMode+0x66>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2224      	movs	r2, #36	; 0x24
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f022 0201 	bic.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e02d      	b.n	8007aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2224      	movs	r2, #36	; 0x24
 8007a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f850 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e02d      	b.n	8007b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2224      	movs	r2, #36	; 0x24
 8007af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f812 	bl	8007b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d108      	bne.n	8007b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b70:	e031      	b.n	8007bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b72:	2308      	movs	r3, #8
 8007b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b76:	2308      	movs	r3, #8
 8007b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	0e5b      	lsrs	r3, r3, #25
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	0f5b      	lsrs	r3, r3, #29
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9a:	7bbb      	ldrb	r3, [r7, #14]
 8007b9c:	7b3a      	ldrb	r2, [r7, #12]
 8007b9e:	4910      	ldr	r1, [pc, #64]	; (8007be0 <UARTEx_SetNbDataToProcess+0x90>)
 8007ba0:	5c8a      	ldrb	r2, [r1, r2]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba6:	7b3a      	ldrb	r2, [r7, #12]
 8007ba8:	490e      	ldr	r1, [pc, #56]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	7b7a      	ldrb	r2, [r7, #13]
 8007bbc:	4908      	ldr	r1, [pc, #32]	; (8007be0 <UARTEx_SetNbDataToProcess+0x90>)
 8007bbe:	5c8a      	ldrb	r2, [r1, r2]
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc4:	7b7a      	ldrb	r2, [r7, #13]
 8007bc6:	4907      	ldr	r1, [pc, #28]	; (8007be4 <UARTEx_SetNbDataToProcess+0x94>)
 8007bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bc80      	pop	{r7}
 8007bde:	4770      	bx	lr
 8007be0:	0800fe2c 	.word	0x0800fe2c
 8007be4:	0800fe34 	.word	0x0800fe34

08007be8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007bec:	bf00      	nop
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bfa:	f3ef 8305 	mrs	r3, IPSR
 8007bfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10f      	bne.n	8007c26 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c06:	f3ef 8310 	mrs	r3, PRIMASK
 8007c0a:	607b      	str	r3, [r7, #4]
  return(result);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d105      	bne.n	8007c1e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c12:	f3ef 8311 	mrs	r3, BASEPRI
 8007c16:	603b      	str	r3, [r7, #0]
  return(result);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <osKernelInitialize+0x3a>
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <osKernelInitialize+0x60>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d103      	bne.n	8007c2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c26:	f06f 0305 	mvn.w	r3, #5
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	e00c      	b.n	8007c48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c2e:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <osKernelInitialize+0x60>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d105      	bne.n	8007c42 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c36:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <osKernelInitialize+0x60>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	e002      	b.n	8007c48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c48:	68fb      	ldr	r3, [r7, #12]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr
 8007c54:	200003c8 	.word	0x200003c8

08007c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c5e:	f3ef 8305 	mrs	r3, IPSR
 8007c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10f      	bne.n	8007c8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c76:	f3ef 8311 	mrs	r3, BASEPRI
 8007c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <osKernelStart+0x3a>
 8007c82:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <osKernelStart+0x68>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d103      	bne.n	8007c92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007c8a:	f06f 0305 	mvn.w	r3, #5
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	e010      	b.n	8007cb4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c92:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <osKernelStart+0x68>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d109      	bne.n	8007cae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c9a:	f7ff ffa5 	bl	8007be8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <osKernelStart+0x68>)
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ca4:	f001 fdf2 	bl	800988c <vTaskStartScheduler>
      stat = osOK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e002      	b.n	8007cb4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200003c8 	.word	0x200003c8

08007cc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b090      	sub	sp, #64	; 0x40
 8007cc8:	af04      	add	r7, sp, #16
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cd4:	f3ef 8305 	mrs	r3, IPSR
 8007cd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007cda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f040 808f 	bne.w	8007e00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d105      	bne.n	8007cfa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cee:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf2:	617b      	str	r3, [r7, #20]
  return(result);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <osThreadNew+0x3e>
 8007cfa:	4b44      	ldr	r3, [pc, #272]	; (8007e0c <osThreadNew+0x148>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d07e      	beq.n	8007e00 <osThreadNew+0x13c>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d07b      	beq.n	8007e00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007d08:	2380      	movs	r3, #128	; 0x80
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007d0c:	2318      	movs	r3, #24
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d045      	beq.n	8007dac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <osThreadNew+0x6a>
        name = attr->name;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <osThreadNew+0x90>
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	2b38      	cmp	r3, #56	; 0x38
 8007d46:	d805      	bhi.n	8007d54 <osThreadNew+0x90>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <osThreadNew+0x94>
        return (NULL);
 8007d54:	2300      	movs	r3, #0
 8007d56:	e054      	b.n	8007e02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	089b      	lsrs	r3, r3, #2
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <osThreadNew+0xca>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2bbb      	cmp	r3, #187	; 0xbb
 8007d76:	d90a      	bls.n	8007d8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d006      	beq.n	8007d8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <osThreadNew+0xca>
        mem = 1;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	623b      	str	r3, [r7, #32]
 8007d8c:	e010      	b.n	8007db0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <osThreadNew+0xec>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d108      	bne.n	8007db0 <osThreadNew+0xec>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <osThreadNew+0xec>
          mem = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	623b      	str	r3, [r7, #32]
 8007daa:	e001      	b.n	8007db0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d110      	bne.n	8007dd8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dbe:	9202      	str	r2, [sp, #8]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fb71 	bl	80094b4 <xTaskCreateStatic>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	613b      	str	r3, [r7, #16]
 8007dd6:	e013      	b.n	8007e00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d110      	bne.n	8007e00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	f107 0310 	add.w	r3, r7, #16
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f001 fbbc 	bl	800956e <xTaskCreate>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d001      	beq.n	8007e00 <osThreadNew+0x13c>
          hTask = NULL;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e00:	693b      	ldr	r3, [r7, #16]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3730      	adds	r7, #48	; 0x30
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	200003c8 	.word	0x200003c8

08007e10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e18:	f3ef 8305 	mrs	r3, IPSR
 8007e1c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10f      	bne.n	8007e44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e24:	f3ef 8310 	mrs	r3, PRIMASK
 8007e28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d105      	bne.n	8007e3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e30:	f3ef 8311 	mrs	r3, BASEPRI
 8007e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <osDelay+0x3c>
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <osDelay+0x58>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d103      	bne.n	8007e4c <osDelay+0x3c>
    stat = osErrorISR;
 8007e44:	f06f 0305 	mvn.w	r3, #5
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	e007      	b.n	8007e5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fce4 	bl	8009824 <vTaskDelay>
    }
  }

  return (stat);
 8007e5c:	697b      	ldr	r3, [r7, #20]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200003c8 	.word	0x200003c8

08007e6c <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f002 ffdb 	bl	800ae30 <pvTimerGetTimerID>
 8007e7a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <TimerCallback+0x22>
    callb->func (callb->arg);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	6852      	ldr	r2, [r2, #4]
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4798      	blx	r3
  }
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	; 0x38
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	607a      	str	r2, [r7, #4]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eac:	f3ef 8305 	mrs	r3, IPSR
 8007eb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007eb2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d16a      	bne.n	8007f8e <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <osTimerNew+0x40>
 8007ed0:	4b31      	ldr	r3, [pc, #196]	; (8007f98 <osTimerNew+0x100>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d05a      	beq.n	8007f8e <osTimerNew+0xf6>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d057      	beq.n	8007f8e <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007ede:	2008      	movs	r0, #8
 8007ee0:	f003 fa9a 	bl	800b418 <pvPortMalloc>
 8007ee4:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d050      	beq.n	8007f8e <osTimerNew+0xf6>
      callb->func = func;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <osTimerNew+0x6c>
        reload = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e001      	b.n	8007f08 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8007f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f0c:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01c      	beq.n	8007f52 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <osTimerNew+0x8e>
          name = attr->name;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d006      	beq.n	8007f3c <osTimerNew+0xa4>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b2b      	cmp	r3, #43	; 0x2b
 8007f34:	d902      	bls.n	8007f3c <osTimerNew+0xa4>
          mem = 1;
 8007f36:	2301      	movs	r3, #1
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e00c      	b.n	8007f56 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d108      	bne.n	8007f56 <osTimerNew+0xbe>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <osTimerNew+0xbe>
            mem = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	623b      	str	r3, [r7, #32]
 8007f50:	e001      	b.n	8007f56 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d10c      	bne.n	8007f76 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <osTimerNew+0x104>)
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f6e:	f002 fbe2 	bl	800a736 <xTimerCreateStatic>
 8007f72:	62b8      	str	r0, [r7, #40]	; 0x28
 8007f74:	e00b      	b.n	8007f8e <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <osTimerNew+0x104>)
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f84:	2101      	movs	r1, #1
 8007f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f88:	f002 fbb4 	bl	800a6f4 <xTimerCreate>
 8007f8c:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3730      	adds	r7, #48	; 0x30
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	200003c8 	.word	0x200003c8
 8007f9c:	08007e6d 	.word	0x08007e6d

08007fa0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	; 0x28
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fae:	f3ef 8305 	mrs	r3, IPSR
 8007fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8007fb4:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10f      	bne.n	8007fda <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fba:	f3ef 8310 	mrs	r3, PRIMASK
 8007fbe:	613b      	str	r3, [r7, #16]
  return(result);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d105      	bne.n	8007fd2 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <osTimerStart+0x42>
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <osTimerStart+0x7c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d103      	bne.n	8007fe2 <osTimerStart+0x42>
    stat = osErrorISR;
 8007fda:	f06f 0305 	mvn.w	r3, #5
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	e017      	b.n	8008012 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <osTimerStart+0x50>
    stat = osErrorParameter;
 8007fe8:	f06f 0303 	mvn.w	r3, #3
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	e010      	b.n	8008012 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	69b8      	ldr	r0, [r7, #24]
 8007ffc:	f002 fc14 	bl	800a828 <xTimerGenericCommand>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	d102      	bne.n	800800c <osTimerStart+0x6c>
      stat = osOK;
 8008006:	2300      	movs	r3, #0
 8008008:	61fb      	str	r3, [r7, #28]
 800800a:	e002      	b.n	8008012 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800800c:	f06f 0302 	mvn.w	r3, #2
 8008010:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008012:	69fb      	ldr	r3, [r7, #28]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	200003c8 	.word	0x200003c8

08008020 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008020:	b580      	push	{r7, lr}
 8008022:	b08c      	sub	sp, #48	; 0x30
 8008024:	af02      	add	r7, sp, #8
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008030:	f3ef 8305 	mrs	r3, IPSR
 8008034:	61bb      	str	r3, [r7, #24]
  return(result);
 8008036:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8086 	bne.w	800814a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	617b      	str	r3, [r7, #20]
  return(result);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800804a:	f3ef 8311 	mrs	r3, BASEPRI
 800804e:	613b      	str	r3, [r7, #16]
  return(result);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <osSemaphoreNew+0x3e>
 8008056:	4b3f      	ldr	r3, [pc, #252]	; (8008154 <osSemaphoreNew+0x134>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d075      	beq.n	800814a <osSemaphoreNew+0x12a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d072      	beq.n	800814a <osSemaphoreNew+0x12a>
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d86e      	bhi.n	800814a <osSemaphoreNew+0x12a>
    mem = -1;
 800806c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008070:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d015      	beq.n	80080a4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <osSemaphoreNew+0x6e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	2b4f      	cmp	r3, #79	; 0x4f
 8008086:	d902      	bls.n	800808e <osSemaphoreNew+0x6e>
        mem = 1;
 8008088:	2301      	movs	r3, #1
 800808a:	623b      	str	r3, [r7, #32]
 800808c:	e00c      	b.n	80080a8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <osSemaphoreNew+0x88>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <osSemaphoreNew+0x88>
          mem = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	e001      	b.n	80080a8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ae:	d04c      	beq.n	800814a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d128      	bne.n	8008108 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10a      	bne.n	80080d2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2203      	movs	r2, #3
 80080c2:	9200      	str	r2, [sp, #0]
 80080c4:	2200      	movs	r2, #0
 80080c6:	2100      	movs	r1, #0
 80080c8:	2001      	movs	r0, #1
 80080ca:	f000 fa4d 	bl	8008568 <xQueueGenericCreateStatic>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24
 80080d0:	e005      	b.n	80080de <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80080d2:	2203      	movs	r2, #3
 80080d4:	2100      	movs	r1, #0
 80080d6:	2001      	movs	r0, #1
 80080d8:	f000 fabe 	bl	8008658 <xQueueGenericCreate>
 80080dc:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d022      	beq.n	800812a <osSemaphoreNew+0x10a>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01f      	beq.n	800812a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	2100      	movs	r1, #0
 80080f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080f2:	f000 fb7f 	bl	80087f4 <xQueueGenericSend>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d016      	beq.n	800812a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80080fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080fe:	f001 f809 	bl	8009114 <vQueueDelete>
            hSemaphore = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
 8008106:	e010      	b.n	800812a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d108      	bne.n	8008120 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	461a      	mov	r2, r3
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fb01 	bl	800871e <xQueueCreateCountingSemaphoreStatic>
 800811c:	6278      	str	r0, [r7, #36]	; 0x24
 800811e:	e004      	b.n	800812a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fb32 	bl	800878c <xQueueCreateCountingSemaphore>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <osSemaphoreNew+0x11e>
          name = attr->name;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	61fb      	str	r3, [r7, #28]
 800813c:	e001      	b.n	8008142 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008142:	69f9      	ldr	r1, [r7, #28]
 8008144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008146:	f001 f92f 	bl	80093a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800814c:	4618      	mov	r0, r3
 800814e:	3728      	adds	r7, #40	; 0x28
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	200003c8 	.word	0x200003c8

08008158 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008170:	f06f 0303 	mvn.w	r3, #3
 8008174:	61fb      	str	r3, [r7, #28]
 8008176:	e04b      	b.n	8008210 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008178:	f3ef 8305 	mrs	r3, IPSR
 800817c:	617b      	str	r3, [r7, #20]
  return(result);
 800817e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10f      	bne.n	80081a4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008184:	f3ef 8310 	mrs	r3, PRIMASK
 8008188:	613b      	str	r3, [r7, #16]
  return(result);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008190:	f3ef 8311 	mrs	r3, BASEPRI
 8008194:	60fb      	str	r3, [r7, #12]
  return(result);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d026      	beq.n	80081ea <osSemaphoreAcquire+0x92>
 800819c:	4b1f      	ldr	r3, [pc, #124]	; (800821c <osSemaphoreAcquire+0xc4>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d122      	bne.n	80081ea <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80081aa:	f06f 0303 	mvn.w	r3, #3
 80081ae:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80081b0:	e02d      	b.n	800820e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80081b6:	f107 0308 	add.w	r3, r7, #8
 80081ba:	461a      	mov	r2, r3
 80081bc:	2100      	movs	r1, #0
 80081be:	69b8      	ldr	r0, [r7, #24]
 80081c0:	f000 ff28 	bl	8009014 <xQueueReceiveFromISR>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d003      	beq.n	80081d2 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80081ca:	f06f 0302 	mvn.w	r3, #2
 80081ce:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80081d0:	e01d      	b.n	800820e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <osSemaphoreAcquire+0xb6>
 80081d8:	4b11      	ldr	r3, [pc, #68]	; (8008220 <osSemaphoreAcquire+0xc8>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80081e8:	e011      	b.n	800820e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	69b8      	ldr	r0, [r7, #24]
 80081ee:	f000 fe05 	bl	8008dfc <xQueueSemaphoreTake>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d00b      	beq.n	8008210 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80081fe:	f06f 0301 	mvn.w	r3, #1
 8008202:	61fb      	str	r3, [r7, #28]
 8008204:	e004      	b.n	8008210 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008206:	f06f 0302 	mvn.w	r3, #2
 800820a:	61fb      	str	r3, [r7, #28]
 800820c:	e000      	b.n	8008210 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800820e:	bf00      	nop
      }
    }
  }

  return (stat);
 8008210:	69fb      	ldr	r3, [r7, #28]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	200003c8 	.word	0x200003c8
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d103      	bne.n	8008242 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800823a:	f06f 0303 	mvn.w	r3, #3
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	e03e      	b.n	80082c0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008242:	f3ef 8305 	mrs	r3, IPSR
 8008246:	617b      	str	r3, [r7, #20]
  return(result);
 8008248:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10f      	bne.n	800826e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824e:	f3ef 8310 	mrs	r3, PRIMASK
 8008252:	613b      	str	r3, [r7, #16]
  return(result);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800825a:	f3ef 8311 	mrs	r3, BASEPRI
 800825e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01e      	beq.n	80082a4 <osSemaphoreRelease+0x80>
 8008266:	4b19      	ldr	r3, [pc, #100]	; (80082cc <osSemaphoreRelease+0xa8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d11a      	bne.n	80082a4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800826e:	2300      	movs	r3, #0
 8008270:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4619      	mov	r1, r3
 8008278:	69b8      	ldr	r0, [r7, #24]
 800827a:	f000 fc51 	bl	8008b20 <xQueueGiveFromISR>
 800827e:	4603      	mov	r3, r0
 8008280:	2b01      	cmp	r3, #1
 8008282:	d003      	beq.n	800828c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008284:	f06f 0302 	mvn.w	r3, #2
 8008288:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800828a:	e018      	b.n	80082be <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d015      	beq.n	80082be <osSemaphoreRelease+0x9a>
 8008292:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <osSemaphoreRelease+0xac>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80082a2:	e00c      	b.n	80082be <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082a4:	2300      	movs	r3, #0
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	69b8      	ldr	r0, [r7, #24]
 80082ac:	f000 faa2 	bl	80087f4 <xQueueGenericSend>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d004      	beq.n	80082c0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80082b6:	f06f 0302 	mvn.w	r3, #2
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	e000      	b.n	80082c0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80082be:	bf00      	nop
    }
  }

  return (stat);
 80082c0:	69fb      	ldr	r3, [r7, #28]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3720      	adds	r7, #32
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	200003c8 	.word	0x200003c8
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4a06      	ldr	r2, [pc, #24]	; (80082fc <vApplicationGetIdleTaskMemory+0x28>)
 80082e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4a05      	ldr	r2, [pc, #20]	; (8008300 <vApplicationGetIdleTaskMemory+0x2c>)
 80082ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bc80      	pop	{r7}
 80082fa:	4770      	bx	lr
 80082fc:	200003cc 	.word	0x200003cc
 8008300:	20000488 	.word	0x20000488

08008304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4a07      	ldr	r2, [pc, #28]	; (8008330 <vApplicationGetTimerTaskMemory+0x2c>)
 8008314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	4a06      	ldr	r2, [pc, #24]	; (8008334 <vApplicationGetTimerTaskMemory+0x30>)
 800831a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	bc80      	pop	{r7}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000688 	.word	0x20000688
 8008334:	20000744 	.word	0x20000744

08008338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f103 0208 	add.w	r2, r3, #8
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f103 0208 	add.w	r2, r3, #8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr

08008376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr

0800838e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
}
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ea:	d103      	bne.n	80083f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	e00c      	b.n	800840e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3308      	adds	r3, #8
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	e002      	b.n	8008402 <vListInsert+0x2e>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	429a      	cmp	r2, r3
 800840c:	d2f6      	bcs.n	80083fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6892      	ldr	r2, [r2, #8]
 800845a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6852      	ldr	r2, [r2, #4]
 8008464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	429a      	cmp	r2, r3
 800846e:	d103      	bne.n	8008478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	1e5a      	subs	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	bc80      	pop	{r7}
 8008494:	4770      	bx	lr
	...

08008498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084c2:	f002 fdc3 	bl	800b04c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	3b01      	subs	r3, #1
 80084f4:	68f9      	ldr	r1, [r7, #12]
 80084f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	441a      	add	r2, r3
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	22ff      	movs	r2, #255	; 0xff
 800850e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d114      	bne.n	8008542 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01a      	beq.n	8008556 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3310      	adds	r3, #16
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fca5 	bl	8009e74 <xTaskRemoveFromEventList>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d012      	beq.n	8008556 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <xQueueGenericReset+0xcc>)
 8008532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	e009      	b.n	8008556 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3310      	adds	r3, #16
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fef6 	bl	8008338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3324      	adds	r3, #36	; 0x24
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fef1 	bl	8008338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008556:	f002 fda9 	bl	800b0ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800855a:	2301      	movs	r3, #1
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	e000ed04 	.word	0xe000ed04

08008568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10a      	bne.n	80085ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859c:	f383 8811 	msr	BASEPRI, r3
 80085a0:	f3bf 8f6f 	isb	sy
 80085a4:	f3bf 8f4f 	dsb	sy
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <xQueueGenericCreateStatic+0x52>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <xQueueGenericCreateStatic+0x56>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueGenericCreateStatic+0x58>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	623b      	str	r3, [r7, #32]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <xQueueGenericCreateStatic+0x7e>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <xQueueGenericCreateStatic+0x82>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <xQueueGenericCreateStatic+0x84>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	61fb      	str	r3, [r7, #28]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008606:	2350      	movs	r3, #80	; 0x50
 8008608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b50      	cmp	r3, #80	; 0x50
 800860e:	d00a      	beq.n	8008626 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008626:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800863a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800863e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	4613      	mov	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	68b9      	ldr	r1, [r7, #8]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f845 	bl	80086d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008650:	4618      	mov	r0, r3
 8008652:	3730      	adds	r7, #48	; 0x30
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	; 0x28
 800865c:	af02      	add	r7, sp, #8
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10a      	bne.n	8008682 <xQueueGenericCreate+0x2a>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	613b      	str	r3, [r7, #16]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e004      	b.n	8008698 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	fb02 f303 	mul.w	r3, r2, r3
 8008696:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	3350      	adds	r3, #80	; 0x50
 800869c:	4618      	mov	r0, r3
 800869e:	f002 febb 	bl	800b418 <pvPortMalloc>
 80086a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d011      	beq.n	80086ce <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086aa:	69bb      	ldr	r3, [r7, #24]
 80086ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	3350      	adds	r3, #80	; 0x50
 80086b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086bc:	79fa      	ldrb	r2, [r7, #7]
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	68b9      	ldr	r1, [r7, #8]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f805 	bl	80086d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086ce:	69bb      	ldr	r3, [r7, #24]
	}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3720      	adds	r7, #32
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
 80086e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	e002      	b.n	80086fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008706:	2101      	movs	r1, #1
 8008708:	69b8      	ldr	r0, [r7, #24]
 800870a:	f7ff fec5 	bl	8008498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800871e:	b580      	push	{r7, lr}
 8008720:	b08a      	sub	sp, #40	; 0x28
 8008722:	af02      	add	r7, sp, #8
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61bb      	str	r3, [r7, #24]
}
 8008742:	bf00      	nop
 8008744:	e7fe      	b.n	8008744 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	429a      	cmp	r2, r3
 800874c:	d90a      	bls.n	8008764 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	617b      	str	r3, [r7, #20]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008764:	2302      	movs	r3, #2
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fefa 	bl	8008568 <xQueueGenericCreateStatic>
 8008774:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008782:	69fb      	ldr	r3, [r7, #28]
	}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	613b      	str	r3, [r7, #16]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d90a      	bls.n	80087d0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	60fb      	str	r3, [r7, #12]
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087d0:	2202      	movs	r2, #2
 80087d2:	2100      	movs	r1, #0
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ff3f 	bl	8008658 <xQueueGenericCreate>
 80087da:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80087e8:	697b      	ldr	r3, [r7, #20]
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08e      	sub	sp, #56	; 0x38
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008802:	2300      	movs	r3, #0
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <xQueueGenericSend+0x32>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <xQueueGenericSend+0x40>
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <xQueueGenericSend+0x44>
 8008834:	2301      	movs	r3, #1
 8008836:	e000      	b.n	800883a <xQueueGenericSend+0x46>
 8008838:	2300      	movs	r3, #0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10a      	bne.n	8008854 <xQueueGenericSend+0x60>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008850:	bf00      	nop
 8008852:	e7fe      	b.n	8008852 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b02      	cmp	r3, #2
 8008858:	d103      	bne.n	8008862 <xQueueGenericSend+0x6e>
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885e:	2b01      	cmp	r3, #1
 8008860:	d101      	bne.n	8008866 <xQueueGenericSend+0x72>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <xQueueGenericSend+0x74>
 8008866:	2300      	movs	r3, #0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <xQueueGenericSend+0x8e>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	623b      	str	r3, [r7, #32]
}
 800887e:	bf00      	nop
 8008880:	e7fe      	b.n	8008880 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008882:	f001 fd11 	bl	800a2a8 <xTaskGetSchedulerState>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <xQueueGenericSend+0x9e>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <xQueueGenericSend+0xa2>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueGenericSend+0xa4>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61fb      	str	r3, [r7, #28]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088b2:	f002 fbcb 	bl	800b04c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088be:	429a      	cmp	r2, r3
 80088c0:	d302      	bcc.n	80088c8 <xQueueGenericSend+0xd4>
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d129      	bne.n	800891c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ce:	f000 fc5b 	bl	8009188 <prvCopyDataToQueue>
 80088d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	3324      	adds	r3, #36	; 0x24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fac7 	bl	8009e74 <xTaskRemoveFromEventList>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d013      	beq.n	8008914 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088ec:	4b3f      	ldr	r3, [pc, #252]	; (80089ec <xQueueGenericSend+0x1f8>)
 80088ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	e00a      	b.n	8008914 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008904:	4b39      	ldr	r3, [pc, #228]	; (80089ec <xQueueGenericSend+0x1f8>)
 8008906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890a:	601a      	str	r2, [r3, #0]
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008914:	f002 fbca 	bl	800b0ac <vPortExitCritical>
				return pdPASS;
 8008918:	2301      	movs	r3, #1
 800891a:	e063      	b.n	80089e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008922:	f002 fbc3 	bl	800b0ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008926:	2300      	movs	r3, #0
 8008928:	e05c      	b.n	80089e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	2b00      	cmp	r3, #0
 800892e:	d106      	bne.n	800893e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fb03 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800893a:	2301      	movs	r3, #1
 800893c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800893e:	f002 fbb5 	bl	800b0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008942:	f001 f813 	bl	800996c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008946:	f002 fb81 	bl	800b04c <vPortEnterCritical>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008950:	b25b      	sxtb	r3, r3
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008956:	d103      	bne.n	8008960 <xQueueGenericSend+0x16c>
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008966:	b25b      	sxtb	r3, r3
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800896c:	d103      	bne.n	8008976 <xQueueGenericSend+0x182>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008976:	f002 fb99 	bl	800b0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800897a:	1d3a      	adds	r2, r7, #4
 800897c:	f107 0314 	add.w	r3, r7, #20
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f001 faf2 	bl	8009f6c <xTaskCheckForTimeOut>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d124      	bne.n	80089d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800898e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008990:	f000 fcf2 	bl	8009378 <prvIsQueueFull>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d018      	beq.n	80089cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	3310      	adds	r3, #16
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 fa16 	bl	8009dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089aa:	f000 fc7d 	bl	80092a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089ae:	f001 f821 	bl	80099f4 <xTaskResumeAll>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f47f af7c 	bne.w	80088b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089ba:	4b0c      	ldr	r3, [pc, #48]	; (80089ec <xQueueGenericSend+0x1f8>)
 80089bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	e772      	b.n	80088b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ce:	f000 fc6b 	bl	80092a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d2:	f001 f80f 	bl	80099f4 <xTaskResumeAll>
 80089d6:	e76c      	b.n	80088b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089da:	f000 fc65 	bl	80092a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089de:	f001 f809 	bl	80099f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3738      	adds	r7, #56	; 0x38
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08e      	sub	sp, #56	; 0x38
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10a      	bne.n	8008a1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d103      	bne.n	8008a2c <xQueueGenericSendFromISR+0x3c>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <xQueueGenericSendFromISR+0x40>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <xQueueGenericSendFromISR+0x42>
 8008a30:	2300      	movs	r3, #0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	623b      	str	r3, [r7, #32]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d103      	bne.n	8008a5a <xQueueGenericSendFromISR+0x6a>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <xQueueGenericSendFromISR+0x6e>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <xQueueGenericSendFromISR+0x70>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	61fb      	str	r3, [r7, #28]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a7a:	f002 fc8f 	bl	800b39c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61ba      	str	r2, [r7, #24]
 8008a94:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a96:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d302      	bcc.n	8008aac <xQueueGenericSendFromISR+0xbc>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d12c      	bne.n	8008b06 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008abc:	f000 fb64 	bl	8009188 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ac0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ac8:	d112      	bne.n	8008af0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d016      	beq.n	8008b00 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	3324      	adds	r3, #36	; 0x24
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f9cc 	bl	8009e74 <xTaskRemoveFromEventList>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	e007      	b.n	8008b00 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008af4:	3301      	adds	r3, #1
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	b25a      	sxtb	r2, r3
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b00:	2301      	movs	r3, #1
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b04:	e001      	b.n	8008b0a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	637b      	str	r3, [r7, #52]	; 0x34
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3738      	adds	r7, #56	; 0x38
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08e      	sub	sp, #56	; 0x38
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	623b      	str	r3, [r7, #32]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	61fb      	str	r3, [r7, #28]
}
 8008b64:	bf00      	nop
 8008b66:	e7fe      	b.n	8008b66 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d103      	bne.n	8008b78 <xQueueGiveFromISR+0x58>
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <xQueueGiveFromISR+0x5c>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <xQueueGiveFromISR+0x5e>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	61bb      	str	r3, [r7, #24]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b98:	f002 fc00 	bl	800b39c <vPortValidateInterruptPriority>
	__asm volatile
 8008b9c:	f3ef 8211 	mrs	r2, BASEPRI
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	617a      	str	r2, [r7, #20]
 8008bb2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008bb4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d22b      	bcs.n	8008c20 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be2:	d112      	bne.n	8008c0a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d016      	beq.n	8008c1a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	3324      	adds	r3, #36	; 0x24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f001 f93f 	bl	8009e74 <xTaskRemoveFromEventList>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00e      	beq.n	8008c1a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	e007      	b.n	8008c1a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c0e:	3301      	adds	r3, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	b25a      	sxtb	r2, r3
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	e001      	b.n	8008c24 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c20:	2300      	movs	r3, #0
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f383 8811 	msr	BASEPRI, r3
}
 8008c2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3738      	adds	r7, #56	; 0x38
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <xQueueReceive+0x30>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	623b      	str	r3, [r7, #32]
}
 8008c68:	bf00      	nop
 8008c6a:	e7fe      	b.n	8008c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d103      	bne.n	8008c7a <xQueueReceive+0x3e>
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <xQueueReceive+0x42>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <xQueueReceive+0x44>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueReceive+0x5e>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	61fb      	str	r3, [r7, #28]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c9a:	f001 fb05 	bl	800a2a8 <xTaskGetSchedulerState>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d102      	bne.n	8008caa <xQueueReceive+0x6e>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <xQueueReceive+0x72>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <xQueueReceive+0x74>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xQueueReceive+0x8e>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	61bb      	str	r3, [r7, #24]
}
 8008cc6:	bf00      	nop
 8008cc8:	e7fe      	b.n	8008cc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cca:	f002 f9bf 	bl	800b04c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01f      	beq.n	8008d1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cde:	f000 fabd 	bl	800925c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00f      	beq.n	8008d12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	3310      	adds	r3, #16
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 f8bc 	bl	8009e74 <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d02:	4b3d      	ldr	r3, [pc, #244]	; (8008df8 <xQueueReceive+0x1bc>)
 8008d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d12:	f002 f9cb 	bl	800b0ac <vPortExitCritical>
				return pdPASS;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e069      	b.n	8008dee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d20:	f002 f9c4 	bl	800b0ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e062      	b.n	8008dee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d2e:	f107 0310 	add.w	r3, r7, #16
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f904 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d3c:	f002 f9b6 	bl	800b0ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d40:	f000 fe14 	bl	800996c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d44:	f002 f982 	bl	800b04c <vPortEnterCritical>
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d54:	d103      	bne.n	8008d5e <xQueueReceive+0x122>
 8008d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d6a:	d103      	bne.n	8008d74 <xQueueReceive+0x138>
 8008d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d74:	f002 f99a 	bl	800b0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d78:	1d3a      	adds	r2, r7, #4
 8008d7a:	f107 0310 	add.w	r3, r7, #16
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 f8f3 	bl	8009f6c <xTaskCheckForTimeOut>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d123      	bne.n	8008dd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d8e:	f000 fadd 	bl	800934c <prvIsQueueEmpty>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d017      	beq.n	8008dc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	3324      	adds	r3, #36	; 0x24
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 f817 	bl	8009dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da8:	f000 fa7e 	bl	80092a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dac:	f000 fe22 	bl	80099f4 <xTaskResumeAll>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d189      	bne.n	8008cca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008db6:	4b10      	ldr	r3, [pc, #64]	; (8008df8 <xQueueReceive+0x1bc>)
 8008db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	e780      	b.n	8008cca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dca:	f000 fa6d 	bl	80092a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dce:	f000 fe11 	bl	80099f4 <xTaskResumeAll>
 8008dd2:	e77a      	b.n	8008cca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dd6:	f000 fa67 	bl	80092a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dda:	f000 fe0b 	bl	80099f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de0:	f000 fab4 	bl	800934c <prvIsQueueEmpty>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f43f af6f 	beq.w	8008cca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3730      	adds	r7, #48	; 0x30
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08e      	sub	sp, #56	; 0x38
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e06:	2300      	movs	r3, #0
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10a      	bne.n	8008e2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	623b      	str	r3, [r7, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	e7fe      	b.n	8008e2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	61fb      	str	r3, [r7, #28]
}
 8008e48:	bf00      	nop
 8008e4a:	e7fe      	b.n	8008e4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e4c:	f001 fa2c 	bl	800a2a8 <xTaskGetSchedulerState>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <xQueueSemaphoreTake+0x60>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <xQueueSemaphoreTake+0x64>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <xQueueSemaphoreTake+0x66>
 8008e60:	2300      	movs	r3, #0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	61bb      	str	r3, [r7, #24]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e7c:	f002 f8e6 	bl	800b04c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d024      	beq.n	8008ed6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e9c:	f001 fb7a 	bl	800a594 <pvTaskIncrementMutexHeldCount>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00f      	beq.n	8008ece <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	3310      	adds	r3, #16
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 ffde 	bl	8009e74 <xTaskRemoveFromEventList>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ebe:	4b54      	ldr	r3, [pc, #336]	; (8009010 <xQueueSemaphoreTake+0x214>)
 8008ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ece:	f002 f8ed 	bl	800b0ac <vPortExitCritical>
				return pdPASS;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e097      	b.n	8009006 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d111      	bne.n	8008f00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	617b      	str	r3, [r7, #20]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ef8:	f002 f8d8 	bl	800b0ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008efc:	2300      	movs	r3, #0
 8008efe:	e082      	b.n	8009006 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f06:	f107 030c 	add.w	r3, r7, #12
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 f818 	bl	8009f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f14:	f002 f8ca 	bl	800b0ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f18:	f000 fd28 	bl	800996c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1c:	f002 f896 	bl	800b04c <vPortEnterCritical>
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2c:	d103      	bne.n	8008f36 <xQueueSemaphoreTake+0x13a>
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3c:	b25b      	sxtb	r3, r3
 8008f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f42:	d103      	bne.n	8008f4c <xQueueSemaphoreTake+0x150>
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f4c:	f002 f8ae 	bl	800b0ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f50:	463a      	mov	r2, r7
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 f807 	bl	8009f6c <xTaskCheckForTimeOut>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d132      	bne.n	8008fca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f66:	f000 f9f1 	bl	800934c <prvIsQueueEmpty>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d026      	beq.n	8008fbe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008f78:	f002 f868 	bl	800b04c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f9af 	bl	800a2e4 <xTaskPriorityInherit>
 8008f86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f88:	f002 f890 	bl	800b0ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	3324      	adds	r3, #36	; 0x24
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	4611      	mov	r1, r2
 8008f94:	4618      	mov	r0, r3
 8008f96:	f000 ff1d 	bl	8009dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f9c:	f000 f984 	bl	80092a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008fa0:	f000 fd28 	bl	80099f4 <xTaskResumeAll>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f47f af68 	bne.w	8008e7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <xQueueSemaphoreTake+0x214>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	e75e      	b.n	8008e7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc0:	f000 f972 	bl	80092a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fc4:	f000 fd16 	bl	80099f4 <xTaskResumeAll>
 8008fc8:	e758      	b.n	8008e7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fcc:	f000 f96c 	bl	80092a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fd0:	f000 fd10 	bl	80099f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fd6:	f000 f9b9 	bl	800934c <prvIsQueueEmpty>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f43f af4d 	beq.w	8008e7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00d      	beq.n	8009004 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008fe8:	f002 f830 	bl	800b04c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fee:	f000 f8b4 	bl	800915a <prvGetDisinheritPriorityAfterTimeout>
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 fa48 	bl	800a490 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009000:	f002 f854 	bl	800b0ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009006:	4618      	mov	r0, r3
 8009008:	3738      	adds	r7, #56	; 0x38
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08e      	sub	sp, #56	; 0x38
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	2b00      	cmp	r3, #0
 8009028:	d10a      	bne.n	8009040 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	623b      	str	r3, [r7, #32]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <xQueueReceiveFromISR+0x3a>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <xQueueReceiveFromISR+0x3e>
 800904e:	2301      	movs	r3, #1
 8009050:	e000      	b.n	8009054 <xQueueReceiveFromISR+0x40>
 8009052:	2300      	movs	r3, #0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	61fb      	str	r3, [r7, #28]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800906e:	f002 f995 	bl	800b39c <vPortValidateInterruptPriority>
	__asm volatile
 8009072:	f3ef 8211 	mrs	r2, BASEPRI
 8009076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	61ba      	str	r2, [r7, #24]
 8009088:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800908a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800908c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02f      	beq.n	80090fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a8:	f000 f8d8 	bl	800925c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	1e5a      	subs	r2, r3, #1
 80090b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80090b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090bc:	d112      	bne.n	80090e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d016      	beq.n	80090f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	3310      	adds	r3, #16
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fed2 	bl	8009e74 <xTaskRemoveFromEventList>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00e      	beq.n	80090f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e007      	b.n	80090f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80090e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090e8:	3301      	adds	r3, #1
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	b25a      	sxtb	r2, r3
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80090f4:	2301      	movs	r3, #1
 80090f6:	637b      	str	r3, [r7, #52]	; 0x34
 80090f8:	e001      	b.n	80090fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	637b      	str	r3, [r7, #52]	; 0x34
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f383 8811 	msr	BASEPRI, r3
}
 8009108:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800910c:	4618      	mov	r0, r3
 800910e:	3738      	adds	r7, #56	; 0x38
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <vQueueDelete+0x28>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f95b 	bl	80093f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009148:	2b00      	cmp	r3, #0
 800914a:	d102      	bne.n	8009152 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f002 fa27 	bl	800b5a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	2b00      	cmp	r3, #0
 8009168:	d006      	beq.n	8009178 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e001      	b.n	800917c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800917c:	68fb      	ldr	r3, [r7, #12]
	}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr

08009188 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10d      	bne.n	80091c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d14d      	bne.n	800924a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 f8fe 	bl	800a3b4 <xTaskPriorityDisinherit>
 80091b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	e043      	b.n	800924a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d119      	bne.n	80091fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6858      	ldr	r0, [r3, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	461a      	mov	r2, r3
 80091d2:	68b9      	ldr	r1, [r7, #8]
 80091d4:	f005 fffe 	bl	800f1d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d32b      	bcc.n	800924a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	605a      	str	r2, [r3, #4]
 80091fa:	e026      	b.n	800924a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	68d8      	ldr	r0, [r3, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	461a      	mov	r2, r3
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	f005 ffe4 	bl	800f1d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009214:	425b      	negs	r3, r3
 8009216:	441a      	add	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d207      	bcs.n	8009238 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	425b      	negs	r3, r3
 8009232:	441a      	add	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b02      	cmp	r3, #2
 800923c:	d105      	bne.n	800924a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	3b01      	subs	r3, #1
 8009248:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009252:	697b      	ldr	r3, [r7, #20]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926a:	2b00      	cmp	r3, #0
 800926c:	d018      	beq.n	80092a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	441a      	add	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68da      	ldr	r2, [r3, #12]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	429a      	cmp	r2, r3
 8009286:	d303      	bcc.n	8009290 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68d9      	ldr	r1, [r3, #12]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	461a      	mov	r2, r3
 800929a:	6838      	ldr	r0, [r7, #0]
 800929c:	f005 ff9a 	bl	800f1d4 <memcpy>
	}
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092b0:	f001 fecc 	bl	800b04c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092bc:	e011      	b.n	80092e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d012      	beq.n	80092ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3324      	adds	r3, #36	; 0x24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fdd2 	bl	8009e74 <xTaskRemoveFromEventList>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092d6:	f000 feab 	bl	800a030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	3b01      	subs	r3, #1
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	dce9      	bgt.n	80092be <prvUnlockQueue+0x16>
 80092ea:	e000      	b.n	80092ee <prvUnlockQueue+0x46>
					break;
 80092ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	22ff      	movs	r2, #255	; 0xff
 80092f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092f6:	f001 fed9 	bl	800b0ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092fa:	f001 fea7 	bl	800b04c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009304:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009306:	e011      	b.n	800932c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d012      	beq.n	8009336 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3310      	adds	r3, #16
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fdad 	bl	8009e74 <xTaskRemoveFromEventList>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009320:	f000 fe86 	bl	800a030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	3b01      	subs	r3, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800932c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009330:	2b00      	cmp	r3, #0
 8009332:	dce9      	bgt.n	8009308 <prvUnlockQueue+0x60>
 8009334:	e000      	b.n	8009338 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009336:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	22ff      	movs	r2, #255	; 0xff
 800933c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009340:	f001 feb4 	bl	800b0ac <vPortExitCritical>
}
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009354:	f001 fe7a 	bl	800b04c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	e001      	b.n	800936a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800936a:	f001 fe9f 	bl	800b0ac <vPortExitCritical>

	return xReturn;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009380:	f001 fe64 	bl	800b04c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938c:	429a      	cmp	r2, r3
 800938e:	d102      	bne.n	8009396 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009390:	2301      	movs	r3, #1
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e001      	b.n	800939a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800939a:	f001 fe87 	bl	800b0ac <vPortExitCritical>

	return xReturn;
 800939e:	68fb      	ldr	r3, [r7, #12]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	e014      	b.n	80093e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093b8:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <vQueueAddToRegistry+0x4c>)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10b      	bne.n	80093dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093c4:	490b      	ldr	r1, [pc, #44]	; (80093f4 <vQueueAddToRegistry+0x4c>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <vQueueAddToRegistry+0x4c>)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	4413      	add	r3, r2
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093da:	e006      	b.n	80093ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b07      	cmp	r3, #7
 80093e6:	d9e7      	bls.n	80093b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bc80      	pop	{r7}
 80093f2:	4770      	bx	lr
 80093f4:	200028e4 	.word	0x200028e4

080093f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e016      	b.n	8009434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009406:	4a10      	ldr	r2, [pc, #64]	; (8009448 <vQueueUnregisterQueue+0x50>)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	429a      	cmp	r2, r3
 8009414:	d10b      	bne.n	800942e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009416:	4a0c      	ldr	r2, [pc, #48]	; (8009448 <vQueueUnregisterQueue+0x50>)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2100      	movs	r1, #0
 800941c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009420:	4a09      	ldr	r2, [pc, #36]	; (8009448 <vQueueUnregisterQueue+0x50>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	4413      	add	r3, r2
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]
				break;
 800942c:	e006      	b.n	800943c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b07      	cmp	r3, #7
 8009438:	d9e5      	bls.n	8009406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	bc80      	pop	{r7}
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	200028e4 	.word	0x200028e4

0800944c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800945c:	f001 fdf6 	bl	800b04c <vPortEnterCritical>
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009466:	b25b      	sxtb	r3, r3
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800946c:	d103      	bne.n	8009476 <vQueueWaitForMessageRestricted+0x2a>
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947c:	b25b      	sxtb	r3, r3
 800947e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009482:	d103      	bne.n	800948c <vQueueWaitForMessageRestricted+0x40>
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800948c:	f001 fe0e 	bl	800b0ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fcbb 	bl	8009e1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094a6:	6978      	ldr	r0, [r7, #20]
 80094a8:	f7ff fefe 	bl	80092a8 <prvUnlockQueue>
	}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08e      	sub	sp, #56	; 0x38
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
 80094c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10a      	bne.n	80094de <xTaskCreateStatic+0x2a>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	623b      	str	r3, [r7, #32]
}
 80094da:	bf00      	nop
 80094dc:	e7fe      	b.n	80094dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <xTaskCreateStatic+0x46>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	61fb      	str	r3, [r7, #28]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094fa:	23bc      	movs	r3, #188	; 0xbc
 80094fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2bbc      	cmp	r3, #188	; 0xbc
 8009502:	d00a      	beq.n	800951a <xTaskCreateStatic+0x66>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	61bb      	str	r3, [r7, #24]
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800951a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01e      	beq.n	8009560 <xTaskCreateStatic+0xac>
 8009522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01b      	beq.n	8009560 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009530:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	2202      	movs	r2, #2
 8009536:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800953a:	2300      	movs	r3, #0
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	9302      	str	r3, [sp, #8]
 8009542:	f107 0314 	add.w	r3, r7, #20
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f850 	bl	80095f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800955a:	f000 f8f3 	bl	8009744 <prvAddNewTaskToReadyList>
 800955e:	e001      	b.n	8009564 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009564:	697b      	ldr	r3, [r7, #20]
	}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800956e:	b580      	push	{r7, lr}
 8009570:	b08c      	sub	sp, #48	; 0x30
 8009572:	af04      	add	r7, sp, #16
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	4613      	mov	r3, r2
 800957c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 ff48 	bl	800b418 <pvPortMalloc>
 8009588:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00e      	beq.n	80095ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009590:	20bc      	movs	r0, #188	; 0xbc
 8009592:	f001 ff41 	bl	800b418 <pvPortMalloc>
 8009596:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
 80095a4:	e005      	b.n	80095b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095a6:	6978      	ldr	r0, [r7, #20]
 80095a8:	f001 fffa 	bl	800b5a0 <vPortFree>
 80095ac:	e001      	b.n	80095b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d017      	beq.n	80095e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095c0:	88fa      	ldrh	r2, [r7, #6]
 80095c2:	2300      	movs	r3, #0
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 f80e 	bl	80095f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095dc:	69f8      	ldr	r0, [r7, #28]
 80095de:	f000 f8b1 	bl	8009744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095e2:	2301      	movs	r3, #1
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e002      	b.n	80095ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ee:	69bb      	ldr	r3, [r7, #24]
	}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	461a      	mov	r2, r3
 8009610:	21a5      	movs	r1, #165	; 0xa5
 8009612:	f005 fded 	bl	800f1f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009620:	3b01      	subs	r3, #1
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	f023 0307 	bic.w	r3, r3, #7
 800962e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <prvInitialiseNewTask+0x58>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	617b      	str	r3, [r7, #20]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d01f      	beq.n	8009696 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009656:	2300      	movs	r3, #0
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e012      	b.n	8009682 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	4413      	add	r3, r2
 8009662:	7819      	ldrb	r1, [r3, #0]
 8009664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	4413      	add	r3, r2
 800966a:	3334      	adds	r3, #52	; 0x34
 800966c:	460a      	mov	r2, r1
 800966e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	3301      	adds	r3, #1
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	2b0f      	cmp	r3, #15
 8009686:	d9e9      	bls.n	800965c <prvInitialiseNewTask+0x64>
 8009688:	e000      	b.n	800968c <prvInitialiseNewTask+0x94>
			{
				break;
 800968a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009694:	e003      	b.n	800969e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	2b37      	cmp	r3, #55	; 0x37
 80096a2:	d901      	bls.n	80096a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096a4:	2337      	movs	r3, #55	; 0x37
 80096a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	2200      	movs	r2, #0
 80096b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	3304      	adds	r3, #4
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fe59 	bl	8008376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c6:	3318      	adds	r3, #24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fe54 	bl	8008376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	3354      	adds	r3, #84	; 0x54
 80096f8:	2260      	movs	r2, #96	; 0x60
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f005 fd77 	bl	800f1f0 <memset>
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <prvInitialiseNewTask+0x140>)
 8009706:	659a      	str	r2, [r3, #88]	; 0x58
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	4a0c      	ldr	r2, [pc, #48]	; (800973c <prvInitialiseNewTask+0x144>)
 800970c:	65da      	str	r2, [r3, #92]	; 0x5c
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	4a0b      	ldr	r2, [pc, #44]	; (8009740 <prvInitialiseNewTask+0x148>)
 8009712:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	69b8      	ldr	r0, [r7, #24]
 800971a:	f001 fba9 	bl	800ae70 <pxPortInitialiseStack>
 800971e:	4602      	mov	r2, r0
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800972e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009730:	bf00      	nop
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0800ff94 	.word	0x0800ff94
 800973c:	0800ffb4 	.word	0x0800ffb4
 8009740:	0800ff74 	.word	0x0800ff74

08009744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800974c:	f001 fc7e 	bl	800b04c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009750:	4b2d      	ldr	r3, [pc, #180]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	4a2c      	ldr	r2, [pc, #176]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 8009758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800975a:	4b2c      	ldr	r3, [pc, #176]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009762:	4a2a      	ldr	r2, [pc, #168]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009768:	4b27      	ldr	r3, [pc, #156]	; (8009808 <prvAddNewTaskToReadyList+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d110      	bne.n	8009792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009770:	f000 fcd8 	bl	800a124 <prvInitialiseTaskLists>
 8009774:	e00d      	b.n	8009792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009776:	4b26      	ldr	r3, [pc, #152]	; (8009810 <prvAddNewTaskToReadyList+0xcc>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d109      	bne.n	8009792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800977e:	4b23      	ldr	r3, [pc, #140]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	429a      	cmp	r2, r3
 800978a:	d802      	bhi.n	8009792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800978c:	4a1f      	ldr	r2, [pc, #124]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009792:	4b20      	ldr	r3, [pc, #128]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3301      	adds	r3, #1
 8009798:	4a1e      	ldr	r2, [pc, #120]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 800979a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800979c:	4b1d      	ldr	r3, [pc, #116]	; (8009814 <prvAddNewTaskToReadyList+0xd0>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <prvAddNewTaskToReadyList+0xd4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <prvAddNewTaskToReadyList+0x74>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4a18      	ldr	r2, [pc, #96]	; (8009818 <prvAddNewTaskToReadyList+0xd4>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <prvAddNewTaskToReadyList+0xd8>)
 80097c6:	441a      	add	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fe fddd 	bl	800838e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097d4:	f001 fc6a 	bl	800b0ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097d8:	4b0d      	ldr	r3, [pc, #52]	; (8009810 <prvAddNewTaskToReadyList+0xcc>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00e      	beq.n	80097fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <prvAddNewTaskToReadyList+0xc8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d207      	bcs.n	80097fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097ee:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <prvAddNewTaskToReadyList+0xdc>)
 80097f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	f3bf 8f4f 	dsb	sy
 80097fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20001018 	.word	0x20001018
 800980c:	20000b44 	.word	0x20000b44
 8009810:	20001024 	.word	0x20001024
 8009814:	20001034 	.word	0x20001034
 8009818:	20001020 	.word	0x20001020
 800981c:	20000b48 	.word	0x20000b48
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d017      	beq.n	8009866 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <vTaskDelay+0x60>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00a      	beq.n	8009854 <vTaskDelay+0x30>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60bb      	str	r3, [r7, #8]
}
 8009850:	bf00      	nop
 8009852:	e7fe      	b.n	8009852 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009854:	f000 f88a 	bl	800996c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 feae 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009860:	f000 f8c8 	bl	80099f4 <xTaskResumeAll>
 8009864:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d107      	bne.n	800987c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <vTaskDelay+0x64>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20001040 	.word	0x20001040
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08a      	sub	sp, #40	; 0x28
 8009890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800989a:	463a      	mov	r2, r7
 800989c:	1d39      	adds	r1, r7, #4
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fe fd16 	bl	80082d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	9202      	str	r2, [sp, #8]
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	2300      	movs	r3, #0
 80098b8:	460a      	mov	r2, r1
 80098ba:	4924      	ldr	r1, [pc, #144]	; (800994c <vTaskStartScheduler+0xc0>)
 80098bc:	4824      	ldr	r0, [pc, #144]	; (8009950 <vTaskStartScheduler+0xc4>)
 80098be:	f7ff fdf9 	bl	80094b4 <xTaskCreateStatic>
 80098c2:	4603      	mov	r3, r0
 80098c4:	4a23      	ldr	r2, [pc, #140]	; (8009954 <vTaskStartScheduler+0xc8>)
 80098c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098c8:	4b22      	ldr	r3, [pc, #136]	; (8009954 <vTaskStartScheduler+0xc8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098d0:	2301      	movs	r3, #1
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	e001      	b.n	80098da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d102      	bne.n	80098e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098e0:	f000 fec0 	bl	800a664 <xTimerCreateTimerTask>
 80098e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d11b      	bne.n	8009924 <vTaskStartScheduler+0x98>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	613b      	str	r3, [r7, #16]
}
 80098fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009900:	4b15      	ldr	r3, [pc, #84]	; (8009958 <vTaskStartScheduler+0xcc>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	3354      	adds	r3, #84	; 0x54
 8009906:	4a15      	ldr	r2, [pc, #84]	; (800995c <vTaskStartScheduler+0xd0>)
 8009908:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800990a:	4b15      	ldr	r3, [pc, #84]	; (8009960 <vTaskStartScheduler+0xd4>)
 800990c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009910:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <vTaskStartScheduler+0xd8>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009918:	4b13      	ldr	r3, [pc, #76]	; (8009968 <vTaskStartScheduler+0xdc>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800991e:	f001 fb23 	bl	800af68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009922:	e00e      	b.n	8009942 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992a:	d10a      	bne.n	8009942 <vTaskStartScheduler+0xb6>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	60fb      	str	r3, [r7, #12]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <vTaskStartScheduler+0xb4>
}
 8009942:	bf00      	nop
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	0800fc94 	.word	0x0800fc94
 8009950:	0800a049 	.word	0x0800a049
 8009954:	2000103c 	.word	0x2000103c
 8009958:	20000b44 	.word	0x20000b44
 800995c:	20000018 	.word	0x20000018
 8009960:	20001038 	.word	0x20001038
 8009964:	20001024 	.word	0x20001024
 8009968:	2000101c 	.word	0x2000101c

0800996c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <vTaskSuspendAll+0x18>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	4a03      	ldr	r2, [pc, #12]	; (8009984 <vTaskSuspendAll+0x18>)
 8009978:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800997a:	bf00      	nop
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20001040 	.word	0x20001040

08009988 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8009992:	4b13      	ldr	r3, [pc, #76]	; (80099e0 <prvGetExpectedIdleTime+0x58>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800999a:	2301      	movs	r3, #1
 800999c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800999e:	4b11      	ldr	r3, [pc, #68]	; (80099e4 <prvGetExpectedIdleTime+0x5c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	e012      	b.n	80099d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80099ae:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <prvGetExpectedIdleTime+0x60>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d902      	bls.n	80099bc <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
 80099ba:	e00b      	b.n	80099d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	607b      	str	r3, [r7, #4]
 80099c6:	e005      	b.n	80099d4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80099c8:	4b08      	ldr	r3, [pc, #32]	; (80099ec <prvGetExpectedIdleTime+0x64>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <prvGetExpectedIdleTime+0x68>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80099d4:	687b      	ldr	r3, [r7, #4]
	}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr
 80099e0:	20001020 	.word	0x20001020
 80099e4:	20000b44 	.word	0x20000b44
 80099e8:	20000b48 	.word	0x20000b48
 80099ec:	20001038 	.word	0x20001038
 80099f0:	2000101c 	.word	0x2000101c

080099f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a02:	4b42      	ldr	r3, [pc, #264]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	603b      	str	r3, [r7, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a20:	f001 fb14 	bl	800b04c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a24:	4b39      	ldr	r3, [pc, #228]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4a38      	ldr	r2, [pc, #224]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a2e:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <xTaskResumeAll+0x118>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d162      	bne.n	8009afc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a36:	4b36      	ldr	r3, [pc, #216]	; (8009b10 <xTaskResumeAll+0x11c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d05e      	beq.n	8009afc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a3e:	e02f      	b.n	8009aa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a40:	4b34      	ldr	r3, [pc, #208]	; (8009b14 <xTaskResumeAll+0x120>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3318      	adds	r3, #24
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fcf9 	bl	8008444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3304      	adds	r3, #4
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fcf4 	bl	8008444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4b2d      	ldr	r3, [pc, #180]	; (8009b18 <xTaskResumeAll+0x124>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d903      	bls.n	8009a70 <xTaskResumeAll+0x7c>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6c:	4a2a      	ldr	r2, [pc, #168]	; (8009b18 <xTaskResumeAll+0x124>)
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4a27      	ldr	r2, [pc, #156]	; (8009b1c <xTaskResumeAll+0x128>)
 8009a7e:	441a      	add	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4619      	mov	r1, r3
 8009a86:	4610      	mov	r0, r2
 8009a88:	f7fe fc81 	bl	800838e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <xTaskResumeAll+0x12c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d302      	bcc.n	8009aa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009a9a:	4b22      	ldr	r3, [pc, #136]	; (8009b24 <xTaskResumeAll+0x130>)
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <xTaskResumeAll+0x120>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1cb      	bne.n	8009a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d001      	beq.n	8009ab2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009aae:	f000 fbdb 	bl	800a268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009ab2:	4b1d      	ldr	r3, [pc, #116]	; (8009b28 <xTaskResumeAll+0x134>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d010      	beq.n	8009ae0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009abe:	f000 f86b 	bl	8009b98 <xTaskIncrementTick>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009ac8:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <xTaskResumeAll+0x130>)
 8009aca:	2201      	movs	r2, #1
 8009acc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f1      	bne.n	8009abe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009ada:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <xTaskResumeAll+0x134>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ae0:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <xTaskResumeAll+0x130>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d009      	beq.n	8009afc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009aec:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <xTaskResumeAll+0x138>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009afc:	f001 fad6 	bl	800b0ac <vPortExitCritical>

	return xAlreadyYielded;
 8009b00:	68bb      	ldr	r3, [r7, #8]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20001040 	.word	0x20001040
 8009b10:	20001018 	.word	0x20001018
 8009b14:	20000fd8 	.word	0x20000fd8
 8009b18:	20001020 	.word	0x20001020
 8009b1c:	20000b48 	.word	0x20000b48
 8009b20:	20000b44 	.word	0x20000b44
 8009b24:	2000102c 	.word	0x2000102c
 8009b28:	20001028 	.word	0x20001028
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b36:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <xTaskGetTickCount+0x18>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b3c:	687b      	ldr	r3, [r7, #4]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr
 8009b48:	2000101c 	.word	0x2000101c

08009b4c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8009b54:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <vTaskStepTick+0x44>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	4b0d      	ldr	r3, [pc, #52]	; (8009b94 <vTaskStepTick+0x48>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d90a      	bls.n	8009b7a <vTaskStepTick+0x2e>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60fb      	str	r3, [r7, #12]
}
 8009b76:	bf00      	nop
 8009b78:	e7fe      	b.n	8009b78 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <vTaskStepTick+0x44>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4413      	add	r3, r2
 8009b82:	4a03      	ldr	r2, [pc, #12]	; (8009b90 <vTaskStepTick+0x44>)
 8009b84:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr
 8009b90:	2000101c 	.word	0x2000101c
 8009b94:	20001038 	.word	0x20001038

08009b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba2:	4b4f      	ldr	r3, [pc, #316]	; (8009ce0 <xTaskIncrementTick+0x148>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f040 8089 	bne.w	8009cbe <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bac:	4b4d      	ldr	r3, [pc, #308]	; (8009ce4 <xTaskIncrementTick+0x14c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bb4:	4a4b      	ldr	r2, [pc, #300]	; (8009ce4 <xTaskIncrementTick+0x14c>)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d120      	bne.n	8009c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bc0:	4b49      	ldr	r3, [pc, #292]	; (8009ce8 <xTaskIncrementTick+0x150>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00a      	beq.n	8009be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	e7fe      	b.n	8009bde <xTaskIncrementTick+0x46>
 8009be0:	4b41      	ldr	r3, [pc, #260]	; (8009ce8 <xTaskIncrementTick+0x150>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	4b41      	ldr	r3, [pc, #260]	; (8009cec <xTaskIncrementTick+0x154>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a3f      	ldr	r2, [pc, #252]	; (8009ce8 <xTaskIncrementTick+0x150>)
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	4a3f      	ldr	r2, [pc, #252]	; (8009cec <xTaskIncrementTick+0x154>)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	4b3e      	ldr	r3, [pc, #248]	; (8009cf0 <xTaskIncrementTick+0x158>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a3d      	ldr	r2, [pc, #244]	; (8009cf0 <xTaskIncrementTick+0x158>)
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	f000 fb33 	bl	800a268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c02:	4b3c      	ldr	r3, [pc, #240]	; (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d349      	bcc.n	8009ca0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c0c:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <xTaskIncrementTick+0x150>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c16:	4b37      	ldr	r3, [pc, #220]	; (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c1c:	601a      	str	r2, [r3, #0]
					break;
 8009c1e:	e03f      	b.n	8009ca0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <xTaskIncrementTick+0x150>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d203      	bcs.n	8009c40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c38:	4a2e      	ldr	r2, [pc, #184]	; (8009cf4 <xTaskIncrementTick+0x15c>)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c3e:	e02f      	b.n	8009ca0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fbfd 	bl	8008444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	3318      	adds	r3, #24
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe fbf4 	bl	8008444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4b25      	ldr	r3, [pc, #148]	; (8009cf8 <xTaskIncrementTick+0x160>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d903      	bls.n	8009c70 <xTaskIncrementTick+0xd8>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a22      	ldr	r2, [pc, #136]	; (8009cf8 <xTaskIncrementTick+0x160>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	; (8009cfc <xTaskIncrementTick+0x164>)
 8009c7e:	441a      	add	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe fb81 	bl	800838e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4b1b      	ldr	r3, [pc, #108]	; (8009d00 <xTaskIncrementTick+0x168>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d3b8      	bcc.n	8009c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c9e:	e7b5      	b.n	8009c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ca0:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <xTaskIncrementTick+0x168>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca6:	4915      	ldr	r1, [pc, #84]	; (8009cfc <xTaskIncrementTick+0x164>)
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	440b      	add	r3, r1
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d907      	bls.n	8009cc8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e004      	b.n	8009cc8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009cbe:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <xTaskIncrementTick+0x16c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	4a0f      	ldr	r2, [pc, #60]	; (8009d04 <xTaskIncrementTick+0x16c>)
 8009cc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <xTaskIncrementTick+0x170>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009cd4:	697b      	ldr	r3, [r7, #20]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20001040 	.word	0x20001040
 8009ce4:	2000101c 	.word	0x2000101c
 8009ce8:	20000fd0 	.word	0x20000fd0
 8009cec:	20000fd4 	.word	0x20000fd4
 8009cf0:	20001030 	.word	0x20001030
 8009cf4:	20001038 	.word	0x20001038
 8009cf8:	20001020 	.word	0x20001020
 8009cfc:	20000b48 	.word	0x20000b48
 8009d00:	20000b44 	.word	0x20000b44
 8009d04:	20001028 	.word	0x20001028
 8009d08:	2000102c 	.word	0x2000102c

08009d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d12:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <vTaskSwitchContext+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <vTaskSwitchContext+0xb4>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d20:	e046      	b.n	8009db0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d22:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <vTaskSwitchContext+0xb4>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d28:	4b26      	ldr	r3, [pc, #152]	; (8009dc4 <vTaskSwitchContext+0xb8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e010      	b.n	8009d52 <vTaskSwitchContext+0x46>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <vTaskSwitchContext+0x40>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	607b      	str	r3, [r7, #4]
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <vTaskSwitchContext+0x3e>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	491d      	ldr	r1, [pc, #116]	; (8009dc8 <vTaskSwitchContext+0xbc>)
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0e4      	beq.n	8009d30 <vTaskSwitchContext+0x24>
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4a15      	ldr	r2, [pc, #84]	; (8009dc8 <vTaskSwitchContext+0xbc>)
 8009d72:	4413      	add	r3, r2
 8009d74:	60bb      	str	r3, [r7, #8]
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	605a      	str	r2, [r3, #4]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3308      	adds	r3, #8
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d104      	bne.n	8009d96 <vTaskSwitchContext+0x8a>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4a0b      	ldr	r2, [pc, #44]	; (8009dcc <vTaskSwitchContext+0xc0>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <vTaskSwitchContext+0xb8>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009da6:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <vTaskSwitchContext+0xc0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3354      	adds	r3, #84	; 0x54
 8009dac:	4a08      	ldr	r2, [pc, #32]	; (8009dd0 <vTaskSwitchContext+0xc4>)
 8009dae:	6013      	str	r3, [r2, #0]
}
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bc80      	pop	{r7}
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20001040 	.word	0x20001040
 8009dc0:	2000102c 	.word	0x2000102c
 8009dc4:	20001020 	.word	0x20001020
 8009dc8:	20000b48 	.word	0x20000b48
 8009dcc:	20000b44 	.word	0x20000b44
 8009dd0:	20000018 	.word	0x20000018

08009dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <vTaskPlaceOnEventList+0x44>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3318      	adds	r3, #24
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fe fae6 	bl	80083d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e08:	2101      	movs	r1, #1
 8009e0a:	6838      	ldr	r0, [r7, #0]
 8009e0c:	f000 fbd6 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000b44 	.word	0x20000b44

08009e1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	617b      	str	r3, [r7, #20]
}
 8009e40:	bf00      	nop
 8009e42:	e7fe      	b.n	8009e42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e44:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <vTaskPlaceOnEventListRestricted+0x54>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3318      	adds	r3, #24
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f7fe fa9e 	bl	800838e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	68b8      	ldr	r0, [r7, #8]
 8009e62:	f000 fbab 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
	}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000b44 	.word	0x20000b44

08009e74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	60fb      	str	r3, [r7, #12]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	3318      	adds	r3, #24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fe facd 	bl	8008444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eaa:	4b1f      	ldr	r3, [pc, #124]	; (8009f28 <xTaskRemoveFromEventList+0xb4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d11f      	bne.n	8009ef2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fac4 	bl	8008444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ec0:	4b1a      	ldr	r3, [pc, #104]	; (8009f2c <xTaskRemoveFromEventList+0xb8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d903      	bls.n	8009ed0 <xTaskRemoveFromEventList+0x5c>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	4a17      	ldr	r2, [pc, #92]	; (8009f2c <xTaskRemoveFromEventList+0xb8>)
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a14      	ldr	r2, [pc, #80]	; (8009f30 <xTaskRemoveFromEventList+0xbc>)
 8009ede:	441a      	add	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f7fe fa51 	bl	800838e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8009eec:	f000 f9bc 	bl	800a268 <prvResetNextTaskUnblockTime>
 8009ef0:	e005      	b.n	8009efe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	3318      	adds	r3, #24
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	480e      	ldr	r0, [pc, #56]	; (8009f34 <xTaskRemoveFromEventList+0xc0>)
 8009efa:	f7fe fa48 	bl	800838e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f02:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <xTaskRemoveFromEventList+0xc4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d905      	bls.n	8009f18 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f10:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <xTaskRemoveFromEventList+0xc8>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	e001      	b.n	8009f1c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f1c:	697b      	ldr	r3, [r7, #20]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20001040 	.word	0x20001040
 8009f2c:	20001020 	.word	0x20001020
 8009f30:	20000b48 	.word	0x20000b48
 8009f34:	20000fd8 	.word	0x20000fd8
 8009f38:	20000b44 	.word	0x20000b44
 8009f3c:	2000102c 	.word	0x2000102c

08009f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <vTaskInternalSetTimeOutState+0x24>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f50:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <vTaskInternalSetTimeOutState+0x28>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	605a      	str	r2, [r3, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20001030 	.word	0x20001030
 8009f68:	2000101c 	.word	0x2000101c

08009f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	613b      	str	r3, [r7, #16]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	60fb      	str	r3, [r7, #12]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009fae:	f001 f84d 	bl	800b04c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fb2:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <xTaskCheckForTimeOut+0xbc>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fca:	d102      	bne.n	8009fd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61fb      	str	r3, [r7, #28]
 8009fd0:	e023      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	4b15      	ldr	r3, [pc, #84]	; (800a02c <xTaskCheckForTimeOut+0xc0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d007      	beq.n	8009fee <xTaskCheckForTimeOut+0x82>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d302      	bcc.n	8009fee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	e015      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d20b      	bcs.n	800a010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff ff9b 	bl	8009f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61fb      	str	r3, [r7, #28]
 800a00e:	e004      	b.n	800a01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a016:	2301      	movs	r3, #1
 800a018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a01a:	f001 f847 	bl	800b0ac <vPortExitCritical>

	return xReturn;
 800a01e:	69fb      	ldr	r3, [r7, #28]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2000101c 	.word	0x2000101c
 800a02c:	20001030 	.word	0x20001030

0800a030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a034:	4b03      	ldr	r3, [pc, #12]	; (800a044 <vTaskMissedYield+0x14>)
 800a036:	2201      	movs	r2, #1
 800a038:	601a      	str	r2, [r3, #0]
}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	2000102c 	.word	0x2000102c

0800a048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a050:	f000 f8a8 	bl	800a1a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a054:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <prvIdleTask+0x70>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d907      	bls.n	800a06c <prvIdleTask+0x24>
			{
				taskYIELD();
 800a05c:	4b17      	ldr	r3, [pc, #92]	; (800a0bc <prvIdleTask+0x74>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a06c:	f7ff fc8c 	bl	8009988 <prvGetExpectedIdleTime>
 800a070:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d9eb      	bls.n	800a050 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800a078:	f7ff fc78 	bl	800996c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <prvIdleTask+0x78>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	4b10      	ldr	r3, [pc, #64]	; (800a0c4 <prvIdleTask+0x7c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d20a      	bcs.n	800a09e <prvIdleTask+0x56>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	60bb      	str	r3, [r7, #8]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a09e:	f7ff fc73 	bl	8009988 <prvGetExpectedIdleTime>
 800a0a2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d902      	bls.n	800a0b0 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f001 f86e 	bl	800b18c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800a0b0:	f7ff fca0 	bl	80099f4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800a0b4:	e7cc      	b.n	800a050 <prvIdleTask+0x8>
 800a0b6:	bf00      	nop
 800a0b8:	20000b48 	.word	0x20000b48
 800a0bc:	e000ed04 	.word	0xe000ed04
 800a0c0:	20001038 	.word	0x20001038
 800a0c4:	2000101c 	.word	0x2000101c

0800a0c8 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a0d6:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <eTaskConfirmSleepModeStatus+0x4c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	71fb      	strb	r3, [r7, #7]
 800a0e2:	e010      	b.n	800a106 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <eTaskConfirmSleepModeStatus+0x50>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	e009      	b.n	800a106 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <eTaskConfirmSleepModeStatus+0x54>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <eTaskConfirmSleepModeStatus+0x58>)
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	1acb      	subs	r3, r1, r3
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d101      	bne.n	800a106 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800a102:	2302      	movs	r3, #2
 800a104:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800a106:	79fb      	ldrb	r3, [r7, #7]
	}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bc80      	pop	{r7}
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20000fd8 	.word	0x20000fd8
 800a118:	2000102c 	.word	0x2000102c
 800a11c:	20001004 	.word	0x20001004
 800a120:	20001018 	.word	0x20001018

0800a124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a12a:	2300      	movs	r3, #0
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	e00c      	b.n	800a14a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4a12      	ldr	r2, [pc, #72]	; (800a184 <prvInitialiseTaskLists+0x60>)
 800a13c:	4413      	add	r3, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe f8fa 	bl	8008338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	3301      	adds	r3, #1
 800a148:	607b      	str	r3, [r7, #4]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b37      	cmp	r3, #55	; 0x37
 800a14e:	d9ef      	bls.n	800a130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a150:	480d      	ldr	r0, [pc, #52]	; (800a188 <prvInitialiseTaskLists+0x64>)
 800a152:	f7fe f8f1 	bl	8008338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a156:	480d      	ldr	r0, [pc, #52]	; (800a18c <prvInitialiseTaskLists+0x68>)
 800a158:	f7fe f8ee 	bl	8008338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a15c:	480c      	ldr	r0, [pc, #48]	; (800a190 <prvInitialiseTaskLists+0x6c>)
 800a15e:	f7fe f8eb 	bl	8008338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a162:	480c      	ldr	r0, [pc, #48]	; (800a194 <prvInitialiseTaskLists+0x70>)
 800a164:	f7fe f8e8 	bl	8008338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a168:	480b      	ldr	r0, [pc, #44]	; (800a198 <prvInitialiseTaskLists+0x74>)
 800a16a:	f7fe f8e5 	bl	8008338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a16e:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <prvInitialiseTaskLists+0x78>)
 800a170:	4a05      	ldr	r2, [pc, #20]	; (800a188 <prvInitialiseTaskLists+0x64>)
 800a172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a174:	4b0a      	ldr	r3, [pc, #40]	; (800a1a0 <prvInitialiseTaskLists+0x7c>)
 800a176:	4a05      	ldr	r2, [pc, #20]	; (800a18c <prvInitialiseTaskLists+0x68>)
 800a178:	601a      	str	r2, [r3, #0]
}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000b48 	.word	0x20000b48
 800a188:	20000fa8 	.word	0x20000fa8
 800a18c:	20000fbc 	.word	0x20000fbc
 800a190:	20000fd8 	.word	0x20000fd8
 800a194:	20000fec 	.word	0x20000fec
 800a198:	20001004 	.word	0x20001004
 800a19c:	20000fd0 	.word	0x20000fd0
 800a1a0:	20000fd4 	.word	0x20000fd4

0800a1a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1aa:	e019      	b.n	800a1e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a1ac:	f000 ff4e 	bl	800b04c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b0:	4b10      	ldr	r3, [pc, #64]	; (800a1f4 <prvCheckTasksWaitingTermination+0x50>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fe f941 	bl	8008444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <prvCheckTasksWaitingTermination+0x54>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4a0b      	ldr	r2, [pc, #44]	; (800a1f8 <prvCheckTasksWaitingTermination+0x54>)
 800a1ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a1cc:	4b0b      	ldr	r3, [pc, #44]	; (800a1fc <prvCheckTasksWaitingTermination+0x58>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	4a0a      	ldr	r2, [pc, #40]	; (800a1fc <prvCheckTasksWaitingTermination+0x58>)
 800a1d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a1d6:	f000 ff69 	bl	800b0ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f810 	bl	800a200 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a1e0:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <prvCheckTasksWaitingTermination+0x58>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e1      	bne.n	800a1ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000fec 	.word	0x20000fec
 800a1f8:	20001018 	.word	0x20001018
 800a1fc:	20001000 	.word	0x20001000

0800a200 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3354      	adds	r3, #84	; 0x54
 800a20c:	4618      	mov	r0, r3
 800a20e:	f005 f85f 	bl	800f2d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d108      	bne.n	800a22e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a220:	4618      	mov	r0, r3
 800a222:	f001 f9bd 	bl	800b5a0 <vPortFree>
				vPortFree( pxTCB );
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f001 f9ba 	bl	800b5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a22c:	e018      	b.n	800a260 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a234:	2b01      	cmp	r3, #1
 800a236:	d103      	bne.n	800a240 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 f9b1 	bl	800b5a0 <vPortFree>
	}
 800a23e:	e00f      	b.n	800a260 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a246:	2b02      	cmp	r3, #2
 800a248:	d00a      	beq.n	800a260 <prvDeleteTCB+0x60>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60fb      	str	r3, [r7, #12]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <prvDeleteTCB+0x5e>
	}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a27e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a280:	e008      	b.n	800a294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <prvResetNextTaskUnblockTime+0x38>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4a04      	ldr	r2, [pc, #16]	; (800a2a4 <prvResetNextTaskUnblockTime+0x3c>)
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	20000fd0 	.word	0x20000fd0
 800a2a4:	20001038 	.word	0x20001038

0800a2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <xTaskGetSchedulerState+0x34>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d102      	bne.n	800a2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	e008      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2bc:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <xTaskGetSchedulerState+0x38>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	e001      	b.n	800a2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a2ce:	687b      	ldr	r3, [r7, #4]
	}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20001024 	.word	0x20001024
 800a2e0:	20001040 	.word	0x20001040

0800a2e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d051      	beq.n	800a39e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fe:	4b2a      	ldr	r3, [pc, #168]	; (800a3a8 <xTaskPriorityInherit+0xc4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	429a      	cmp	r2, r3
 800a306:	d241      	bcs.n	800a38c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	db06      	blt.n	800a31e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a310:	4b25      	ldr	r3, [pc, #148]	; (800a3a8 <xTaskPriorityInherit+0xc4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6959      	ldr	r1, [r3, #20]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4a1f      	ldr	r2, [pc, #124]	; (800a3ac <xTaskPriorityInherit+0xc8>)
 800a330:	4413      	add	r3, r2
 800a332:	4299      	cmp	r1, r3
 800a334:	d122      	bne.n	800a37c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3304      	adds	r3, #4
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe f882 	bl	8008444 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a340:	4b19      	ldr	r3, [pc, #100]	; (800a3a8 <xTaskPriorityInherit+0xc4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34e:	4b18      	ldr	r3, [pc, #96]	; (800a3b0 <xTaskPriorityInherit+0xcc>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d903      	bls.n	800a35e <xTaskPriorityInherit+0x7a>
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	4a15      	ldr	r2, [pc, #84]	; (800a3b0 <xTaskPriorityInherit+0xcc>)
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4a10      	ldr	r2, [pc, #64]	; (800a3ac <xTaskPriorityInherit+0xc8>)
 800a36c:	441a      	add	r2, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fe f80a 	bl	800838e <vListInsertEnd>
 800a37a:	e004      	b.n	800a386 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <xTaskPriorityInherit+0xc4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a386:	2301      	movs	r3, #1
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e008      	b.n	800a39e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a390:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <xTaskPriorityInherit+0xc4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	429a      	cmp	r2, r3
 800a398:	d201      	bcs.n	800a39e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a39a:	2301      	movs	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a39e:	68fb      	ldr	r3, [r7, #12]
	}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	20000b44 	.word	0x20000b44
 800a3ac:	20000b48 	.word	0x20000b48
 800a3b0:	20001020 	.word	0x20001020

0800a3b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d056      	beq.n	800a478 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ca:	4b2e      	ldr	r3, [pc, #184]	; (800a484 <xTaskPriorityDisinherit+0xd0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d00a      	beq.n	800a3ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	60fb      	str	r3, [r7, #12]
}
 800a3e6:	bf00      	nop
 800a3e8:	e7fe      	b.n	800a3e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	60bb      	str	r3, [r7, #8]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a40c:	1e5a      	subs	r2, r3, #1
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d02c      	beq.n	800a478 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a422:	2b00      	cmp	r3, #0
 800a424:	d128      	bne.n	800a478 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	3304      	adds	r3, #4
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe f80a 	bl	8008444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a448:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <xTaskPriorityDisinherit+0xd4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d903      	bls.n	800a458 <xTaskPriorityDisinherit+0xa4>
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a454:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <xTaskPriorityDisinherit+0xd4>)
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4a09      	ldr	r2, [pc, #36]	; (800a48c <xTaskPriorityDisinherit+0xd8>)
 800a466:	441a      	add	r2, r3
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	f7fd ff8d 	bl	800838e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a478:	697b      	ldr	r3, [r7, #20]
	}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000b44 	.word	0x20000b44
 800a488:	20001020 	.word	0x20001020
 800a48c:	20000b48 	.word	0x20000b48

0800a490 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d06a      	beq.n	800a57e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d902      	bls.n	800a4d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	e002      	b.n	800a4dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d04b      	beq.n	800a57e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d146      	bne.n	800a57e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d10a      	bne.n	800a510 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	60bb      	str	r3, [r7, #8]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	69fa      	ldr	r2, [r7, #28]
 800a51a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	db04      	blt.n	800a52e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	6959      	ldr	r1, [r3, #20]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4a13      	ldr	r2, [pc, #76]	; (800a58c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a53e:	4413      	add	r3, r2
 800a540:	4299      	cmp	r1, r3
 800a542:	d11c      	bne.n	800a57e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fd ff7b 	bl	8008444 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d903      	bls.n	800a562 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a0c      	ldr	r2, [pc, #48]	; (800a590 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4a07      	ldr	r2, [pc, #28]	; (800a58c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a570:	441a      	add	r2, r3
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	3304      	adds	r3, #4
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f7fd ff08 	bl	800838e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a57e:	bf00      	nop
 800a580:	3720      	adds	r7, #32
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000b44 	.word	0x20000b44
 800a58c:	20000b48 	.word	0x20000b48
 800a590:	20001020 	.word	0x20001020

0800a594 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a594:	b480      	push	{r7}
 800a596:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a598:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d004      	beq.n	800a5aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5a6:	3201      	adds	r2, #1
 800a5a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a5aa:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
	}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bc80      	pop	{r7}
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	20000b44 	.word	0x20000b44

0800a5bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <prvAddCurrentTaskToDelayedList+0x90>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5cc:	4b20      	ldr	r3, [pc, #128]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fd ff36 	bl	8008444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5de:	d10a      	bne.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4819      	ldr	r0, [pc, #100]	; (800a654 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5f0:	f7fd fecd 	bl	800838e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5f4:	e026      	b.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d209      	bcs.n	800a622 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3304      	adds	r3, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fd feda 	bl	80083d4 <vListInsert>
}
 800a620:	e010      	b.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fd fed0 	bl	80083d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d202      	bcs.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a63e:	4a08      	ldr	r2, [pc, #32]	; (800a660 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	6013      	str	r3, [r2, #0]
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	2000101c 	.word	0x2000101c
 800a650:	20000b44 	.word	0x20000b44
 800a654:	20001004 	.word	0x20001004
 800a658:	20000fd4 	.word	0x20000fd4
 800a65c:	20000fd0 	.word	0x20000fd0
 800a660:	20001038 	.word	0x20001038

0800a664 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a66e:	f000 fb9f 	bl	800adb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a672:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <xTimerCreateTimerTask+0x80>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d021      	beq.n	800a6be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a682:	1d3a      	adds	r2, r7, #4
 800a684:	f107 0108 	add.w	r1, r7, #8
 800a688:	f107 030c 	add.w	r3, r7, #12
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fd fe39 	bl	8008304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	9202      	str	r2, [sp, #8]
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	2302      	movs	r3, #2
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	460a      	mov	r2, r1
 800a6a4:	4910      	ldr	r1, [pc, #64]	; (800a6e8 <xTimerCreateTimerTask+0x84>)
 800a6a6:	4811      	ldr	r0, [pc, #68]	; (800a6ec <xTimerCreateTimerTask+0x88>)
 800a6a8:	f7fe ff04 	bl	80094b4 <xTaskCreateStatic>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4a10      	ldr	r2, [pc, #64]	; (800a6f0 <xTimerCreateTimerTask+0x8c>)
 800a6b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <xTimerCreateTimerTask+0x8c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	613b      	str	r3, [r7, #16]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20001074 	.word	0x20001074
 800a6e8:	0800fc9c 	.word	0x0800fc9c
 800a6ec:	0800a95d 	.word	0x0800a95d
 800a6f0:	20001078 	.word	0x20001078

0800a6f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a702:	202c      	movs	r0, #44	; 0x2c
 800a704:	f000 fe88 	bl	800b418 <pvPortMalloc>
 800a708:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00d      	beq.n	800a72c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f843 	bl	800a7b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a72c:	697b      	ldr	r3, [r7, #20]
	}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a736:	b580      	push	{r7, lr}
 800a738:	b08a      	sub	sp, #40	; 0x28
 800a73a:	af02      	add	r7, sp, #8
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	60b9      	str	r1, [r7, #8]
 800a740:	607a      	str	r2, [r7, #4]
 800a742:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a744:	232c      	movs	r3, #44	; 0x2c
 800a746:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2b2c      	cmp	r3, #44	; 0x2c
 800a74c:	d00a      	beq.n	800a764 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	61bb      	str	r3, [r7, #24]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a764:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	617b      	str	r3, [r7, #20]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00d      	beq.n	800a7a8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f805 	bl	800a7b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
	}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	617b      	str	r3, [r7, #20]
}
 800a7d8:	bf00      	nop
 800a7da:	e7fe      	b.n	800a7da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d01e      	beq.n	800a820 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a7e2:	f000 fae5 	bl	800adb0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	6a3a      	ldr	r2, [r7, #32]
 800a7fc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a800:	3304      	adds	r3, #4
 800a802:	4618      	mov	r0, r3
 800a804:	f7fd fdb7 	bl	8008376 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d008      	beq.n	800a820 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a814:	f043 0304 	orr.w	r3, r3, #4
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a820:	bf00      	nop
 800a822:	3718      	adds	r7, #24
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10a      	bne.n	800a856 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	623b      	str	r3, [r7, #32]
}
 800a852:	bf00      	nop
 800a854:	e7fe      	b.n	800a854 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a856:	4b1a      	ldr	r3, [pc, #104]	; (800a8c0 <xTimerGenericCommand+0x98>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d02a      	beq.n	800a8b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	2b05      	cmp	r3, #5
 800a86e:	dc18      	bgt.n	800a8a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a870:	f7ff fd1a 	bl	800a2a8 <xTaskGetSchedulerState>
 800a874:	4603      	mov	r3, r0
 800a876:	2b02      	cmp	r3, #2
 800a878:	d109      	bne.n	800a88e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <xTimerGenericCommand+0x98>)
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f107 0110 	add.w	r1, r7, #16
 800a882:	2300      	movs	r3, #0
 800a884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a886:	f7fd ffb5 	bl	80087f4 <xQueueGenericSend>
 800a88a:	6278      	str	r0, [r7, #36]	; 0x24
 800a88c:	e012      	b.n	800a8b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a88e:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <xTimerGenericCommand+0x98>)
 800a890:	6818      	ldr	r0, [r3, #0]
 800a892:	f107 0110 	add.w	r1, r7, #16
 800a896:	2300      	movs	r3, #0
 800a898:	2200      	movs	r2, #0
 800a89a:	f7fd ffab 	bl	80087f4 <xQueueGenericSend>
 800a89e:	6278      	str	r0, [r7, #36]	; 0x24
 800a8a0:	e008      	b.n	800a8b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8a2:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <xTimerGenericCommand+0x98>)
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	f107 0110 	add.w	r1, r7, #16
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	f7fe f89f 	bl	80089f0 <xQueueGenericSendFromISR>
 800a8b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3728      	adds	r7, #40	; 0x28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20001074 	.word	0x20001074

0800a8c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ce:	4b22      	ldr	r3, [pc, #136]	; (800a958 <prvProcessExpiredTimer+0x94>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fd fdb1 	bl	8008444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d022      	beq.n	800a936 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	699a      	ldr	r2, [r3, #24]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	18d1      	adds	r1, r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	6978      	ldr	r0, [r7, #20]
 800a8fe:	f000 f8cf 	bl	800aaa0 <prvInsertTimerInActiveList>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01f      	beq.n	800a948 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a908:	2300      	movs	r3, #0
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	2300      	movs	r3, #0
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	2100      	movs	r1, #0
 800a912:	6978      	ldr	r0, [r7, #20]
 800a914:	f7ff ff88 	bl	800a828 <xTimerGenericCommand>
 800a918:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d113      	bne.n	800a948 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	60fb      	str	r3, [r7, #12]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	b2da      	uxtb	r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	6a1b      	ldr	r3, [r3, #32]
 800a94c:	6978      	ldr	r0, [r7, #20]
 800a94e:	4798      	blx	r3
}
 800a950:	bf00      	nop
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	2000106c 	.word	0x2000106c

0800a95c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 f857 	bl	800aa1c <prvGetNextExpireTime>
 800a96e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	4619      	mov	r1, r3
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f803 	bl	800a980 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a97a:	f000 f8d3 	bl	800ab24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a97e:	e7f1      	b.n	800a964 <prvTimerTask+0x8>

0800a980 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a98a:	f7fe ffef 	bl	800996c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f864 	bl	800aa60 <prvSampleTimeNow>
 800a998:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d130      	bne.n	800aa02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <prvProcessTimerOrBlockTask+0x3c>
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d806      	bhi.n	800a9bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9ae:	f7ff f821 	bl	80099f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9b2:	68f9      	ldr	r1, [r7, #12]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff ff85 	bl	800a8c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9ba:	e024      	b.n	800aa06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d008      	beq.n	800a9d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9c2:	4b13      	ldr	r3, [pc, #76]	; (800aa10 <prvProcessTimerOrBlockTask+0x90>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <prvProcessTimerOrBlockTask+0x50>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <prvProcessTimerOrBlockTask+0x52>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9d4:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <prvProcessTimerOrBlockTask+0x94>)
 800a9d6:	6818      	ldr	r0, [r3, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	f7fe fd33 	bl	800944c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a9e6:	f7ff f805 	bl	80099f4 <xTaskResumeAll>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a9f0:	4b09      	ldr	r3, [pc, #36]	; (800aa18 <prvProcessTimerOrBlockTask+0x98>)
 800a9f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
}
 800aa00:	e001      	b.n	800aa06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa02:	f7fe fff7 	bl	80099f4 <xTaskResumeAll>
}
 800aa06:	bf00      	nop
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20001070 	.word	0x20001070
 800aa14:	20001074 	.word	0x20001074
 800aa18:	e000ed04 	.word	0xe000ed04

0800aa1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <prvGetNextExpireTime+0x40>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <prvGetNextExpireTime+0x16>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	e000      	b.n	800aa34 <prvGetNextExpireTime+0x18>
 800aa32:	2200      	movs	r2, #0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d105      	bne.n	800aa4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <prvGetNextExpireTime+0x40>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e001      	b.n	800aa50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa50:	68fb      	ldr	r3, [r7, #12]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bc80      	pop	{r7}
 800aa5a:	4770      	bx	lr
 800aa5c:	2000106c 	.word	0x2000106c

0800aa60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa68:	f7ff f862 	bl	8009b30 <xTaskGetTickCount>
 800aa6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <prvSampleTimeNow+0x3c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d205      	bcs.n	800aa84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa78:	f000 f936 	bl	800ace8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	e002      	b.n	800aa8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aa8a:	4a04      	ldr	r2, [pc, #16]	; (800aa9c <prvSampleTimeNow+0x3c>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aa90:	68fb      	ldr	r3, [r7, #12]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	2000107c 	.word	0x2000107c

0800aaa0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d812      	bhi.n	800aaec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	1ad2      	subs	r2, r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d302      	bcc.n	800aada <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aad4:	2301      	movs	r3, #1
 800aad6:	617b      	str	r3, [r7, #20]
 800aad8:	e01b      	b.n	800ab12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aada:	4b10      	ldr	r3, [pc, #64]	; (800ab1c <prvInsertTimerInActiveList+0x7c>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f7fd fc75 	bl	80083d4 <vListInsert>
 800aaea:	e012      	b.n	800ab12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d206      	bcs.n	800ab02 <prvInsertTimerInActiveList+0x62>
 800aaf4:	68ba      	ldr	r2, [r7, #8]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d302      	bcc.n	800ab02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e007      	b.n	800ab12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab02:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <prvInsertTimerInActiveList+0x80>)
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	f7fd fc61 	bl	80083d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab12:	697b      	ldr	r3, [r7, #20]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	20001070 	.word	0x20001070
 800ab20:	2000106c 	.word	0x2000106c

0800ab24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08e      	sub	sp, #56	; 0x38
 800ab28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab2a:	e0ca      	b.n	800acc2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da18      	bge.n	800ab64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab32:	1d3b      	adds	r3, r7, #4
 800ab34:	3304      	adds	r3, #4
 800ab36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	61fb      	str	r3, [r7, #28]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5a:	6850      	ldr	r0, [r2, #4]
 800ab5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab5e:	6892      	ldr	r2, [r2, #8]
 800ab60:	4611      	mov	r1, r2
 800ab62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f2c0 80aa 	blt.w	800acc0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fd fc61 	bl	8008444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab82:	463b      	mov	r3, r7
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff ff6b 	bl	800aa60 <prvSampleTimeNow>
 800ab8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b09      	cmp	r3, #9
 800ab90:	f200 8097 	bhi.w	800acc2 <prvProcessReceivedCommands+0x19e>
 800ab94:	a201      	add	r2, pc, #4	; (adr r2, 800ab9c <prvProcessReceivedCommands+0x78>)
 800ab96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9a:	bf00      	nop
 800ab9c:	0800abc5 	.word	0x0800abc5
 800aba0:	0800abc5 	.word	0x0800abc5
 800aba4:	0800abc5 	.word	0x0800abc5
 800aba8:	0800ac39 	.word	0x0800ac39
 800abac:	0800ac4d 	.word	0x0800ac4d
 800abb0:	0800ac97 	.word	0x0800ac97
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abc5 	.word	0x0800abc5
 800abbc:	0800ac39 	.word	0x0800ac39
 800abc0:	0800ac4d 	.word	0x0800ac4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	18d1      	adds	r1, r2, r3
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abe4:	f7ff ff5c 	bl	800aaa0 <prvInsertTimerInActiveList>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d069      	beq.n	800acc2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abfc:	f003 0304 	and.w	r3, r3, #4
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d05e      	beq.n	800acc2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	441a      	add	r2, r3
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	2300      	movs	r3, #0
 800ac12:	2100      	movs	r1, #0
 800ac14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac16:	f7ff fe07 	bl	800a828 <xTimerGenericCommand>
 800ac1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d14f      	bne.n	800acc2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	61bb      	str	r3, [r7, #24]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3e:	f023 0301 	bic.w	r3, r3, #1
 800ac42:	b2da      	uxtb	r2, r3
 800ac44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac4a:	e03a      	b.n	800acc2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac52:	f043 0301 	orr.w	r3, r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	617b      	str	r3, [r7, #20]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	18d1      	adds	r1, r2, r3
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac90:	f7ff ff06 	bl	800aaa0 <prvInsertTimerInActiveList>
					break;
 800ac94:	e015      	b.n	800acc2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac9c:	f003 0302 	and.w	r3, r3, #2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d103      	bne.n	800acac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca6:	f000 fc7b 	bl	800b5a0 <vPortFree>
 800acaa:	e00a      	b.n	800acc2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acb2:	f023 0301 	bic.w	r3, r3, #1
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acbe:	e000      	b.n	800acc2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800acc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800acc2:	4b08      	ldr	r3, [pc, #32]	; (800ace4 <prvProcessReceivedCommands+0x1c0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	1d39      	adds	r1, r7, #4
 800acc8:	2200      	movs	r2, #0
 800acca:	4618      	mov	r0, r3
 800accc:	f7fd ffb6 	bl	8008c3c <xQueueReceive>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f47f af2a 	bne.w	800ab2c <prvProcessReceivedCommands+0x8>
	}
}
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
 800acdc:	3730      	adds	r7, #48	; 0x30
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20001074 	.word	0x20001074

0800ace8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acee:	e048      	b.n	800ad82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acf0:	4b2d      	ldr	r3, [pc, #180]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfa:	4b2b      	ldr	r3, [pc, #172]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3304      	adds	r3, #4
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fd fb9b 	bl	8008444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d02e      	beq.n	800ad82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d90e      	bls.n	800ad54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad42:	4b19      	ldr	r3, [pc, #100]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7fd fb41 	bl	80083d4 <vListInsert>
 800ad52:	e016      	b.n	800ad82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad54:	2300      	movs	r3, #0
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	693a      	ldr	r2, [r7, #16]
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7ff fd62 	bl	800a828 <xTimerGenericCommand>
 800ad64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	603b      	str	r3, [r7, #0]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad82:	4b09      	ldr	r3, [pc, #36]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1b1      	bne.n	800acf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <prvSwitchTimerLists+0xc4>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a04      	ldr	r2, [pc, #16]	; (800ada8 <prvSwitchTimerLists+0xc0>)
 800ad98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ad9a:	4a04      	ldr	r2, [pc, #16]	; (800adac <prvSwitchTimerLists+0xc4>)
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	6013      	str	r3, [r2, #0]
}
 800ada0:	bf00      	nop
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	2000106c 	.word	0x2000106c
 800adac:	20001070 	.word	0x20001070

0800adb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adb6:	f000 f949 	bl	800b04c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adba:	4b15      	ldr	r3, [pc, #84]	; (800ae10 <prvCheckForValidListAndQueue+0x60>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d120      	bne.n	800ae04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800adc2:	4814      	ldr	r0, [pc, #80]	; (800ae14 <prvCheckForValidListAndQueue+0x64>)
 800adc4:	f7fd fab8 	bl	8008338 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800adc8:	4813      	ldr	r0, [pc, #76]	; (800ae18 <prvCheckForValidListAndQueue+0x68>)
 800adca:	f7fd fab5 	bl	8008338 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adce:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <prvCheckForValidListAndQueue+0x6c>)
 800add0:	4a10      	ldr	r2, [pc, #64]	; (800ae14 <prvCheckForValidListAndQueue+0x64>)
 800add2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <prvCheckForValidListAndQueue+0x70>)
 800add6:	4a10      	ldr	r2, [pc, #64]	; (800ae18 <prvCheckForValidListAndQueue+0x68>)
 800add8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adda:	2300      	movs	r3, #0
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	4b11      	ldr	r3, [pc, #68]	; (800ae24 <prvCheckForValidListAndQueue+0x74>)
 800ade0:	4a11      	ldr	r2, [pc, #68]	; (800ae28 <prvCheckForValidListAndQueue+0x78>)
 800ade2:	2110      	movs	r1, #16
 800ade4:	200a      	movs	r0, #10
 800ade6:	f7fd fbbf 	bl	8008568 <xQueueGenericCreateStatic>
 800adea:	4603      	mov	r3, r0
 800adec:	4a08      	ldr	r2, [pc, #32]	; (800ae10 <prvCheckForValidListAndQueue+0x60>)
 800adee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <prvCheckForValidListAndQueue+0x60>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800adf8:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <prvCheckForValidListAndQueue+0x60>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	490b      	ldr	r1, [pc, #44]	; (800ae2c <prvCheckForValidListAndQueue+0x7c>)
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fad2 	bl	80093a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae04:	f000 f952 	bl	800b0ac <vPortExitCritical>
}
 800ae08:	bf00      	nop
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20001074 	.word	0x20001074
 800ae14:	20001044 	.word	0x20001044
 800ae18:	20001058 	.word	0x20001058
 800ae1c:	2000106c 	.word	0x2000106c
 800ae20:	20001070 	.word	0x20001070
 800ae24:	20001120 	.word	0x20001120
 800ae28:	20001080 	.word	0x20001080
 800ae2c:	0800fca4 	.word	0x0800fca4

0800ae30 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <pvTimerGetTimerID+0x28>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	60fb      	str	r3, [r7, #12]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800ae58:	f000 f8f8 	bl	800b04c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800ae62:	f000 f923 	bl	800b0ac <vPortExitCritical>

	return pvReturn;
 800ae66:	693b      	ldr	r3, [r7, #16]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3b04      	subs	r3, #4
 800ae80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3b04      	subs	r3, #4
 800ae8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f023 0201 	bic.w	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3b04      	subs	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aea0:	4a08      	ldr	r2, [pc, #32]	; (800aec4 <pxPortInitialiseStack+0x54>)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3b14      	subs	r3, #20
 800aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3b20      	subs	r3, #32
 800aeb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bc80      	pop	{r7}
 800aec2:	4770      	bx	lr
 800aec4:	0800aec9 	.word	0x0800aec9

0800aec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800aece:	2300      	movs	r3, #0
 800aed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aed2:	4b12      	ldr	r3, [pc, #72]	; (800af1c <prvTaskExitError+0x54>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeda:	d00a      	beq.n	800aef2 <prvTaskExitError+0x2a>
	__asm volatile
 800aedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee0:	f383 8811 	msr	BASEPRI, r3
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	60fb      	str	r3, [r7, #12]
}
 800aeee:	bf00      	nop
 800aef0:	e7fe      	b.n	800aef0 <prvTaskExitError+0x28>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60bb      	str	r3, [r7, #8]
}
 800af04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af06:	bf00      	nop
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d0fc      	beq.n	800af08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af0e:	bf00      	nop
 800af10:	bf00      	nop
 800af12:	3714      	adds	r7, #20
 800af14:	46bd      	mov	sp, r7
 800af16:	bc80      	pop	{r7}
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	20000010 	.word	0x20000010

0800af20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af20:	4b07      	ldr	r3, [pc, #28]	; (800af40 <pxCurrentTCBConst2>)
 800af22:	6819      	ldr	r1, [r3, #0]
 800af24:	6808      	ldr	r0, [r1, #0]
 800af26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800af2a:	f380 8809 	msr	PSP, r0
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f04f 0000 	mov.w	r0, #0
 800af36:	f380 8811 	msr	BASEPRI, r0
 800af3a:	f04e 0e0d 	orr.w	lr, lr, #13
 800af3e:	4770      	bx	lr

0800af40 <pxCurrentTCBConst2>:
 800af40:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop

0800af48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800af48:	4806      	ldr	r0, [pc, #24]	; (800af64 <prvPortStartFirstTask+0x1c>)
 800af4a:	6800      	ldr	r0, [r0, #0]
 800af4c:	6800      	ldr	r0, [r0, #0]
 800af4e:	f380 8808 	msr	MSP, r0
 800af52:	b662      	cpsie	i
 800af54:	b661      	cpsie	f
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	df00      	svc	0
 800af60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af62:	bf00      	nop
 800af64:	e000ed08 	.word	0xe000ed08

0800af68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800af6e:	4b32      	ldr	r3, [pc, #200]	; (800b038 <xPortStartScheduler+0xd0>)
 800af70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	b2db      	uxtb	r3, r3
 800af78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	22ff      	movs	r2, #255	; 0xff
 800af7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	b2db      	uxtb	r3, r3
 800af86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4b2a      	ldr	r3, [pc, #168]	; (800b03c <xPortStartScheduler+0xd4>)
 800af94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af96:	4b2a      	ldr	r3, [pc, #168]	; (800b040 <xPortStartScheduler+0xd8>)
 800af98:	2207      	movs	r2, #7
 800af9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af9c:	e009      	b.n	800afb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800af9e:	4b28      	ldr	r3, [pc, #160]	; (800b040 <xPortStartScheduler+0xd8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	4a26      	ldr	r2, [pc, #152]	; (800b040 <xPortStartScheduler+0xd8>)
 800afa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afba:	2b80      	cmp	r3, #128	; 0x80
 800afbc:	d0ef      	beq.n	800af9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afbe:	4b20      	ldr	r3, [pc, #128]	; (800b040 <xPortStartScheduler+0xd8>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f1c3 0307 	rsb	r3, r3, #7
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d00a      	beq.n	800afe0 <xPortStartScheduler+0x78>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	60bb      	str	r3, [r7, #8]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afe0:	4b17      	ldr	r3, [pc, #92]	; (800b040 <xPortStartScheduler+0xd8>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	4a16      	ldr	r2, [pc, #88]	; (800b040 <xPortStartScheduler+0xd8>)
 800afe8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <xPortStartScheduler+0xd8>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aff2:	4a13      	ldr	r2, [pc, #76]	; (800b040 <xPortStartScheduler+0xd8>)
 800aff4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800affe:	4b11      	ldr	r3, [pc, #68]	; (800b044 <xPortStartScheduler+0xdc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a10      	ldr	r2, [pc, #64]	; (800b044 <xPortStartScheduler+0xdc>)
 800b004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b00a:	4b0e      	ldr	r3, [pc, #56]	; (800b044 <xPortStartScheduler+0xdc>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a0d      	ldr	r2, [pc, #52]	; (800b044 <xPortStartScheduler+0xdc>)
 800b010:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b014:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b016:	f000 f985 	bl	800b324 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b01a:	4b0b      	ldr	r3, [pc, #44]	; (800b048 <xPortStartScheduler+0xe0>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b020:	f7ff ff92 	bl	800af48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b024:	f7fe fe72 	bl	8009d0c <vTaskSwitchContext>
	prvTaskExitError();
 800b028:	f7ff ff4e 	bl	800aec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	e000e400 	.word	0xe000e400
 800b03c:	2000117c 	.word	0x2000117c
 800b040:	20001180 	.word	0x20001180
 800b044:	e000ed20 	.word	0xe000ed20
 800b048:	20000010 	.word	0x20000010

0800b04c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	607b      	str	r3, [r7, #4]
}
 800b064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b066:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <vPortEnterCritical+0x58>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3301      	adds	r3, #1
 800b06c:	4a0d      	ldr	r2, [pc, #52]	; (800b0a4 <vPortEnterCritical+0x58>)
 800b06e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b070:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <vPortEnterCritical+0x58>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b01      	cmp	r3, #1
 800b076:	d10f      	bne.n	800b098 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b078:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <vPortEnterCritical+0x5c>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <vPortEnterCritical+0x4c>
	__asm volatile
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	603b      	str	r3, [r7, #0]
}
 800b094:	bf00      	nop
 800b096:	e7fe      	b.n	800b096 <vPortEnterCritical+0x4a>
	}
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bc80      	pop	{r7}
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	20000010 	.word	0x20000010
 800b0a8:	e000ed04 	.word	0xe000ed04

0800b0ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0b2:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <vPortExitCritical+0x4c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <vPortExitCritical+0x24>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	607b      	str	r3, [r7, #4]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0d0:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <vPortExitCritical+0x4c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	4a08      	ldr	r2, [pc, #32]	; (800b0f8 <vPortExitCritical+0x4c>)
 800b0d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b0da:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <vPortExitCritical+0x4c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <vPortExitCritical+0x42>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	f383 8811 	msr	BASEPRI, r3
}
 800b0ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr
 800b0f8:	20000010 	.word	0x20000010
 800b0fc:	00000000 	.word	0x00000000

0800b100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b100:	f3ef 8009 	mrs	r0, PSP
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	4b0d      	ldr	r3, [pc, #52]	; (800b140 <pxCurrentTCBConst>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b110:	6010      	str	r0, [r2, #0]
 800b112:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b11a:	f380 8811 	msr	BASEPRI, r0
 800b11e:	f7fe fdf5 	bl	8009d0c <vTaskSwitchContext>
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8811 	msr	BASEPRI, r0
 800b12a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b12e:	6819      	ldr	r1, [r3, #0]
 800b130:	6808      	ldr	r0, [r1, #0]
 800b132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b136:	f380 8809 	msr	PSP, r0
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	4770      	bx	lr

0800b140 <pxCurrentTCBConst>:
 800b140:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b144:	bf00      	nop
 800b146:	bf00      	nop

0800b148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	607b      	str	r3, [r7, #4]
}
 800b160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b162:	f7fe fd19 	bl	8009b98 <xTaskIncrementTick>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d003      	beq.n	800b174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <SysTick_Handler+0x40>)
 800b16e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b172:	601a      	str	r2, [r3, #0]
 800b174:	2300      	movs	r3, #0
 800b176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	f383 8811 	msr	BASEPRI, r3
}
 800b17e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b180:	bf00      	nop
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	e000ed04 	.word	0xe000ed04

0800b18c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4b5d      	ldr	r3, [pc, #372]	; (800b30c <vPortSuppressTicksAndSleep+0x180>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d902      	bls.n	800b1a4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800b19e:	4b5b      	ldr	r3, [pc, #364]	; (800b30c <vPortSuppressTicksAndSleep+0x180>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b1a4:	4b5a      	ldr	r3, [pc, #360]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a59      	ldr	r2, [pc, #356]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b1aa:	f023 0301 	bic.w	r3, r3, #1
 800b1ae:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b1b0:	4b58      	ldr	r3, [pc, #352]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4957      	ldr	r1, [pc, #348]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b1ba:	6809      	ldr	r1, [r1, #0]
 800b1bc:	fb01 f303 	mul.w	r3, r1, r3
 800b1c0:	4413      	add	r3, r2
 800b1c2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b1c4:	4b55      	ldr	r3, [pc, #340]	; (800b31c <vPortSuppressTicksAndSleep+0x190>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	69fa      	ldr	r2, [r7, #28]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d904      	bls.n	800b1d8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800b1ce:	4b53      	ldr	r3, [pc, #332]	; (800b31c <vPortSuppressTicksAndSleep+0x190>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800b1d8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b1da:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b1de:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b1e2:	f7fe ff71 	bl	800a0c8 <eTaskConfirmSleepModeStatus>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d110      	bne.n	800b20e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b1ec:	4b49      	ldr	r3, [pc, #292]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b1ee:	4a4c      	ldr	r2, [pc, #304]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b1f4:	4b46      	ldr	r3, [pc, #280]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a45      	ldr	r2, [pc, #276]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b200:	4b45      	ldr	r3, [pc, #276]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a46      	ldr	r2, [pc, #280]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b206:	3b01      	subs	r3, #1
 800b208:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800b20a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800b20c:	e07a      	b.n	800b304 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b20e:	4a44      	ldr	r2, [pc, #272]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b214:	4b3f      	ldr	r3, [pc, #252]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b21a:	4b3d      	ldr	r3, [pc, #244]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a3c      	ldr	r2, [pc, #240]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b220:	f043 0301 	orr.w	r3, r3, #1
 800b224:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800b22a:	f107 030c 	add.w	r3, r7, #12
 800b22e:	4618      	mov	r0, r3
 800b230:	f7f5 fe9c 	bl	8000f6c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800b23a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800b23e:	bf30      	wfi
				__asm volatile( "isb" );
 800b240:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	4618      	mov	r0, r3
 800b248:	f7f5 fe99 	bl	8000f7e <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b24c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b24e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b252:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b256:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b258:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b25c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b260:	4b2b      	ldr	r3, [pc, #172]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b262:	2206      	movs	r2, #6
 800b264:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b266:	4b2a      	ldr	r3, [pc, #168]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d01d      	beq.n	800b2ae <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b272:	4b29      	ldr	r3, [pc, #164]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b278:	6819      	ldr	r1, [r3, #0]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	1acb      	subs	r3, r1, r3
 800b27e:	4413      	add	r3, r2
 800b280:	3b01      	subs	r3, #1
 800b282:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b284:	4b25      	ldr	r3, [pc, #148]	; (800b31c <vPortSuppressTicksAndSleep+0x190>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d304      	bcc.n	800b298 <vPortSuppressTicksAndSleep+0x10c>
 800b28e:	4b22      	ldr	r3, [pc, #136]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	d903      	bls.n	800b2a0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b298:	4b1f      	ldr	r3, [pc, #124]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3b01      	subs	r3, #1
 800b29e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b2a0:	4a1f      	ldr	r2, [pc, #124]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	61bb      	str	r3, [r7, #24]
 800b2ac:	e018      	b.n	800b2e0 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a19      	ldr	r2, [pc, #100]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	fb02 f203 	mul.w	r2, r2, r3
 800b2b8:	4b16      	ldr	r3, [pc, #88]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b2c0:	4b15      	ldr	r3, [pc, #84]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ca:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	4a11      	ldr	r2, [pc, #68]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b2d2:	6812      	ldr	r2, [r2, #0]
 800b2d4:	fb02 f203 	mul.w	r2, r2, r3
 800b2d8:	4911      	ldr	r1, [pc, #68]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2e0:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <vPortSuppressTicksAndSleep+0x188>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b2e6:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a09      	ldr	r2, [pc, #36]	; (800b310 <vPortSuppressTicksAndSleep+0x184>)
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800b2f2:	69b8      	ldr	r0, [r7, #24]
 800b2f4:	f7fe fc2a 	bl	8009b4c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b2f8:	4b07      	ldr	r3, [pc, #28]	; (800b318 <vPortSuppressTicksAndSleep+0x18c>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a08      	ldr	r2, [pc, #32]	; (800b320 <vPortSuppressTicksAndSleep+0x194>)
 800b2fe:	3b01      	subs	r3, #1
 800b300:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800b302:	b662      	cpsie	i
	}
 800b304:	bf00      	nop
 800b306:	3720      	adds	r7, #32
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20001174 	.word	0x20001174
 800b310:	e000e010 	.word	0xe000e010
 800b314:	e000e018 	.word	0xe000e018
 800b318:	20001170 	.word	0x20001170
 800b31c:	20001178 	.word	0x20001178
 800b320:	e000e014 	.word	0xe000e014

0800b324 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b328:	4b14      	ldr	r3, [pc, #80]	; (800b37c <vPortSetupTimerInterrupt+0x58>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a14      	ldr	r2, [pc, #80]	; (800b380 <vPortSetupTimerInterrupt+0x5c>)
 800b32e:	fba2 2303 	umull	r2, r3, r2, r3
 800b332:	099b      	lsrs	r3, r3, #6
 800b334:	4a13      	ldr	r2, [pc, #76]	; (800b384 <vPortSetupTimerInterrupt+0x60>)
 800b336:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b338:	4b12      	ldr	r3, [pc, #72]	; (800b384 <vPortSetupTimerInterrupt+0x60>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800b340:	fbb2 f3f3 	udiv	r3, r2, r3
 800b344:	4a10      	ldr	r2, [pc, #64]	; (800b388 <vPortSetupTimerInterrupt+0x64>)
 800b346:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b348:	4b10      	ldr	r3, [pc, #64]	; (800b38c <vPortSetupTimerInterrupt+0x68>)
 800b34a:	222d      	movs	r2, #45	; 0x2d
 800b34c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b34e:	4b10      	ldr	r3, [pc, #64]	; (800b390 <vPortSetupTimerInterrupt+0x6c>)
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b354:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <vPortSetupTimerInterrupt+0x70>)
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b35a:	4b08      	ldr	r3, [pc, #32]	; (800b37c <vPortSetupTimerInterrupt+0x58>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a08      	ldr	r2, [pc, #32]	; (800b380 <vPortSetupTimerInterrupt+0x5c>)
 800b360:	fba2 2303 	umull	r2, r3, r2, r3
 800b364:	099b      	lsrs	r3, r3, #6
 800b366:	4a0c      	ldr	r2, [pc, #48]	; (800b398 <vPortSetupTimerInterrupt+0x74>)
 800b368:	3b01      	subs	r3, #1
 800b36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b36c:	4b08      	ldr	r3, [pc, #32]	; (800b390 <vPortSetupTimerInterrupt+0x6c>)
 800b36e:	2207      	movs	r2, #7
 800b370:	601a      	str	r2, [r3, #0]
}
 800b372:	bf00      	nop
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	20000004 	.word	0x20000004
 800b380:	10624dd3 	.word	0x10624dd3
 800b384:	20001170 	.word	0x20001170
 800b388:	20001174 	.word	0x20001174
 800b38c:	20001178 	.word	0x20001178
 800b390:	e000e010 	.word	0xe000e010
 800b394:	e000e018 	.word	0xe000e018
 800b398:	e000e014 	.word	0xe000e014

0800b39c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3a2:	f3ef 8305 	mrs	r3, IPSR
 800b3a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b0f      	cmp	r3, #15
 800b3ac:	d914      	bls.n	800b3d8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3ae:	4a16      	ldr	r2, [pc, #88]	; (800b408 <vPortValidateInterruptPriority+0x6c>)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3b8:	4b14      	ldr	r3, [pc, #80]	; (800b40c <vPortValidateInterruptPriority+0x70>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	7afa      	ldrb	r2, [r7, #11]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d20a      	bcs.n	800b3d8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	607b      	str	r3, [r7, #4]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3d8:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <vPortValidateInterruptPriority+0x74>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <vPortValidateInterruptPriority+0x78>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d90a      	bls.n	800b3fe <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	603b      	str	r3, [r7, #0]
}
 800b3fa:	bf00      	nop
 800b3fc:	e7fe      	b.n	800b3fc <vPortValidateInterruptPriority+0x60>
	}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	bc80      	pop	{r7}
 800b406:	4770      	bx	lr
 800b408:	e000e3f0 	.word	0xe000e3f0
 800b40c:	2000117c 	.word	0x2000117c
 800b410:	e000ed0c 	.word	0xe000ed0c
 800b414:	20001180 	.word	0x20001180

0800b418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08a      	sub	sp, #40	; 0x28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b420:	2300      	movs	r3, #0
 800b422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b424:	f7fe faa2 	bl	800996c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b428:	4b58      	ldr	r3, [pc, #352]	; (800b58c <pvPortMalloc+0x174>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b430:	f000 f910 	bl	800b654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b434:	4b56      	ldr	r3, [pc, #344]	; (800b590 <pvPortMalloc+0x178>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 808e 	bne.w	800b55e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01d      	beq.n	800b484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b448:	2208      	movs	r2, #8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4413      	add	r3, r2
 800b44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f023 0307 	bic.w	r3, r3, #7
 800b460:	3308      	adds	r3, #8
 800b462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <pvPortMalloc+0x6c>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	617b      	str	r3, [r7, #20]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d069      	beq.n	800b55e <pvPortMalloc+0x146>
 800b48a:	4b42      	ldr	r3, [pc, #264]	; (800b594 <pvPortMalloc+0x17c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	429a      	cmp	r2, r3
 800b492:	d864      	bhi.n	800b55e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b494:	4b40      	ldr	r3, [pc, #256]	; (800b598 <pvPortMalloc+0x180>)
 800b496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b498:	4b3f      	ldr	r3, [pc, #252]	; (800b598 <pvPortMalloc+0x180>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b49e:	e004      	b.n	800b4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d903      	bls.n	800b4bc <pvPortMalloc+0xa4>
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f1      	bne.n	800b4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4bc:	4b33      	ldr	r3, [pc, #204]	; (800b58c <pvPortMalloc+0x174>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d04b      	beq.n	800b55e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2208      	movs	r2, #8
 800b4cc:	4413      	add	r3, r2
 800b4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	1ad2      	subs	r2, r2, r3
 800b4e0:	2308      	movs	r3, #8
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d91f      	bls.n	800b528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <pvPortMalloc+0xf8>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	613b      	str	r3, [r7, #16]
}
 800b50c:	bf00      	nop
 800b50e:	e7fe      	b.n	800b50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b522:	69b8      	ldr	r0, [r7, #24]
 800b524:	f000 f8f8 	bl	800b718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b528:	4b1a      	ldr	r3, [pc, #104]	; (800b594 <pvPortMalloc+0x17c>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	4a18      	ldr	r2, [pc, #96]	; (800b594 <pvPortMalloc+0x17c>)
 800b534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b536:	4b17      	ldr	r3, [pc, #92]	; (800b594 <pvPortMalloc+0x17c>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	4b18      	ldr	r3, [pc, #96]	; (800b59c <pvPortMalloc+0x184>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d203      	bcs.n	800b54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b542:	4b14      	ldr	r3, [pc, #80]	; (800b594 <pvPortMalloc+0x17c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a15      	ldr	r2, [pc, #84]	; (800b59c <pvPortMalloc+0x184>)
 800b548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	4b10      	ldr	r3, [pc, #64]	; (800b590 <pvPortMalloc+0x178>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	431a      	orrs	r2, r3
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b55e:	f7fe fa49 	bl	80099f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	f003 0307 	and.w	r3, r3, #7
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00a      	beq.n	800b582 <pvPortMalloc+0x16a>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	60fb      	str	r3, [r7, #12]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <pvPortMalloc+0x168>
	return pvReturn;
 800b582:	69fb      	ldr	r3, [r7, #28]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3728      	adds	r7, #40	; 0x28
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	20001d8c 	.word	0x20001d8c
 800b590:	20001d98 	.word	0x20001d98
 800b594:	20001d90 	.word	0x20001d90
 800b598:	20001d84 	.word	0x20001d84
 800b59c:	20001d94 	.word	0x20001d94

0800b5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d048      	beq.n	800b644 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5b2:	2308      	movs	r3, #8
 800b5b4:	425b      	negs	r3, r3
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	4b21      	ldr	r3, [pc, #132]	; (800b64c <vPortFree+0xac>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10a      	bne.n	800b5e4 <vPortFree+0x44>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	60fb      	str	r3, [r7, #12]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00a      	beq.n	800b602 <vPortFree+0x62>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	60bb      	str	r3, [r7, #8]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	4b11      	ldr	r3, [pc, #68]	; (800b64c <vPortFree+0xac>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4013      	ands	r3, r2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d019      	beq.n	800b644 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d115      	bne.n	800b644 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <vPortFree+0xac>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	43db      	mvns	r3, r3
 800b622:	401a      	ands	r2, r3
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b628:	f7fe f9a0 	bl	800996c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <vPortFree+0xb0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4413      	add	r3, r2
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <vPortFree+0xb0>)
 800b638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 f86c 	bl	800b718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b640:	f7fe f9d8 	bl	80099f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b644:	bf00      	nop
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20001d98 	.word	0x20001d98
 800b650:	20001d90 	.word	0x20001d90

0800b654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b65a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <prvHeapInit+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3307      	adds	r3, #7
 800b672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <prvHeapInit+0xac>)
 800b684:	4413      	add	r3, r2
 800b686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b68c:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <prvHeapInit+0xb0>)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b692:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <prvHeapInit+0xb0>)
 800b694:	2200      	movs	r2, #0
 800b696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0307 	bic.w	r3, r3, #7
 800b6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <prvHeapInit+0xb4>)
 800b6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <prvHeapInit+0xb4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <prvHeapInit+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvHeapInit+0xb4>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <prvHeapInit+0xb8>)
 800b6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <prvHeapInit+0xbc>)
 800b6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <prvHeapInit+0xc0>)
 800b6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bc80      	pop	{r7}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20001184 	.word	0x20001184
 800b704:	20001d84 	.word	0x20001d84
 800b708:	20001d8c 	.word	0x20001d8c
 800b70c:	20001d94 	.word	0x20001d94
 800b710:	20001d90 	.word	0x20001d90
 800b714:	20001d98 	.word	0x20001d98

0800b718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b720:	4b27      	ldr	r3, [pc, #156]	; (800b7c0 <prvInsertBlockIntoFreeList+0xa8>)
 800b722:	60fb      	str	r3, [r7, #12]
 800b724:	e002      	b.n	800b72c <prvInsertBlockIntoFreeList+0x14>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d8f7      	bhi.n	800b726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d108      	bne.n	800b75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	441a      	add	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d118      	bne.n	800b7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b14      	ldr	r3, [pc, #80]	; (800b7c4 <prvInsertBlockIntoFreeList+0xac>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d00d      	beq.n	800b796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e008      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <prvInsertBlockIntoFreeList+0xac>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d002      	beq.n	800b7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bc80      	pop	{r7}
 800b7be:	4770      	bx	lr
 800b7c0:	20001d84 	.word	0x20001d84
 800b7c4:	20001d8c 	.word	0x20001d8c

0800b7c8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800b7d0:	4a21      	ldr	r2, [pc, #132]	; (800b858 <RadioInit+0x90>)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800b7d6:	4b21      	ldr	r3, [pc, #132]	; (800b85c <RadioInit+0x94>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800b7dc:	4b1f      	ldr	r3, [pc, #124]	; (800b85c <RadioInit+0x94>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800b7e2:	4b1e      	ldr	r3, [pc, #120]	; (800b85c <RadioInit+0x94>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800b7e8:	481d      	ldr	r0, [pc, #116]	; (800b860 <RadioInit+0x98>)
 800b7ea:	f001 fe7b 	bl	800d4e4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f001 f818 	bl	800c824 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800b7f4:	f002 f90c 	bl	800da10 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f002 fc62 	bl	800e0c4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800b800:	2204      	movs	r2, #4
 800b802:	2100      	movs	r1, #0
 800b804:	2001      	movs	r0, #1
 800b806:	f002 fa8d 	bl	800dd24 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b812:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b816:	f002 f9c1 	bl	800db9c <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800b81a:	f000 fe95 	bl	800c548 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800b81e:	2300      	movs	r3, #0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	4b10      	ldr	r3, [pc, #64]	; (800b864 <RadioInit+0x9c>)
 800b824:	2200      	movs	r2, #0
 800b826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b82a:	480f      	ldr	r0, [pc, #60]	; (800b868 <RadioInit+0xa0>)
 800b82c:	f003 faa6 	bl	800ed7c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800b830:	2300      	movs	r3, #0
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	4b0d      	ldr	r3, [pc, #52]	; (800b86c <RadioInit+0xa4>)
 800b836:	2200      	movs	r2, #0
 800b838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b83c:	480c      	ldr	r0, [pc, #48]	; (800b870 <RadioInit+0xa8>)
 800b83e:	f003 fa9d 	bl	800ed7c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800b842:	4809      	ldr	r0, [pc, #36]	; (800b868 <RadioInit+0xa0>)
 800b844:	f003 fb3e 	bl	800eec4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800b848:	4809      	ldr	r0, [pc, #36]	; (800b870 <RadioInit+0xa8>)
 800b84a:	f003 fb3b 	bl	800eec4 <UTIL_TIMER_Stop>
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20001e9c 	.word	0x20001e9c
 800b85c:	20002924 	.word	0x20002924
 800b860:	0800c909 	.word	0x0800c909
 800b864:	0800c891 	.word	0x0800c891
 800b868:	2000297c 	.word	0x2000297c
 800b86c:	0800c8a5 	.word	0x0800c8a5
 800b870:	20002994 	.word	0x20002994

0800b874 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800b878:	f001 fe76 	bl	800d568 <SUBGRF_GetOperatingMode>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b07      	cmp	r3, #7
 800b880:	d00a      	beq.n	800b898 <RadioGetStatus+0x24>
 800b882:	2b07      	cmp	r3, #7
 800b884:	dc0a      	bgt.n	800b89c <RadioGetStatus+0x28>
 800b886:	2b04      	cmp	r3, #4
 800b888:	d002      	beq.n	800b890 <RadioGetStatus+0x1c>
 800b88a:	2b05      	cmp	r3, #5
 800b88c:	d002      	beq.n	800b894 <RadioGetStatus+0x20>
 800b88e:	e005      	b.n	800b89c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800b890:	2302      	movs	r3, #2
 800b892:	e004      	b.n	800b89e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800b894:	2301      	movs	r3, #1
 800b896:	e002      	b.n	800b89e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800b898:	2303      	movs	r3, #3
 800b89a:	e000      	b.n	800b89e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800b89c:	2300      	movs	r3, #0
    }
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800b8ae:	4a25      	ldr	r2, [pc, #148]	; (800b944 <RadioSetModem+0xa0>)
 800b8b0:	79fb      	ldrb	r3, [r7, #7]
 800b8b2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800b8b4:	79fb      	ldrb	r3, [r7, #7]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f002 ffc9 	bl	800e84e <RFW_SetRadioModem>
    switch( modem )
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d80b      	bhi.n	800b8dc <RadioSetModem+0x38>
 800b8c4:	a201      	add	r2, pc, #4	; (adr r2, 800b8cc <RadioSetModem+0x28>)
 800b8c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ca:	bf00      	nop
 800b8cc:	0800b8eb 	.word	0x0800b8eb
 800b8d0:	0800b911 	.word	0x0800b911
 800b8d4:	0800b91f 	.word	0x0800b91f
 800b8d8:	0800b92d 	.word	0x0800b92d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b8dc:	2000      	movs	r0, #0
 800b8de:	f002 f9fb 	bl	800dcd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b8e2:	4b18      	ldr	r3, [pc, #96]	; (800b944 <RadioSetModem+0xa0>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	735a      	strb	r2, [r3, #13]
        break;
 800b8e8:	e028      	b.n	800b93c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f002 f9f4 	bl	800dcd8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800b8f0:	4b14      	ldr	r3, [pc, #80]	; (800b944 <RadioSetModem+0xa0>)
 800b8f2:	7b5a      	ldrb	r2, [r3, #13]
 800b8f4:	4b13      	ldr	r3, [pc, #76]	; (800b944 <RadioSetModem+0xa0>)
 800b8f6:	7b1b      	ldrb	r3, [r3, #12]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d01e      	beq.n	800b93a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800b8fc:	4b11      	ldr	r3, [pc, #68]	; (800b944 <RadioSetModem+0xa0>)
 800b8fe:	7b1a      	ldrb	r2, [r3, #12]
 800b900:	4b10      	ldr	r3, [pc, #64]	; (800b944 <RadioSetModem+0xa0>)
 800b902:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <RadioSetModem+0xa0>)
 800b906:	7b5b      	ldrb	r3, [r3, #13]
 800b908:	4618      	mov	r0, r3
 800b90a:	f000 ff8b 	bl	800c824 <RadioSetPublicNetwork>
        }
        break;
 800b90e:	e014      	b.n	800b93a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b910:	2002      	movs	r0, #2
 800b912:	f002 f9e1 	bl	800dcd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <RadioSetModem+0xa0>)
 800b918:	2200      	movs	r2, #0
 800b91a:	735a      	strb	r2, [r3, #13]
        break;
 800b91c:	e00e      	b.n	800b93c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800b91e:	2002      	movs	r0, #2
 800b920:	f002 f9da 	bl	800dcd8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <RadioSetModem+0xa0>)
 800b926:	2200      	movs	r2, #0
 800b928:	735a      	strb	r2, [r3, #13]
        break;
 800b92a:	e007      	b.n	800b93c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800b92c:	2000      	movs	r0, #0
 800b92e:	f002 f9d3 	bl	800dcd8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800b932:	4b04      	ldr	r3, [pc, #16]	; (800b944 <RadioSetModem+0xa0>)
 800b934:	2200      	movs	r2, #0
 800b936:	735a      	strb	r2, [r3, #13]
        break;
 800b938:	e000      	b.n	800b93c <RadioSetModem+0x98>
        break;
 800b93a:	bf00      	nop
    }
}
 800b93c:	bf00      	nop
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20002924 	.word	0x20002924

0800b948 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f002 f97f 	bl	800dc54 <SUBGRF_SetRfFrequency>
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b090      	sub	sp, #64	; 0x40
 800b962:	af0a      	add	r7, sp, #40	; 0x28
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	603b      	str	r3, [r7, #0]
 800b96a:	4613      	mov	r3, r2
 800b96c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800b96e:	2301      	movs	r3, #1
 800b970:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800b97a:	f000 fdf8 	bl	800c56e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800b97e:	2000      	movs	r0, #0
 800b980:	f7ff ff90 	bl	800b8a4 <RadioSetModem>

    RadioSetChannel( freq );
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f7ff ffdf 	bl	800b948 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800b98a:	2301      	movs	r3, #1
 800b98c:	9309      	str	r3, [sp, #36]	; 0x24
 800b98e:	2300      	movs	r3, #0
 800b990:	9308      	str	r3, [sp, #32]
 800b992:	2300      	movs	r3, #0
 800b994:	9307      	str	r3, [sp, #28]
 800b996:	2300      	movs	r3, #0
 800b998:	9306      	str	r3, [sp, #24]
 800b99a:	2300      	movs	r3, #0
 800b99c:	9305      	str	r3, [sp, #20]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9303      	str	r3, [sp, #12]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9302      	str	r3, [sp, #8]
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	9301      	str	r3, [sp, #4]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	2000      	movs	r0, #0
 800b9bc:	f000 f840 	bl	800ba40 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f000 fddb 	bl	800c57c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800b9c6:	f000 ff5b 	bl	800c880 <RadioGetWakeupTime>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7f6 fdbd 	bl	800254c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800b9d2:	f003 fb11 	bl	800eff8 <UTIL_TIMER_GetCurrentTime>
 800b9d6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800b9d8:	e00d      	b.n	800b9f6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f000 fea0 	bl	800c720 <RadioRssi>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800b9e4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800b9e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	dd02      	ble.n	800b9f6 <RadioIsChannelFree+0x98>
        {
            status = false;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	75fb      	strb	r3, [r7, #23]
            break;
 800b9f4:	e006      	b.n	800ba04 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800b9f6:	6938      	ldr	r0, [r7, #16]
 800b9f8:	f003 fb10 	bl	800f01c <UTIL_TIMER_GetElapsedTime>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d8ea      	bhi.n	800b9da <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800ba04:	f000 fdb3 	bl	800c56e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800ba08:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800ba1c:	2001      	movs	r0, #1
 800ba1e:	f7ff ff41 	bl	800b8a4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800ba22:	2300      	movs	r3, #0
 800ba24:	2200      	movs	r2, #0
 800ba26:	2100      	movs	r1, #0
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f002 f8b7 	bl	800db9c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800ba2e:	f001 fe6c 	bl	800d70a <SUBGRF_GetRandom>
 800ba32:	6078      	str	r0, [r7, #4]

    return rnd;
 800ba34:	687b      	ldr	r3, [r7, #4]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3708      	adds	r7, #8
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
	...

0800ba40 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08a      	sub	sp, #40	; 0x28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]
 800ba50:	4613      	mov	r3, r2
 800ba52:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800ba54:	4abd      	ldr	r2, [pc, #756]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800ba56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ba5a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800ba5c:	f002 feb5 	bl	800e7ca <RFW_DeInit>
    if( rxContinuous == true )
 800ba60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800ba6c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800ba74:	4ab6      	ldr	r2, [pc, #728]	; (800bd50 <RadioSetRxConfig+0x310>)
 800ba76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba7a:	7013      	strb	r3, [r2, #0]
 800ba7c:	e002      	b.n	800ba84 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800ba7e:	4bb4      	ldr	r3, [pc, #720]	; (800bd50 <RadioSetRxConfig+0x310>)
 800ba80:	22ff      	movs	r2, #255	; 0xff
 800ba82:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
 800ba86:	2b04      	cmp	r3, #4
 800ba88:	d009      	beq.n	800ba9e <RadioSetRxConfig+0x5e>
 800ba8a:	2b04      	cmp	r3, #4
 800ba8c:	f300 81da 	bgt.w	800be44 <RadioSetRxConfig+0x404>
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80bf 	beq.w	800bc14 <RadioSetRxConfig+0x1d4>
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	f000 812c 	beq.w	800bcf4 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800ba9c:	e1d2      	b.n	800be44 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800ba9e:	2001      	movs	r0, #1
 800baa0:	f001 ff78 	bl	800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800baa4:	4ba9      	ldr	r3, [pc, #676]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800baac:	4aa7      	ldr	r2, [pc, #668]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800bab2:	4ba6      	ldr	r3, [pc, #664]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bab4:	2209      	movs	r2, #9
 800bab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800baba:	4ba4      	ldr	r3, [pc, #656]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800babc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bac0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bac2:	68b8      	ldr	r0, [r7, #8]
 800bac4:	f002 fdb2 	bl	800e62c <SUBGRF_GetFskBandwidthRegValue>
 800bac8:	4603      	mov	r3, r0
 800baca:	461a      	mov	r2, r3
 800bacc:	4b9f      	ldr	r3, [pc, #636]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bad2:	4b9e      	ldr	r3, [pc, #632]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bad8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bada:	00db      	lsls	r3, r3, #3
 800badc:	b29a      	uxth	r2, r3
 800bade:	4b9b      	ldr	r3, [pc, #620]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bae0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800bae2:	4b9a      	ldr	r3, [pc, #616]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800bae8:	4b98      	ldr	r3, [pc, #608]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800baea:	2210      	movs	r2, #16
 800baec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800baee:	4b97      	ldr	r3, [pc, #604]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800baf4:	4b95      	ldr	r3, [pc, #596]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800bafa:	4b95      	ldr	r3, [pc, #596]	; (800bd50 <RadioSetRxConfig+0x310>)
 800bafc:	781a      	ldrb	r2, [r3, #0]
 800bafe:	4b93      	ldr	r3, [pc, #588]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bb00:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800bb02:	4b92      	ldr	r3, [pc, #584]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800bb08:	4b90      	ldr	r3, [pc, #576]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800bb0e:	2004      	movs	r0, #4
 800bb10:	f7ff fec8 	bl	800b8a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bb14:	488f      	ldr	r0, [pc, #572]	; (800bd54 <RadioSetRxConfig+0x314>)
 800bb16:	f002 f96b 	bl	800ddf0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bb1a:	488f      	ldr	r0, [pc, #572]	; (800bd58 <RadioSetRxConfig+0x318>)
 800bb1c:	f002 fa34 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bb20:	4a8e      	ldr	r2, [pc, #568]	; (800bd5c <RadioSetRxConfig+0x31c>)
 800bb22:	f107 031c 	add.w	r3, r7, #28
 800bb26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800bb2e:	f107 031c 	add.w	r3, r7, #28
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fd67 	bl	800d606 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bb38:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bb3c:	f001 fdb2 	bl	800d6a4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800bb40:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800bb44:	f000 fe0b 	bl	800c75e <RadioRead>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800bb4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb52:	f023 0310 	bic.w	r3, r3, #16
 800bb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800bb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb5e:	4619      	mov	r1, r3
 800bb60:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800bb64:	f000 fde9 	bl	800c73a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800bb68:	2104      	movs	r1, #4
 800bb6a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800bb6e:	f000 fde4 	bl	800c73a <RadioWrite>
            modReg= RadioRead(0x89b);
 800bb72:	f640 009b 	movw	r0, #2203	; 0x89b
 800bb76:	f000 fdf2 	bl	800c75e <RadioRead>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800bb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb84:	f023 031c 	bic.w	r3, r3, #28
 800bb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800bb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb90:	f043 0308 	orr.w	r3, r3, #8
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	4619      	mov	r1, r3
 800bb98:	f640 009b 	movw	r0, #2203	; 0x89b
 800bb9c:	f000 fdcd 	bl	800c73a <RadioWrite>
            modReg= RadioRead(0x6d1);
 800bba0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800bba4:	f000 fddb 	bl	800c75e <RadioRead>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800bbae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbb2:	f023 0318 	bic.w	r3, r3, #24
 800bbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800bbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbbe:	f043 0318 	orr.w	r3, r3, #24
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800bbca:	f000 fdb6 	bl	800c73a <RadioWrite>
            modReg= RadioRead(0x6ac);
 800bbce:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800bbd2:	f000 fdc4 	bl	800c75e <RadioRead>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800bbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800bbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbec:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800bbf8:	f000 fd9f 	bl	800c73a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800bbfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bbfe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800bc02:	fb02 f303 	mul.w	r3, r2, r3
 800bc06:	461a      	mov	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc0e:	4a4f      	ldr	r2, [pc, #316]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc10:	6093      	str	r3, [r2, #8]
            break;
 800bc12:	e118      	b.n	800be46 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800bc14:	2000      	movs	r0, #0
 800bc16:	f001 febd 	bl	800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800bc1a:	4b4c      	ldr	r3, [pc, #304]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800bc22:	4a4a      	ldr	r2, [pc, #296]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800bc28:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc2a:	220b      	movs	r2, #11
 800bc2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bc30:	68b8      	ldr	r0, [r7, #8]
 800bc32:	f002 fcfb 	bl	800e62c <SUBGRF_GetFskBandwidthRegValue>
 800bc36:	4603      	mov	r3, r0
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4b44      	ldr	r3, [pc, #272]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800bc40:	4b42      	ldr	r3, [pc, #264]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bc46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bc48:	00db      	lsls	r3, r3, #3
 800bc4a:	b29a      	uxth	r2, r3
 800bc4c:	4b3f      	ldr	r3, [pc, #252]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc4e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800bc50:	4b3e      	ldr	r3, [pc, #248]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc52:	2204      	movs	r2, #4
 800bc54:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800bc56:	4b3d      	ldr	r3, [pc, #244]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc58:	2218      	movs	r2, #24
 800bc5a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bc5c:	4b3b      	ldr	r3, [pc, #236]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bc62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bc66:	f083 0301 	eor.w	r3, r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc70:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800bc72:	4b37      	ldr	r3, [pc, #220]	; (800bd50 <RadioSetRxConfig+0x310>)
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	4b35      	ldr	r3, [pc, #212]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc78:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800bc7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bc82:	4b32      	ldr	r3, [pc, #200]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc84:	22f2      	movs	r2, #242	; 0xf2
 800bc86:	75da      	strb	r2, [r3, #23]
 800bc88:	e002      	b.n	800bc90 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800bc8a:	4b30      	ldr	r3, [pc, #192]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bc90:	4b2e      	ldr	r3, [pc, #184]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc92:	2201      	movs	r2, #1
 800bc94:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800bc96:	f000 fc6a 	bl	800c56e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bc9a:	4b2c      	ldr	r3, [pc, #176]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bc9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bf14      	ite	ne
 800bca4:	2301      	movne	r3, #1
 800bca6:	2300      	moveq	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff fdfa 	bl	800b8a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bcb0:	4828      	ldr	r0, [pc, #160]	; (800bd54 <RadioSetRxConfig+0x314>)
 800bcb2:	f002 f89d 	bl	800ddf0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bcb6:	4828      	ldr	r0, [pc, #160]	; (800bd58 <RadioSetRxConfig+0x318>)
 800bcb8:	f002 f966 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bcbc:	4a28      	ldr	r2, [pc, #160]	; (800bd60 <RadioSetRxConfig+0x320>)
 800bcbe:	f107 0314 	add.w	r3, r7, #20
 800bcc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcc6:	e883 0003 	stmia.w	r3, {r0, r1}
 800bcca:	f107 0314 	add.w	r3, r7, #20
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f001 fc99 	bl	800d606 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bcd4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bcd8:	f001 fce4 	bl	800d6a4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800bcdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bcde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcee:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bcf0:	6093      	str	r3, [r2, #8]
            break;
 800bcf2:	e0a8      	b.n	800be46 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800bcf4:	2000      	movs	r0, #0
 800bcf6:	f001 fe4d 	bl	800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bd08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800bd0c:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <RadioSetRxConfig+0x324>)
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	4413      	add	r3, r2
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	4b0d      	ldr	r3, [pc, #52]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bd16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800bd1a:	4a0c      	ldr	r2, [pc, #48]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d105      	bne.n	800bd34 <RadioSetRxConfig+0x2f4>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b0b      	cmp	r3, #11
 800bd2c:	d008      	beq.n	800bd40 <RadioSetRxConfig+0x300>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b0c      	cmp	r3, #12
 800bd32:	d005      	beq.n	800bd40 <RadioSetRxConfig+0x300>
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d116      	bne.n	800bd68 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	d113      	bne.n	800bd68 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800bd40:	4b02      	ldr	r3, [pc, #8]	; (800bd4c <RadioSetRxConfig+0x30c>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bd48:	e012      	b.n	800bd70 <RadioSetRxConfig+0x330>
 800bd4a:	bf00      	nop
 800bd4c:	20002924 	.word	0x20002924
 800bd50:	20000014 	.word	0x20000014
 800bd54:	2000295c 	.word	0x2000295c
 800bd58:	20002932 	.word	0x20002932
 800bd5c:	0800fcac 	.word	0x0800fcac
 800bd60:	0800fcb4 	.word	0x0800fcb4
 800bd64:	0800fec0 	.word	0x0800fec0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bd68:	4b39      	ldr	r3, [pc, #228]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bd70:	4b37      	ldr	r3, [pc, #220]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bd76:	4b36      	ldr	r3, [pc, #216]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd7c:	2b05      	cmp	r3, #5
 800bd7e:	d004      	beq.n	800bd8a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800bd80:	4b33      	ldr	r3, [pc, #204]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bd86:	2b06      	cmp	r3, #6
 800bd88:	d10a      	bne.n	800bda0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800bd8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd8c:	2b0b      	cmp	r3, #11
 800bd8e:	d803      	bhi.n	800bd98 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800bd90:	4b2f      	ldr	r3, [pc, #188]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd92:	220c      	movs	r2, #12
 800bd94:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800bd96:	e006      	b.n	800bda6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bd98:	4a2d      	ldr	r2, [pc, #180]	; (800be50 <RadioSetRxConfig+0x410>)
 800bd9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bd9c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800bd9e:	e002      	b.n	800bda6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bda0:	4a2b      	ldr	r2, [pc, #172]	; (800be50 <RadioSetRxConfig+0x410>)
 800bda2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800bda4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bda6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800bdaa:	4b29      	ldr	r3, [pc, #164]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdac:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bdae:	4b29      	ldr	r3, [pc, #164]	; (800be54 <RadioSetRxConfig+0x414>)
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	4b27      	ldr	r3, [pc, #156]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdb4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bdb6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800bdba:	4b25      	ldr	r3, [pc, #148]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdbc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bdc0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800bdc4:	4b22      	ldr	r3, [pc, #136]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800bdca:	f000 fbd0 	bl	800c56e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bdce:	4b20      	ldr	r3, [pc, #128]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fd60 	bl	800b8a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bde4:	481c      	ldr	r0, [pc, #112]	; (800be58 <RadioSetRxConfig+0x418>)
 800bde6:	f002 f803 	bl	800ddf0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bdea:	481c      	ldr	r0, [pc, #112]	; (800be5c <RadioSetRxConfig+0x41c>)
 800bdec:	f002 f8cc 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800bdf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f001 fddc 	bl	800d9b2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800bdfa:	4b15      	ldr	r3, [pc, #84]	; (800be50 <RadioSetRxConfig+0x410>)
 800bdfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be00:	2b01      	cmp	r3, #1
 800be02:	d10d      	bne.n	800be20 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800be04:	f240 7036 	movw	r0, #1846	; 0x736
 800be08:	f002 fa1a 	bl	800e240 <SUBGRF_ReadRegister>
 800be0c:	4603      	mov	r3, r0
 800be0e:	f023 0304 	bic.w	r3, r3, #4
 800be12:	b2db      	uxtb	r3, r3
 800be14:	4619      	mov	r1, r3
 800be16:	f240 7036 	movw	r0, #1846	; 0x736
 800be1a:	f002 f9fd 	bl	800e218 <SUBGRF_WriteRegister>
 800be1e:	e00c      	b.n	800be3a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800be20:	f240 7036 	movw	r0, #1846	; 0x736
 800be24:	f002 fa0c 	bl	800e240 <SUBGRF_ReadRegister>
 800be28:	4603      	mov	r3, r0
 800be2a:	f043 0304 	orr.w	r3, r3, #4
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	4619      	mov	r1, r3
 800be32:	f240 7036 	movw	r0, #1846	; 0x736
 800be36:	f002 f9ef 	bl	800e218 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <RadioSetRxConfig+0x410>)
 800be3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be40:	609a      	str	r2, [r3, #8]
            break;
 800be42:	e000      	b.n	800be46 <RadioSetRxConfig+0x406>
            break;
 800be44:	bf00      	nop
    }
}
 800be46:	bf00      	nop
 800be48:	3728      	adds	r7, #40	; 0x28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20002924 	.word	0x20002924
 800be54:	20000014 	.word	0x20000014
 800be58:	2000295c 	.word	0x2000295c
 800be5c:	20002932 	.word	0x20002932

0800be60 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60ba      	str	r2, [r7, #8]
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]
 800be6e:	460b      	mov	r3, r1
 800be70:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800be72:	f002 fcaa 	bl	800e7ca <RFW_DeInit>
    switch( modem )
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b03      	cmp	r3, #3
 800be7a:	f000 80d7 	beq.w	800c02c <RadioSetTxConfig+0x1cc>
 800be7e:	2b03      	cmp	r3, #3
 800be80:	f300 80e6 	bgt.w	800c050 <RadioSetTxConfig+0x1f0>
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <RadioSetTxConfig+0x2e>
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d061      	beq.n	800bf50 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800be8c:	e0e0      	b.n	800c050 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800be8e:	4b7c      	ldr	r3, [pc, #496]	; (800c080 <RadioSetTxConfig+0x220>)
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800be96:	4a7a      	ldr	r2, [pc, #488]	; (800c080 <RadioSetTxConfig+0x220>)
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800be9c:	4b78      	ldr	r3, [pc, #480]	; (800c080 <RadioSetTxConfig+0x220>)
 800be9e:	220b      	movs	r2, #11
 800bea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f002 fbc1 	bl	800e62c <SUBGRF_GetFskBandwidthRegValue>
 800beaa:	4603      	mov	r3, r0
 800beac:	461a      	mov	r2, r3
 800beae:	4b74      	ldr	r3, [pc, #464]	; (800c080 <RadioSetTxConfig+0x220>)
 800beb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800beb4:	4a72      	ldr	r2, [pc, #456]	; (800c080 <RadioSetTxConfig+0x220>)
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800beba:	4b71      	ldr	r3, [pc, #452]	; (800c080 <RadioSetTxConfig+0x220>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800bec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	4b6e      	ldr	r3, [pc, #440]	; (800c080 <RadioSetTxConfig+0x220>)
 800bec8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800beca:	4b6d      	ldr	r3, [pc, #436]	; (800c080 <RadioSetTxConfig+0x220>)
 800becc:	2204      	movs	r2, #4
 800bece:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800bed0:	4b6b      	ldr	r3, [pc, #428]	; (800c080 <RadioSetTxConfig+0x220>)
 800bed2:	2218      	movs	r2, #24
 800bed4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800bed6:	4b6a      	ldr	r3, [pc, #424]	; (800c080 <RadioSetTxConfig+0x220>)
 800bed8:	2200      	movs	r2, #0
 800beda:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800bedc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bee0:	f083 0301 	eor.w	r3, r3, #1
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	461a      	mov	r2, r3
 800bee8:	4b65      	ldr	r3, [pc, #404]	; (800c080 <RadioSetTxConfig+0x220>)
 800beea:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800beec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800bef4:	4b62      	ldr	r3, [pc, #392]	; (800c080 <RadioSetTxConfig+0x220>)
 800bef6:	22f2      	movs	r2, #242	; 0xf2
 800bef8:	75da      	strb	r2, [r3, #23]
 800befa:	e002      	b.n	800bf02 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800befc:	4b60      	ldr	r3, [pc, #384]	; (800c080 <RadioSetTxConfig+0x220>)
 800befe:	2201      	movs	r2, #1
 800bf00:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800bf02:	4b5f      	ldr	r3, [pc, #380]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf04:	2201      	movs	r2, #1
 800bf06:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800bf08:	f000 fb31 	bl	800c56e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800bf0c:	4b5c      	ldr	r3, [pc, #368]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	bf14      	ite	ne
 800bf16:	2301      	movne	r3, #1
 800bf18:	2300      	moveq	r3, #0
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff fcc1 	bl	800b8a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800bf22:	4858      	ldr	r0, [pc, #352]	; (800c084 <RadioSetTxConfig+0x224>)
 800bf24:	f001 ff64 	bl	800ddf0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800bf28:	4857      	ldr	r0, [pc, #348]	; (800c088 <RadioSetTxConfig+0x228>)
 800bf2a:	f002 f82d 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800bf2e:	4a57      	ldr	r2, [pc, #348]	; (800c08c <RadioSetTxConfig+0x22c>)
 800bf30:	f107 0310 	add.w	r3, r7, #16
 800bf34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf38:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf3c:	f107 0310 	add.w	r3, r7, #16
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 fb60 	bl	800d606 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800bf46:	f240 10ff 	movw	r0, #511	; 0x1ff
 800bf4a:	f001 fbab 	bl	800d6a4 <SUBGRF_SetWhiteningSeed>
            break;
 800bf4e:	e080      	b.n	800c052 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800bf50:	4b4b      	ldr	r3, [pc, #300]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	4b48      	ldr	r3, [pc, #288]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800bf62:	4a4b      	ldr	r2, [pc, #300]	; (800c090 <RadioSetTxConfig+0x230>)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4413      	add	r3, r2
 800bf68:	781a      	ldrb	r2, [r3, #0]
 800bf6a:	4b45      	ldr	r3, [pc, #276]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800bf70:	4a43      	ldr	r2, [pc, #268]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf76:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d105      	bne.n	800bf8c <RadioSetTxConfig+0x12c>
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	2b0b      	cmp	r3, #11
 800bf84:	d008      	beq.n	800bf98 <RadioSetTxConfig+0x138>
 800bf86:	6a3b      	ldr	r3, [r7, #32]
 800bf88:	2b0c      	cmp	r3, #12
 800bf8a:	d005      	beq.n	800bf98 <RadioSetTxConfig+0x138>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d107      	bne.n	800bfa2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	2b0c      	cmp	r3, #12
 800bf96:	d104      	bne.n	800bfa2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800bf98:	4b39      	ldr	r3, [pc, #228]	; (800c080 <RadioSetTxConfig+0x220>)
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800bfa0:	e003      	b.n	800bfaa <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800bfa2:	4b37      	ldr	r3, [pc, #220]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800bfaa:	4b35      	ldr	r3, [pc, #212]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfac:	2201      	movs	r2, #1
 800bfae:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bfb0:	4b33      	ldr	r3, [pc, #204]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	d004      	beq.n	800bfc4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800bfba:	4b31      	ldr	r3, [pc, #196]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800bfc0:	2b06      	cmp	r3, #6
 800bfc2:	d10a      	bne.n	800bfda <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800bfc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfc6:	2b0b      	cmp	r3, #11
 800bfc8:	d803      	bhi.n	800bfd2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800bfca:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfcc:	220c      	movs	r2, #12
 800bfce:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800bfd0:	e006      	b.n	800bfe0 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bfd2:	4a2b      	ldr	r2, [pc, #172]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfd6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800bfd8:	e002      	b.n	800bfe0 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800bfda:	4a29      	ldr	r2, [pc, #164]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfdc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bfde:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800bfe0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800bfe4:	4b26      	ldr	r3, [pc, #152]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfe6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800bfe8:	4b2a      	ldr	r3, [pc, #168]	; (800c094 <RadioSetTxConfig+0x234>)
 800bfea:	781a      	ldrb	r2, [r3, #0]
 800bfec:	4b24      	ldr	r3, [pc, #144]	; (800c080 <RadioSetTxConfig+0x220>)
 800bfee:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800bff0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800bff4:	4b22      	ldr	r3, [pc, #136]	; (800c080 <RadioSetTxConfig+0x220>)
 800bff6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800bffa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800bffe:	4b20      	ldr	r3, [pc, #128]	; (800c080 <RadioSetTxConfig+0x220>)
 800c000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800c004:	f000 fab3 	bl	800c56e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800c008:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <RadioSetTxConfig+0x220>)
 800c00a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c00e:	2b00      	cmp	r3, #0
 800c010:	bf14      	ite	ne
 800c012:	2301      	movne	r3, #1
 800c014:	2300      	moveq	r3, #0
 800c016:	b2db      	uxtb	r3, r3
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff fc43 	bl	800b8a4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c01e:	4819      	ldr	r0, [pc, #100]	; (800c084 <RadioSetTxConfig+0x224>)
 800c020:	f001 fee6 	bl	800ddf0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c024:	4818      	ldr	r0, [pc, #96]	; (800c088 <RadioSetTxConfig+0x228>)
 800c026:	f001 ffaf 	bl	800df88 <SUBGRF_SetPacketParams>
            break;
 800c02a:	e012      	b.n	800c052 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800c02c:	2003      	movs	r0, #3
 800c02e:	f7ff fc39 	bl	800b8a4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800c032:	4b13      	ldr	r3, [pc, #76]	; (800c080 <RadioSetTxConfig+0x220>)
 800c034:	2202      	movs	r2, #2
 800c036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800c03a:	4a11      	ldr	r2, [pc, #68]	; (800c080 <RadioSetTxConfig+0x220>)
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800c040:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <RadioSetTxConfig+0x220>)
 800c042:	2216      	movs	r2, #22
 800c044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c048:	480e      	ldr	r0, [pc, #56]	; (800c084 <RadioSetTxConfig+0x224>)
 800c04a:	f001 fed1 	bl	800ddf0 <SUBGRF_SetModulationParams>
            break;
 800c04e:	e000      	b.n	800c052 <RadioSetTxConfig+0x1f2>
            break;
 800c050:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800c052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c056:	4618      	mov	r0, r3
 800c058:	f002 f9fa 	bl	800e450 <SUBGRF_SetRfTxPower>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461a      	mov	r2, r3
 800c060:	4b07      	ldr	r3, [pc, #28]	; (800c080 <RadioSetTxConfig+0x220>)
 800c062:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800c066:	4b06      	ldr	r3, [pc, #24]	; (800c080 <RadioSetTxConfig+0x220>)
 800c068:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c06c:	4618      	mov	r0, r3
 800c06e:	f002 fbc0 	bl	800e7f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800c072:	4a03      	ldr	r2, [pc, #12]	; (800c080 <RadioSetTxConfig+0x220>)
 800c074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c076:	6053      	str	r3, [r2, #4]
}
 800c078:	bf00      	nop
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20002924 	.word	0x20002924
 800c084:	2000295c 	.word	0x2000295c
 800c088:	20002932 	.word	0x20002932
 800c08c:	0800fcb4 	.word	0x0800fcb4
 800c090:	0800fec0 	.word	0x0800fec0
 800c094:	20000014 	.word	0x20000014

0800c098 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
    return true;
 800c0a0:	2301      	movs	r3, #1
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bc80      	pop	{r7}
 800c0aa:	4770      	bx	lr

0800c0ac <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	2b0a      	cmp	r3, #10
 800c0be:	d83e      	bhi.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
 800c0c0:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <RadioGetLoRaBandwidthInHz+0x1c>)
 800c0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c6:	bf00      	nop
 800c0c8:	0800c0f5 	.word	0x0800c0f5
 800c0cc:	0800c105 	.word	0x0800c105
 800c0d0:	0800c115 	.word	0x0800c115
 800c0d4:	0800c125 	.word	0x0800c125
 800c0d8:	0800c12d 	.word	0x0800c12d
 800c0dc:	0800c133 	.word	0x0800c133
 800c0e0:	0800c139 	.word	0x0800c139
 800c0e4:	0800c13f 	.word	0x0800c13f
 800c0e8:	0800c0fd 	.word	0x0800c0fd
 800c0ec:	0800c10d 	.word	0x0800c10d
 800c0f0:	0800c11d 	.word	0x0800c11d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800c0f4:	f641 6384 	movw	r3, #7812	; 0x1e84
 800c0f8:	60fb      	str	r3, [r7, #12]
        break;
 800c0fa:	e020      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800c0fc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800c100:	60fb      	str	r3, [r7, #12]
        break;
 800c102:	e01c      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800c104:	f643 5309 	movw	r3, #15625	; 0x3d09
 800c108:	60fb      	str	r3, [r7, #12]
        break;
 800c10a:	e018      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800c10c:	f245 1361 	movw	r3, #20833	; 0x5161
 800c110:	60fb      	str	r3, [r7, #12]
        break;
 800c112:	e014      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800c114:	f647 2312 	movw	r3, #31250	; 0x7a12
 800c118:	60fb      	str	r3, [r7, #12]
        break;
 800c11a:	e010      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800c11c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800c120:	60fb      	str	r3, [r7, #12]
        break;
 800c122:	e00c      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800c124:	f24f 4324 	movw	r3, #62500	; 0xf424
 800c128:	60fb      	str	r3, [r7, #12]
        break;
 800c12a:	e008      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800c12c:	4b07      	ldr	r3, [pc, #28]	; (800c14c <RadioGetLoRaBandwidthInHz+0xa0>)
 800c12e:	60fb      	str	r3, [r7, #12]
        break;
 800c130:	e005      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <RadioGetLoRaBandwidthInHz+0xa4>)
 800c134:	60fb      	str	r3, [r7, #12]
        break;
 800c136:	e002      	b.n	800c13e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800c138:	4b06      	ldr	r3, [pc, #24]	; (800c154 <RadioGetLoRaBandwidthInHz+0xa8>)
 800c13a:	60fb      	str	r3, [r7, #12]
        break;
 800c13c:	bf00      	nop
    }

    return bandwidthInHz;
 800c13e:	68fb      	ldr	r3, [r7, #12]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	bc80      	pop	{r7}
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	0001e848 	.word	0x0001e848
 800c150:	0003d090 	.word	0x0003d090
 800c154:	0007a120 	.word	0x0007a120

0800c158 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	4608      	mov	r0, r1
 800c162:	4611      	mov	r1, r2
 800c164:	461a      	mov	r2, r3
 800c166:	4603      	mov	r3, r0
 800c168:	70fb      	strb	r3, [r7, #3]
 800c16a:	460b      	mov	r3, r1
 800c16c:	803b      	strh	r3, [r7, #0]
 800c16e:	4613      	mov	r3, r2
 800c170:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800c172:	883b      	ldrh	r3, [r7, #0]
 800c174:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c176:	78ba      	ldrb	r2, [r7, #2]
 800c178:	f082 0201 	eor.w	r2, r2, #1
 800c17c:	b2d2      	uxtb	r2, r2
 800c17e:	2a00      	cmp	r2, #0
 800c180:	d001      	beq.n	800c186 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800c182:	2208      	movs	r2, #8
 800c184:	e000      	b.n	800c188 <RadioGetGfskTimeOnAirNumerator+0x30>
 800c186:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800c188:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c18a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800c18e:	7c3b      	ldrb	r3, [r7, #16]
 800c190:	7d39      	ldrb	r1, [r7, #20]
 800c192:	2900      	cmp	r1, #0
 800c194:	d001      	beq.n	800c19a <RadioGetGfskTimeOnAirNumerator+0x42>
 800c196:	2102      	movs	r1, #2
 800c198:	e000      	b.n	800c19c <RadioGetGfskTimeOnAirNumerator+0x44>
 800c19a:	2100      	movs	r1, #0
 800c19c:	440b      	add	r3, r1
 800c19e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800c1a0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	370c      	adds	r7, #12
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bc80      	pop	{r7}
 800c1aa:	4770      	bx	lr

0800c1ac <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b08b      	sub	sp, #44	; 0x2c
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4611      	mov	r1, r2
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	71fb      	strb	r3, [r7, #7]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b05      	cmp	r3, #5
 800c1d2:	d002      	beq.n	800c1da <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b06      	cmp	r3, #6
 800c1d8:	d104      	bne.n	800c1e4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800c1da:	88bb      	ldrh	r3, [r7, #4]
 800c1dc:	2b0b      	cmp	r3, #11
 800c1de:	d801      	bhi.n	800c1e4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d105      	bne.n	800c1f6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b0b      	cmp	r3, #11
 800c1ee:	d008      	beq.n	800c202 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	2b0c      	cmp	r3, #12
 800c1f4:	d005      	beq.n	800c202 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d105      	bne.n	800c208 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b0c      	cmp	r3, #12
 800c200:	d102      	bne.n	800c208 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800c202:	2301      	movs	r3, #1
 800c204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c208:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c20c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800c20e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c212:	2a00      	cmp	r2, #0
 800c214:	d001      	beq.n	800c21a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800c216:	2210      	movs	r2, #16
 800c218:	e000      	b.n	800c21c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800c21a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c21c:	4413      	add	r3, r2
 800c21e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800c224:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800c226:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	d001      	beq.n	800c232 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800c22e:	2200      	movs	r2, #0
 800c230:	e000      	b.n	800c234 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800c232:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800c234:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c236:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b06      	cmp	r3, #6
 800c23c:	d803      	bhi.n	800c246 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	623b      	str	r3, [r7, #32]
 800c244:	e00e      	b.n	800c264 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	3308      	adds	r3, #8
 800c24a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800c24c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c250:	2b00      	cmp	r3, #0
 800c252:	d004      	beq.n	800c25e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	3b02      	subs	r3, #2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	623b      	str	r3, [r7, #32]
 800c25c:	e002      	b.n	800c264 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	2b00      	cmp	r3, #0
 800c268:	da01      	bge.n	800c26e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c26e:	69fa      	ldr	r2, [r7, #28]
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	4413      	add	r3, r2
 800c274:	1e5a      	subs	r2, r3, #1
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	fb92 f3f3 	sdiv	r3, r2, r3
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	fb02 f203 	mul.w	r2, r2, r3
 800c282:	88bb      	ldrh	r3, [r7, #4]
 800c284:	4413      	add	r3, r2
    int32_t intermediate =
 800c286:	330c      	adds	r3, #12
 800c288:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b06      	cmp	r3, #6
 800c28e:	d802      	bhi.n	800c296 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	3302      	adds	r3, #2
 800c294:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	1c5a      	adds	r2, r3, #1
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	3b02      	subs	r3, #2
 800c2a0:	fa02 f303 	lsl.w	r3, r2, r3
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	372c      	adds	r7, #44	; 0x2c
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bc80      	pop	{r7}
 800c2ac:	4770      	bx	lr
	...

0800c2b0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08a      	sub	sp, #40	; 0x28
 800c2b4:	af04      	add	r7, sp, #16
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]
 800c2c0:	4613      	mov	r3, r2
 800c2c2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	613b      	str	r3, [r7, #16]

    switch( modem )
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <RadioTimeOnAir+0x28>
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d017      	beq.n	800c306 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800c2d6:	e035      	b.n	800c344 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800c2d8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800c2dc:	8c3a      	ldrh	r2, [r7, #32]
 800c2de:	7bb9      	ldrb	r1, [r7, #14]
 800c2e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff ff32 	bl	800c158 <RadioGetGfskTimeOnAirNumerator>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2fa:	fb02 f303 	mul.w	r3, r2, r3
 800c2fe:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	613b      	str	r3, [r7, #16]
        break;
 800c304:	e01e      	b.n	800c344 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800c306:	8c39      	ldrh	r1, [r7, #32]
 800c308:	7bba      	ldrb	r2, [r7, #14]
 800c30a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c30e:	9302      	str	r3, [sp, #8]
 800c310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	460b      	mov	r3, r1
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	68b8      	ldr	r0, [r7, #8]
 800c322:	f7ff ff43 	bl	800c1ac <RadioGetLoRaTimeOnAirNumerator>
 800c326:	4603      	mov	r3, r0
 800c328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c32c:	fb02 f303 	mul.w	r3, r2, r3
 800c330:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800c332:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <RadioTimeOnAir+0xac>)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	4413      	add	r3, r2
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7ff feb6 	bl	800c0ac <RadioGetLoRaBandwidthInHz>
 800c340:	6138      	str	r0, [r7, #16]
        break;
 800c342:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	4413      	add	r3, r2
 800c34a:	1e5a      	subs	r2, r3, #1
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	0800fec0 	.word	0x0800fec0

0800c360 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800c36c:	2300      	movs	r3, #0
 800c36e:	2200      	movs	r2, #0
 800c370:	f240 2101 	movw	r1, #513	; 0x201
 800c374:	f240 2001 	movw	r0, #513	; 0x201
 800c378:	f001 fc10 	bl	800db9c <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800c37c:	4b6e      	ldr	r3, [pc, #440]	; (800c538 <RadioSend+0x1d8>)
 800c37e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c382:	2101      	movs	r1, #1
 800c384:	4618      	mov	r0, r3
 800c386:	f002 f83b 	bl	800e400 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800c38a:	4b6b      	ldr	r3, [pc, #428]	; (800c538 <RadioSend+0x1d8>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d112      	bne.n	800c3b8 <RadioSend+0x58>
 800c392:	4b69      	ldr	r3, [pc, #420]	; (800c538 <RadioSend+0x1d8>)
 800c394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c398:	2b06      	cmp	r3, #6
 800c39a:	d10d      	bne.n	800c3b8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800c39c:	f640 0089 	movw	r0, #2185	; 0x889
 800c3a0:	f001 ff4e 	bl	800e240 <SUBGRF_ReadRegister>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f023 0304 	bic.w	r3, r3, #4
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f640 0089 	movw	r0, #2185	; 0x889
 800c3b2:	f001 ff31 	bl	800e218 <SUBGRF_WriteRegister>
 800c3b6:	e00c      	b.n	800c3d2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800c3b8:	f640 0089 	movw	r0, #2185	; 0x889
 800c3bc:	f001 ff40 	bl	800e240 <SUBGRF_ReadRegister>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f043 0304 	orr.w	r3, r3, #4
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	f640 0089 	movw	r0, #2185	; 0x889
 800c3ce:	f001 ff23 	bl	800e218 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800c3d2:	4b59      	ldr	r3, [pc, #356]	; (800c538 <RadioSend+0x1d8>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	f200 809f 	bhi.w	800c51a <RadioSend+0x1ba>
 800c3dc:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <RadioSend+0x84>)
 800c3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e2:	bf00      	nop
 800c3e4:	0800c40f 	.word	0x0800c40f
 800c3e8:	0800c3f5 	.word	0x0800c3f5
 800c3ec:	0800c463 	.word	0x0800c463
 800c3f0:	0800c483 	.word	0x0800c483
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800c3f4:	4a50      	ldr	r2, [pc, #320]	; (800c538 <RadioSend+0x1d8>)
 800c3f6:	78fb      	ldrb	r3, [r7, #3]
 800c3f8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c3fa:	4850      	ldr	r0, [pc, #320]	; (800c53c <RadioSend+0x1dc>)
 800c3fc:	f001 fdc4 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c400:	78fb      	ldrb	r3, [r7, #3]
 800c402:	2200      	movs	r2, #0
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f001 f8ea 	bl	800d5e0 <SUBGRF_SendPayload>
            break;
 800c40c:	e086      	b.n	800c51c <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800c40e:	f002 f9e2 	bl	800e7d6 <RFW_Is_Init>
 800c412:	4603      	mov	r3, r0
 800c414:	2b01      	cmp	r3, #1
 800c416:	d117      	bne.n	800c448 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800c418:	f107 020d 	add.w	r2, r7, #13
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	4619      	mov	r1, r3
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f002 f9f0 	bl	800e806 <RFW_TransmitInit>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f040 8081 	bne.w	800c530 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800c42e:	7b7a      	ldrb	r2, [r7, #13]
 800c430:	4b41      	ldr	r3, [pc, #260]	; (800c538 <RadioSend+0x1d8>)
 800c432:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c434:	4841      	ldr	r0, [pc, #260]	; (800c53c <RadioSend+0x1dc>)
 800c436:	f001 fda7 	bl	800df88 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800c43a:	7b7b      	ldrb	r3, [r7, #13]
 800c43c:	2200      	movs	r2, #0
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f001 f8cd 	bl	800d5e0 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800c446:	e069      	b.n	800c51c <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800c448:	4a3b      	ldr	r2, [pc, #236]	; (800c538 <RadioSend+0x1d8>)
 800c44a:	78fb      	ldrb	r3, [r7, #3]
 800c44c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c44e:	483b      	ldr	r0, [pc, #236]	; (800c53c <RadioSend+0x1dc>)
 800c450:	f001 fd9a 	bl	800df88 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	2200      	movs	r2, #0
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 f8c0 	bl	800d5e0 <SUBGRF_SendPayload>
            break;
 800c460:	e05c      	b.n	800c51c <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800c462:	4b35      	ldr	r3, [pc, #212]	; (800c538 <RadioSend+0x1d8>)
 800c464:	2202      	movs	r2, #2
 800c466:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800c468:	4a33      	ldr	r2, [pc, #204]	; (800c538 <RadioSend+0x1d8>)
 800c46a:	78fb      	ldrb	r3, [r7, #3]
 800c46c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c46e:	4833      	ldr	r0, [pc, #204]	; (800c53c <RadioSend+0x1dc>)
 800c470:	f001 fd8a 	bl	800df88 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	2200      	movs	r2, #0
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f001 f8b0 	bl	800d5e0 <SUBGRF_SendPayload>
            break;
 800c480:	e04c      	b.n	800c51c <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	461a      	mov	r2, r3
 800c486:	6879      	ldr	r1, [r7, #4]
 800c488:	482d      	ldr	r0, [pc, #180]	; (800c540 <RadioSend+0x1e0>)
 800c48a:	f000 fc30 	bl	800ccee <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800c48e:	4b2a      	ldr	r3, [pc, #168]	; (800c538 <RadioSend+0x1d8>)
 800c490:	2202      	movs	r2, #2
 800c492:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	3301      	adds	r3, #1
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b27      	ldr	r3, [pc, #156]	; (800c538 <RadioSend+0x1d8>)
 800c49c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c49e:	4827      	ldr	r0, [pc, #156]	; (800c53c <RadioSend+0x1dc>)
 800c4a0:	f001 fd72 	bl	800df88 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	20f1      	movs	r0, #241	; 0xf1
 800c4a8:	f000 f947 	bl	800c73a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	20f0      	movs	r0, #240	; 0xf0
 800c4b0:	f000 f943 	bl	800c73a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800c4b4:	4b20      	ldr	r3, [pc, #128]	; (800c538 <RadioSend+0x1d8>)
 800c4b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4b8:	2b64      	cmp	r3, #100	; 0x64
 800c4ba:	d108      	bne.n	800c4ce <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800c4bc:	2170      	movs	r1, #112	; 0x70
 800c4be:	20f3      	movs	r0, #243	; 0xf3
 800c4c0:	f000 f93b 	bl	800c73a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800c4c4:	211d      	movs	r1, #29
 800c4c6:	20f2      	movs	r0, #242	; 0xf2
 800c4c8:	f000 f937 	bl	800c73a <RadioWrite>
 800c4cc:	e007      	b.n	800c4de <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800c4ce:	21e1      	movs	r1, #225	; 0xe1
 800c4d0:	20f3      	movs	r0, #243	; 0xf3
 800c4d2:	f000 f932 	bl	800c73a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800c4d6:	2104      	movs	r1, #4
 800c4d8:	20f2      	movs	r0, #242	; 0xf2
 800c4da:	f000 f92e 	bl	800c73a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800c4de:	78fb      	ldrb	r3, [r7, #3]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	b29b      	uxth	r3, r3
 800c4e6:	3302      	adds	r3, #2
 800c4e8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800c4ea:	89fb      	ldrh	r3, [r7, #14]
 800c4ec:	0a1b      	lsrs	r3, r3, #8
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	20f4      	movs	r0, #244	; 0xf4
 800c4f6:	f000 f920 	bl	800c73a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800c4fa:	89fb      	ldrh	r3, [r7, #14]
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	4619      	mov	r1, r3
 800c500:	20f5      	movs	r0, #245	; 0xf5
 800c502:	f000 f91a 	bl	800c73a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800c506:	78fb      	ldrb	r3, [r7, #3]
 800c508:	3301      	adds	r3, #1
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800c510:	4619      	mov	r1, r3
 800c512:	480b      	ldr	r0, [pc, #44]	; (800c540 <RadioSend+0x1e0>)
 800c514:	f001 f864 	bl	800d5e0 <SUBGRF_SendPayload>
            break;
 800c518:	e000      	b.n	800c51c <RadioSend+0x1bc>
        }
        default:
            break;
 800c51a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <RadioSend+0x1d8>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	4619      	mov	r1, r3
 800c522:	4808      	ldr	r0, [pc, #32]	; (800c544 <RadioSend+0x1e4>)
 800c524:	f002 fd3e 	bl	800efa4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800c528:	4806      	ldr	r0, [pc, #24]	; (800c544 <RadioSend+0x1e4>)
 800c52a:	f002 fc5d 	bl	800ede8 <UTIL_TIMER_Start>
 800c52e:	e000      	b.n	800c532 <RadioSend+0x1d2>
                return;
 800c530:	bf00      	nop
}
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20002924 	.word	0x20002924
 800c53c:	20002932 	.word	0x20002932
 800c540:	20001d9c 	.word	0x20001d9c
 800c544:	2000297c 	.word	0x2000297c

0800c548 <RadioSleep>:

static void RadioSleep( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800c54e:	2300      	movs	r3, #0
 800c550:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800c552:	793b      	ldrb	r3, [r7, #4]
 800c554:	f043 0304 	orr.w	r3, r3, #4
 800c558:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800c55a:	7938      	ldrb	r0, [r7, #4]
 800c55c:	f001 f91c 	bl	800d798 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800c560:	2002      	movs	r0, #2
 800c562:	f7f5 fff3 	bl	800254c <HAL_Delay>
}
 800c566:	bf00      	nop
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <RadioStandby>:

static void RadioStandby( void )
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800c572:	2000      	movs	r0, #0
 800c574:	f001 f942 	bl	800d7fc <SUBGRF_SetStandby>
}
 800c578:	bf00      	nop
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800c584:	f002 f927 	bl	800e7d6 <RFW_Is_Init>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d102      	bne.n	800c594 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800c58e:	f002 f94a 	bl	800e826 <RFW_ReceiveInit>
 800c592:	e007      	b.n	800c5a4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800c594:	2300      	movs	r3, #0
 800c596:	2200      	movs	r2, #0
 800c598:	f240 2162 	movw	r1, #610	; 0x262
 800c59c:	f240 2062 	movw	r0, #610	; 0x262
 800c5a0:	f001 fafc 	bl	800db9c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d006      	beq.n	800c5b8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c5aa:	6879      	ldr	r1, [r7, #4]
 800c5ac:	480f      	ldr	r0, [pc, #60]	; (800c5ec <RadioRx+0x70>)
 800c5ae:	f002 fcf9 	bl	800efa4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c5b2:	480e      	ldr	r0, [pc, #56]	; (800c5ec <RadioRx+0x70>)
 800c5b4:	f002 fc18 	bl	800ede8 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	; (800c5f0 <RadioRx+0x74>)
 800c5ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c5be:	2100      	movs	r1, #0
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f001 ff1d 	bl	800e400 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800c5c6:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <RadioRx+0x74>)
 800c5c8:	785b      	ldrb	r3, [r3, #1]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d004      	beq.n	800c5d8 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800c5ce:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c5d2:	f001 f94f 	bl	800d874 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800c5d6:	e005      	b.n	800c5e4 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800c5d8:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <RadioRx+0x74>)
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	019b      	lsls	r3, r3, #6
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 f948 	bl	800d874 <SUBGRF_SetRx>
}
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20002994 	.word	0x20002994
 800c5f0:	20002924 	.word	0x20002924

0800c5f4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800c5fc:	f002 f8eb 	bl	800e7d6 <RFW_Is_Init>
 800c600:	4603      	mov	r3, r0
 800c602:	2b01      	cmp	r3, #1
 800c604:	d102      	bne.n	800c60c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800c606:	f002 f90e 	bl	800e826 <RFW_ReceiveInit>
 800c60a:	e007      	b.n	800c61c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800c60c:	2300      	movs	r3, #0
 800c60e:	2200      	movs	r2, #0
 800c610:	f240 2162 	movw	r1, #610	; 0x262
 800c614:	f240 2062 	movw	r0, #610	; 0x262
 800c618:	f001 fac0 	bl	800db9c <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d006      	beq.n	800c630 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	480f      	ldr	r0, [pc, #60]	; (800c664 <RadioRxBoosted+0x70>)
 800c626:	f002 fcbd 	bl	800efa4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c62a:	480e      	ldr	r0, [pc, #56]	; (800c664 <RadioRxBoosted+0x70>)
 800c62c:	f002 fbdc 	bl	800ede8 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800c630:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <RadioRxBoosted+0x74>)
 800c632:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c636:	2100      	movs	r1, #0
 800c638:	4618      	mov	r0, r3
 800c63a:	f001 fee1 	bl	800e400 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800c63e:	4b0a      	ldr	r3, [pc, #40]	; (800c668 <RadioRxBoosted+0x74>)
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800c646:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c64a:	f001 f933 	bl	800d8b4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800c64e:	e005      	b.n	800c65c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <RadioRxBoosted+0x74>)
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	019b      	lsls	r3, r3, #6
 800c656:	4618      	mov	r0, r3
 800c658:	f001 f92c 	bl	800d8b4 <SUBGRF_SetRxBoosted>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20002994 	.word	0x20002994
 800c668:	20002924 	.word	0x20002924

0800c66c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <RadioSetRxDutyCycle+0x28>)
 800c678:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c67c:	2100      	movs	r1, #0
 800c67e:	4618      	mov	r0, r3
 800c680:	f001 febe 	bl	800e400 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 f938 	bl	800d8fc <SUBGRF_SetRxDutyCycle>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20002924 	.word	0x20002924

0800c698 <RadioStartCad>:

static void RadioStartCad( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800c69c:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <RadioStartCad+0x2c>)
 800c69e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f001 feab 	bl	800e400 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c6b2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800c6b6:	f001 fa71 	bl	800db9c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800c6ba:	f001 f94b 	bl	800d954 <SUBGRF_SetCad>
}
 800c6be:	bf00      	nop
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20002924 	.word	0x20002924

0800c6c8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800c6d8:	883b      	ldrh	r3, [r7, #0]
 800c6da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c6de:	fb02 f303 	mul.w	r3, r2, r3
 800c6e2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f001 fab5 	bl	800dc54 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800c6ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f001 feae 	bl	800e450 <SUBGRF_SetRfTxPower>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800c6f8:	7afb      	ldrb	r3, [r7, #11]
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f001 fe7f 	bl	800e400 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800c702:	f001 f935 	bl	800d970 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	4804      	ldr	r0, [pc, #16]	; (800c71c <RadioSetTxContinuousWave+0x54>)
 800c70a:	f002 fc4b 	bl	800efa4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800c70e:	4803      	ldr	r0, [pc, #12]	; (800c71c <RadioSetTxContinuousWave+0x54>)
 800c710:	f002 fb6a 	bl	800ede8 <UTIL_TIMER_Start>
}
 800c714:	bf00      	nop
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	2000297c 	.word	0x2000297c

0800c720 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800c72a:	f001 fce2 	bl	800e0f2 <SUBGRF_GetRssiInst>
 800c72e:	4603      	mov	r3, r0
 800c730:	b21b      	sxth	r3, r3
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b082      	sub	sp, #8
 800c73e:	af00      	add	r7, sp, #0
 800c740:	4603      	mov	r3, r0
 800c742:	460a      	mov	r2, r1
 800c744:	80fb      	strh	r3, [r7, #6]
 800c746:	4613      	mov	r3, r2
 800c748:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800c74a:	797a      	ldrb	r2, [r7, #5]
 800c74c:	88fb      	ldrh	r3, [r7, #6]
 800c74e:	4611      	mov	r1, r2
 800c750:	4618      	mov	r0, r3
 800c752:	f001 fd61 	bl	800e218 <SUBGRF_WriteRegister>
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	4603      	mov	r3, r0
 800c766:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800c768:	88fb      	ldrh	r3, [r7, #6]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f001 fd68 	bl	800e240 <SUBGRF_ReadRegister>
 800c770:	4603      	mov	r3, r0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	4603      	mov	r3, r0
 800c782:	6039      	str	r1, [r7, #0]
 800c784:	80fb      	strh	r3, [r7, #6]
 800c786:	4613      	mov	r3, r2
 800c788:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800c78a:	797b      	ldrb	r3, [r7, #5]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	88fb      	ldrh	r3, [r7, #6]
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f001 fd68 	bl	800e268 <SUBGRF_WriteRegisters>
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	6039      	str	r1, [r7, #0]
 800c7aa:	80fb      	strh	r3, [r7, #6]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800c7b0:	797b      	ldrb	r3, [r7, #5]
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	88fb      	ldrh	r3, [r7, #6]
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f001 fd77 	bl	800e2ac <SUBGRF_ReadRegisters>
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
	...

0800c7c8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	460a      	mov	r2, r1
 800c7d2:	71fb      	strb	r3, [r7, #7]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800c7d8:	79fb      	ldrb	r3, [r7, #7]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d10a      	bne.n	800c7f4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800c7de:	4a0e      	ldr	r2, [pc, #56]	; (800c818 <RadioSetMaxPayloadLength+0x50>)
 800c7e0:	79bb      	ldrb	r3, [r7, #6]
 800c7e2:	7013      	strb	r3, [r2, #0]
 800c7e4:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <RadioSetMaxPayloadLength+0x50>)
 800c7e6:	781a      	ldrb	r2, [r3, #0]
 800c7e8:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <RadioSetMaxPayloadLength+0x54>)
 800c7ea:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c7ec:	480c      	ldr	r0, [pc, #48]	; (800c820 <RadioSetMaxPayloadLength+0x58>)
 800c7ee:	f001 fbcb 	bl	800df88 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800c7f2:	e00d      	b.n	800c810 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800c7f4:	4b09      	ldr	r3, [pc, #36]	; (800c81c <RadioSetMaxPayloadLength+0x54>)
 800c7f6:	7d5b      	ldrb	r3, [r3, #21]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d109      	bne.n	800c810 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800c7fc:	4a06      	ldr	r2, [pc, #24]	; (800c818 <RadioSetMaxPayloadLength+0x50>)
 800c7fe:	79bb      	ldrb	r3, [r7, #6]
 800c800:	7013      	strb	r3, [r2, #0]
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <RadioSetMaxPayloadLength+0x50>)
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	4b05      	ldr	r3, [pc, #20]	; (800c81c <RadioSetMaxPayloadLength+0x54>)
 800c808:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c80a:	4805      	ldr	r0, [pc, #20]	; (800c820 <RadioSetMaxPayloadLength+0x58>)
 800c80c:	f001 fbbc 	bl	800df88 <SUBGRF_SetPacketParams>
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	20000014 	.word	0x20000014
 800c81c:	20002924 	.word	0x20002924
 800c820:	20002932 	.word	0x20002932

0800c824 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	4603      	mov	r3, r0
 800c82c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800c82e:	4a13      	ldr	r2, [pc, #76]	; (800c87c <RadioSetPublicNetwork+0x58>)
 800c830:	79fb      	ldrb	r3, [r7, #7]
 800c832:	7313      	strb	r3, [r2, #12]
 800c834:	4b11      	ldr	r3, [pc, #68]	; (800c87c <RadioSetPublicNetwork+0x58>)
 800c836:	7b1a      	ldrb	r2, [r3, #12]
 800c838:	4b10      	ldr	r3, [pc, #64]	; (800c87c <RadioSetPublicNetwork+0x58>)
 800c83a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800c83c:	2001      	movs	r0, #1
 800c83e:	f7ff f831 	bl	800b8a4 <RadioSetModem>
    if( enable == true )
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00a      	beq.n	800c85e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800c848:	2134      	movs	r1, #52	; 0x34
 800c84a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800c84e:	f001 fce3 	bl	800e218 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800c852:	2144      	movs	r1, #68	; 0x44
 800c854:	f240 7041 	movw	r0, #1857	; 0x741
 800c858:	f001 fcde 	bl	800e218 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800c85c:	e009      	b.n	800c872 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800c85e:	2114      	movs	r1, #20
 800c860:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800c864:	f001 fcd8 	bl	800e218 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800c868:	2124      	movs	r1, #36	; 0x24
 800c86a:	f240 7041 	movw	r0, #1857	; 0x741
 800c86e:	f001 fcd3 	bl	800e218 <SUBGRF_WriteRegister>
}
 800c872:	bf00      	nop
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20002924 	.word	0x20002924

0800c880 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800c884:	f001 fe18 	bl	800e4b8 <SUBGRF_GetRadioWakeUpTime>
 800c888:	4603      	mov	r3, r0
 800c88a:	3303      	adds	r3, #3
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800c898:	f000 f80e 	bl	800c8b8 <RadioOnTxTimeoutProcess>
}
 800c89c:	bf00      	nop
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800c8ac:	f000 f818 	bl	800c8e0 <RadioOnRxTimeoutProcess>
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800c8bc:	4b07      	ldr	r3, [pc, #28]	; (800c8dc <RadioOnTxTimeoutProcess+0x24>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d008      	beq.n	800c8d6 <RadioOnTxTimeoutProcess+0x1e>
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <RadioOnTxTimeoutProcess+0x24>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d003      	beq.n	800c8d6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800c8ce:	4b03      	ldr	r3, [pc, #12]	; (800c8dc <RadioOnTxTimeoutProcess+0x24>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	4798      	blx	r3
    }
}
 800c8d6:	bf00      	nop
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	20001e9c 	.word	0x20001e9c

0800c8e0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <RadioOnRxTimeoutProcess+0x24>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d008      	beq.n	800c8fe <RadioOnRxTimeoutProcess+0x1e>
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <RadioOnRxTimeoutProcess+0x24>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800c8f6:	4b03      	ldr	r3, [pc, #12]	; (800c904 <RadioOnRxTimeoutProcess+0x24>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	4798      	blx	r3
    }
}
 800c8fe:	bf00      	nop
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20001e9c 	.word	0x20001e9c

0800c908 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800c912:	4a05      	ldr	r2, [pc, #20]	; (800c928 <RadioOnDioIrq+0x20>)
 800c914:	88fb      	ldrh	r3, [r7, #6]
 800c916:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800c91a:	f000 f807 	bl	800c92c <RadioIrqProcess>
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20002924 	.word	0x20002924

0800c92c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800c92c:	b590      	push	{r4, r7, lr}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800c93a:	4bb4      	ldr	r3, [pc, #720]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800c93c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c944:	f000 810c 	beq.w	800cb60 <RadioIrqProcess+0x234>
 800c948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c94c:	f300 8184 	bgt.w	800cc58 <RadioIrqProcess+0x32c>
 800c950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c954:	f000 80f0 	beq.w	800cb38 <RadioIrqProcess+0x20c>
 800c958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c95c:	f300 817c 	bgt.w	800cc58 <RadioIrqProcess+0x32c>
 800c960:	2b80      	cmp	r3, #128	; 0x80
 800c962:	f000 80d5 	beq.w	800cb10 <RadioIrqProcess+0x1e4>
 800c966:	2b80      	cmp	r3, #128	; 0x80
 800c968:	f300 8176 	bgt.w	800cc58 <RadioIrqProcess+0x32c>
 800c96c:	2b20      	cmp	r3, #32
 800c96e:	dc49      	bgt.n	800ca04 <RadioIrqProcess+0xd8>
 800c970:	2b00      	cmp	r3, #0
 800c972:	f340 8171 	ble.w	800cc58 <RadioIrqProcess+0x32c>
 800c976:	3b01      	subs	r3, #1
 800c978:	2b1f      	cmp	r3, #31
 800c97a:	f200 816d 	bhi.w	800cc58 <RadioIrqProcess+0x32c>
 800c97e:	a201      	add	r2, pc, #4	; (adr r2, 800c984 <RadioIrqProcess+0x58>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800ca0d 	.word	0x0800ca0d
 800c988:	0800ca47 	.word	0x0800ca47
 800c98c:	0800cc59 	.word	0x0800cc59
 800c990:	0800cc59 	.word	0x0800cc59
 800c994:	0800cc59 	.word	0x0800cc59
 800c998:	0800cc59 	.word	0x0800cc59
 800c99c:	0800cc59 	.word	0x0800cc59
 800c9a0:	0800cbc5 	.word	0x0800cbc5
 800c9a4:	0800cc59 	.word	0x0800cc59
 800c9a8:	0800cc59 	.word	0x0800cc59
 800c9ac:	0800cc59 	.word	0x0800cc59
 800c9b0:	0800cc59 	.word	0x0800cc59
 800c9b4:	0800cc59 	.word	0x0800cc59
 800c9b8:	0800cc59 	.word	0x0800cc59
 800c9bc:	0800cc59 	.word	0x0800cc59
 800c9c0:	0800cc59 	.word	0x0800cc59
 800c9c4:	0800cc59 	.word	0x0800cc59
 800c9c8:	0800cc59 	.word	0x0800cc59
 800c9cc:	0800cc59 	.word	0x0800cc59
 800c9d0:	0800cc59 	.word	0x0800cc59
 800c9d4:	0800cc59 	.word	0x0800cc59
 800c9d8:	0800cc59 	.word	0x0800cc59
 800c9dc:	0800cc59 	.word	0x0800cc59
 800c9e0:	0800cc59 	.word	0x0800cc59
 800c9e4:	0800cc59 	.word	0x0800cc59
 800c9e8:	0800cc59 	.word	0x0800cc59
 800c9ec:	0800cc59 	.word	0x0800cc59
 800c9f0:	0800cc59 	.word	0x0800cc59
 800c9f4:	0800cc59 	.word	0x0800cc59
 800c9f8:	0800cc59 	.word	0x0800cc59
 800c9fc:	0800cc59 	.word	0x0800cc59
 800ca00:	0800cbd5 	.word	0x0800cbd5
 800ca04:	2b40      	cmp	r3, #64	; 0x40
 800ca06:	f000 810f 	beq.w	800cc28 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800ca0a:	e125      	b.n	800cc58 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 800ca0c:	4880      	ldr	r0, [pc, #512]	; (800cc10 <RadioIrqProcess+0x2e4>)
 800ca0e:	f002 fa59 	bl	800eec4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800ca12:	2000      	movs	r0, #0
 800ca14:	f000 fef2 	bl	800d7fc <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800ca18:	f001 fee4 	bl	800e7e4 <RFW_Is_LongPacketModeEnabled>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d101      	bne.n	800ca26 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800ca22:	f001 ff08 	bl	800e836 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800ca26:	4b7b      	ldr	r3, [pc, #492]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	f000 8116 	beq.w	800cc5c <RadioIrqProcess+0x330>
 800ca30:	4b78      	ldr	r3, [pc, #480]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 8110 	beq.w	800cc5c <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 800ca3c:	4b75      	ldr	r3, [pc, #468]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4798      	blx	r3
        break;
 800ca44:	e10a      	b.n	800cc5c <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 800ca46:	4874      	ldr	r0, [pc, #464]	; (800cc18 <RadioIrqProcess+0x2ec>)
 800ca48:	f002 fa3c 	bl	800eec4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ca4c:	4b6f      	ldr	r3, [pc, #444]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800ca4e:	785b      	ldrb	r3, [r3, #1]
 800ca50:	f083 0301 	eor.w	r3, r3, #1
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d014      	beq.n	800ca84 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	f000 fece 	bl	800d7fc <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800ca60:	2100      	movs	r1, #0
 800ca62:	f640 1002 	movw	r0, #2306	; 0x902
 800ca66:	f001 fbd7 	bl	800e218 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800ca6a:	f640 1044 	movw	r0, #2372	; 0x944
 800ca6e:	f001 fbe7 	bl	800e240 <SUBGRF_ReadRegister>
 800ca72:	4603      	mov	r3, r0
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f640 1044 	movw	r0, #2372	; 0x944
 800ca80:	f001 fbca 	bl	800e218 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800ca84:	1dfb      	adds	r3, r7, #7
 800ca86:	22ff      	movs	r2, #255	; 0xff
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4864      	ldr	r0, [pc, #400]	; (800cc1c <RadioIrqProcess+0x2f0>)
 800ca8c:	f000 fd86 	bl	800d59c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800ca90:	4863      	ldr	r0, [pc, #396]	; (800cc20 <RadioIrqProcess+0x2f4>)
 800ca92:	f001 fb6f 	bl	800e174 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ca96:	4b5f      	ldr	r3, [pc, #380]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d036      	beq.n	800cb0c <RadioIrqProcess+0x1e0>
 800ca9e:	4b5d      	ldr	r3, [pc, #372]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d031      	beq.n	800cb0c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800caa8:	4b58      	ldr	r3, [pc, #352]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800caaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d10e      	bne.n	800cad0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800cab2:	4b58      	ldr	r3, [pc, #352]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689c      	ldr	r4, [r3, #8]
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	b299      	uxth	r1, r3
 800cabc:	4b53      	ldr	r3, [pc, #332]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800cabe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800cac2:	b21a      	sxth	r2, r3
 800cac4:	4b51      	ldr	r3, [pc, #324]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800cac6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800caca:	4854      	ldr	r0, [pc, #336]	; (800cc1c <RadioIrqProcess+0x2f0>)
 800cacc:	47a0      	blx	r4
                break;
 800cace:	e01e      	b.n	800cb0e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800cad0:	4b4e      	ldr	r3, [pc, #312]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800cad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad4:	463a      	mov	r2, r7
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 fdcf 	bl	800e67c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800cade:	4b4d      	ldr	r3, [pc, #308]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	689c      	ldr	r4, [r3, #8]
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	b299      	uxth	r1, r3
 800cae8:	4b48      	ldr	r3, [pc, #288]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800caea:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800caee:	b218      	sxth	r0, r3
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800caf6:	4a4b      	ldr	r2, [pc, #300]	; (800cc24 <RadioIrqProcess+0x2f8>)
 800caf8:	fb82 c203 	smull	ip, r2, r2, r3
 800cafc:	1192      	asrs	r2, r2, #6
 800cafe:	17db      	asrs	r3, r3, #31
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	b25b      	sxtb	r3, r3
 800cb04:	4602      	mov	r2, r0
 800cb06:	4845      	ldr	r0, [pc, #276]	; (800cc1c <RadioIrqProcess+0x2f0>)
 800cb08:	47a0      	blx	r4
                break;
 800cb0a:	e000      	b.n	800cb0e <RadioIrqProcess+0x1e2>
        }
 800cb0c:	bf00      	nop
        break;
 800cb0e:	e0b2      	b.n	800cc76 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 800cb10:	2000      	movs	r0, #0
 800cb12:	f000 fe73 	bl	800d7fc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800cb16:	4b3f      	ldr	r3, [pc, #252]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 80a0 	beq.w	800cc60 <RadioIrqProcess+0x334>
 800cb20:	4b3c      	ldr	r3, [pc, #240]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f000 809a 	beq.w	800cc60 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 800cb2c:	4b39      	ldr	r3, [pc, #228]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	2000      	movs	r0, #0
 800cb34:	4798      	blx	r3
        break;
 800cb36:	e093      	b.n	800cc60 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 800cb38:	2000      	movs	r0, #0
 800cb3a:	f000 fe5f 	bl	800d7fc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800cb3e:	4b35      	ldr	r3, [pc, #212]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f000 808e 	beq.w	800cc64 <RadioIrqProcess+0x338>
 800cb48:	4b32      	ldr	r3, [pc, #200]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f000 8088 	beq.w	800cc64 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 800cb54:	4b2f      	ldr	r3, [pc, #188]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	4798      	blx	r3
        break;
 800cb5e:	e081      	b.n	800cc64 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800cb60:	f000 fd02 	bl	800d568 <SUBGRF_GetOperatingMode>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	d113      	bne.n	800cb92 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 800cb6a:	4829      	ldr	r0, [pc, #164]	; (800cc10 <RadioIrqProcess+0x2e4>)
 800cb6c:	f002 f9aa 	bl	800eec4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800cb70:	2000      	movs	r0, #0
 800cb72:	f000 fe43 	bl	800d7fc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800cb76:	4b27      	ldr	r3, [pc, #156]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d074      	beq.n	800cc68 <RadioIrqProcess+0x33c>
 800cb7e:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d06f      	beq.n	800cc68 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 800cb88:	4b22      	ldr	r3, [pc, #136]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	4798      	blx	r3
        break;
 800cb90:	e06a      	b.n	800cc68 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800cb92:	f000 fce9 	bl	800d568 <SUBGRF_GetOperatingMode>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b05      	cmp	r3, #5
 800cb9a:	d165      	bne.n	800cc68 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 800cb9c:	481e      	ldr	r0, [pc, #120]	; (800cc18 <RadioIrqProcess+0x2ec>)
 800cb9e:	f002 f991 	bl	800eec4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800cba2:	2000      	movs	r0, #0
 800cba4:	f000 fe2a 	bl	800d7fc <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cba8:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d05b      	beq.n	800cc68 <RadioIrqProcess+0x33c>
 800cbb0:	4b18      	ldr	r3, [pc, #96]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d056      	beq.n	800cc68 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 800cbba:	4b16      	ldr	r3, [pc, #88]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	4798      	blx	r3
        break;
 800cbc2:	e051      	b.n	800cc68 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 800cbc4:	f001 fe07 	bl	800e7d6 <RFW_Is_Init>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d14e      	bne.n	800cc6c <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 800cbce:	f001 fe38 	bl	800e842 <RFW_ReceivePayload>
        break;
 800cbd2:	e04b      	b.n	800cc6c <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 800cbd4:	4810      	ldr	r0, [pc, #64]	; (800cc18 <RadioIrqProcess+0x2ec>)
 800cbd6:	f002 f975 	bl	800eec4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800cbda:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <RadioIrqProcess+0x2e0>)
 800cbdc:	785b      	ldrb	r3, [r3, #1]
 800cbde:	f083 0301 	eor.w	r3, r3, #1
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f000 fe07 	bl	800d7fc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800cbee:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d03c      	beq.n	800cc70 <RadioIrqProcess+0x344>
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d037      	beq.n	800cc70 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 800cc00:	4b04      	ldr	r3, [pc, #16]	; (800cc14 <RadioIrqProcess+0x2e8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	4798      	blx	r3
        break;
 800cc08:	e032      	b.n	800cc70 <RadioIrqProcess+0x344>
 800cc0a:	bf00      	nop
 800cc0c:	20002924 	.word	0x20002924
 800cc10:	2000297c 	.word	0x2000297c
 800cc14:	20001e9c 	.word	0x20001e9c
 800cc18:	20002994 	.word	0x20002994
 800cc1c:	20001d9c 	.word	0x20001d9c
 800cc20:	20002948 	.word	0x20002948
 800cc24:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 800cc28:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <RadioIrqProcess+0x354>)
 800cc2a:	785b      	ldrb	r3, [r3, #1]
 800cc2c:	f083 0301 	eor.w	r3, r3, #1
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 800cc36:	2000      	movs	r0, #0
 800cc38:	f000 fde0 	bl	800d7fc <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800cc3c:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <RadioIrqProcess+0x358>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d017      	beq.n	800cc74 <RadioIrqProcess+0x348>
 800cc44:	4b0f      	ldr	r3, [pc, #60]	; (800cc84 <RadioIrqProcess+0x358>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d012      	beq.n	800cc74 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 800cc4e:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <RadioIrqProcess+0x358>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	4798      	blx	r3
        break;
 800cc56:	e00d      	b.n	800cc74 <RadioIrqProcess+0x348>
        break;
 800cc58:	bf00      	nop
 800cc5a:	e00c      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc5c:	bf00      	nop
 800cc5e:	e00a      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc60:	bf00      	nop
 800cc62:	e008      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc64:	bf00      	nop
 800cc66:	e006      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc68:	bf00      	nop
 800cc6a:	e004      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc6c:	bf00      	nop
 800cc6e:	e002      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc70:	bf00      	nop
 800cc72:	e000      	b.n	800cc76 <RadioIrqProcess+0x34a>
        break;
 800cc74:	bf00      	nop
  }
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd90      	pop	{r4, r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20002924 	.word	0x20002924
 800cc84:	20001e9c 	.word	0x20001e9c

0800cc88 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800cc8c:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <RadioTxPrbs+0x2c>)
 800cc8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cc92:	2101      	movs	r1, #1
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fbb3 	bl	800e400 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800cc9a:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <RadioTxPrbs+0x30>)
 800cc9c:	212d      	movs	r1, #45	; 0x2d
 800cc9e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800cca2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800cca4:	f000 fe6d 	bl	800d982 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800cca8:	4804      	ldr	r0, [pc, #16]	; (800ccbc <RadioTxPrbs+0x34>)
 800ccaa:	f000 fdc3 	bl	800d834 <SUBGRF_SetTx>
}
 800ccae:	bf00      	nop
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20002924 	.word	0x20002924
 800ccb8:	0800c73b 	.word	0x0800c73b
 800ccbc:	000fffff 	.word	0x000fffff

0800ccc0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800ccca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 fbbe 	bl	800e450 <SUBGRF_SetRfTxPower>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	2101      	movs	r1, #1
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f001 fb8f 	bl	800e400 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800cce2:	f000 fe45 	bl	800d970 <SUBGRF_SetTxContinuousWave>
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b089      	sub	sp, #36	; 0x24
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	60f8      	str	r0, [r7, #12]
 800ccf6:	60b9      	str	r1, [r7, #8]
 800ccf8:	4613      	mov	r3, r2
 800ccfa:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800cd04:	2300      	movs	r3, #0
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	e011      	b.n	800cd2e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	68ba      	ldr	r2, [r7, #8]
 800cd0e:	4413      	add	r3, r2
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	440b      	add	r3, r1
 800cd18:	43d2      	mvns	r2, r2
 800cd1a:	b2d2      	uxtb	r2, r2
 800cd1c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	4413      	add	r3, r2
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	61bb      	str	r3, [r7, #24]
 800cd2e:	79fb      	ldrb	r3, [r7, #7]
 800cd30:	69ba      	ldr	r2, [r7, #24]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	dbe9      	blt.n	800cd0a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800cd36:	2300      	movs	r3, #0
 800cd38:	61bb      	str	r3, [r7, #24]
 800cd3a:	e049      	b.n	800cdd0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	425a      	negs	r2, r3
 800cd40:	f003 0307 	and.w	r3, r3, #7
 800cd44:	f002 0207 	and.w	r2, r2, #7
 800cd48:	bf58      	it	pl
 800cd4a:	4253      	negpl	r3, r2
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	f1c3 0307 	rsb	r3, r3, #7
 800cd52:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da00      	bge.n	800cd5c <payload_integration+0x6e>
 800cd5a:	3307      	adds	r3, #7
 800cd5c:	10db      	asrs	r3, r3, #3
 800cd5e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	3301      	adds	r3, #1
 800cd64:	425a      	negs	r2, r3
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	f002 0207 	and.w	r2, r2, #7
 800cd6e:	bf58      	it	pl
 800cd70:	4253      	negpl	r3, r2
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f1c3 0307 	rsb	r3, r3, #7
 800cd78:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	da00      	bge.n	800cd84 <payload_integration+0x96>
 800cd82:	3307      	adds	r3, #7
 800cd84:	10db      	asrs	r3, r3, #3
 800cd86:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800cd88:	7dbb      	ldrb	r3, [r7, #22]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	461a      	mov	r2, r3
 800cd92:	7dfb      	ldrb	r3, [r7, #23]
 800cd94:	fa42 f303 	asr.w	r3, r2, r3
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800cda0:	7ffa      	ldrb	r2, [r7, #31]
 800cda2:	7cfb      	ldrb	r3, [r7, #19]
 800cda4:	4053      	eors	r3, r2
 800cda6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800cda8:	7d3b      	ldrb	r3, [r7, #20]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	4413      	add	r3, r2
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	b25a      	sxtb	r2, r3
 800cdb2:	7ff9      	ldrb	r1, [r7, #31]
 800cdb4:	7d7b      	ldrb	r3, [r7, #21]
 800cdb6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdba:	b25b      	sxtb	r3, r3
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	b259      	sxtb	r1, r3
 800cdc0:	7d3b      	ldrb	r3, [r7, #20]
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	b2ca      	uxtb	r2, r1
 800cdc8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	61bb      	str	r3, [r7, #24]
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	69ba      	ldr	r2, [r7, #24]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	dbb0      	blt.n	800cd3c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800cdda:	7ffb      	ldrb	r3, [r7, #31]
 800cddc:	01db      	lsls	r3, r3, #7
 800cdde:	b25a      	sxtb	r2, r3
 800cde0:	7ffb      	ldrb	r3, [r7, #31]
 800cde2:	019b      	lsls	r3, r3, #6
 800cde4:	b25b      	sxtb	r3, r3
 800cde6:	4313      	orrs	r3, r2
 800cde8:	b25b      	sxtb	r3, r3
 800cdea:	7ffa      	ldrb	r2, [r7, #31]
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	d101      	bne.n	800cdf4 <payload_integration+0x106>
 800cdf0:	2220      	movs	r2, #32
 800cdf2:	e000      	b.n	800cdf6 <payload_integration+0x108>
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	b259      	sxtb	r1, r3
 800cdfa:	79fb      	ldrb	r3, [r7, #7]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	4413      	add	r3, r2
 800ce00:	b2ca      	uxtb	r2, r1
 800ce02:	701a      	strb	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	3724      	adds	r7, #36	; 0x24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bc80      	pop	{r7}
 800ce0c:	4770      	bx	lr
	...

0800ce10 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	; 0x30
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800ce24:	2300      	movs	r3, #0
 800ce26:	61fb      	str	r3, [r7, #28]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800ce2c:	f001 fccd 	bl	800e7ca <RFW_DeInit>

    if( rxContinuous != 0 )
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	bf14      	ite	ne
 800ce40:	2301      	movne	r3, #1
 800ce42:	2300      	moveq	r3, #0
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	4ba9      	ldr	r3, [pc, #676]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800ce48:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <RadioSetRxGenericConfig+0x48>
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	f000 80e8 	beq.w	800d026 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800ce56:	e1a0      	b.n	800d19a <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <RadioSetRxGenericConfig+0x58>
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	691b      	ldr	r3, [r3, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <RadioSetRxGenericConfig+0x5e>
            return -1;
 800ce68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce6c:	e196      	b.n	800d19c <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	7d5b      	ldrb	r3, [r3, #21]
 800ce72:	2b08      	cmp	r3, #8
 800ce74:	d902      	bls.n	800ce7c <RadioSetRxGenericConfig+0x6c>
            return -1;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce7a:	e18f      	b.n	800d19c <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce80:	e00d      	b.n	800ce9e <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	699a      	ldr	r2, [r3, #24]
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	4413      	add	r3, r2
 800ce8a:	7819      	ldrb	r1, [r3, #0]
 800ce8c:	f107 021c 	add.w	r2, r7, #28
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	4413      	add	r3, r2
 800ce94:	460a      	mov	r2, r1
 800ce96:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	7d5b      	ldrb	r3, [r3, #21]
 800cea2:	461a      	mov	r2, r3
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	4293      	cmp	r3, r2
 800cea8:	dbeb      	blt.n	800ce82 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	bf14      	ite	ne
 800ceb2:	2301      	movne	r3, #1
 800ceb4:	2300      	moveq	r3, #0
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 fd6b 	bl	800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cebe:	4b8b      	ldr	r3, [pc, #556]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	4a88      	ldr	r2, [pc, #544]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cecc:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	791a      	ldrb	r2, [r3, #4]
 800ced2:	4b86      	ldr	r3, [pc, #536]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800ced4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	4618      	mov	r0, r3
 800cede:	f001 fba5 	bl	800e62c <SUBGRF_GetFskBandwidthRegValue>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	4b81      	ldr	r3, [pc, #516]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ceec:	4b7f      	ldr	r3, [pc, #508]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	4b7b      	ldr	r3, [pc, #492]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cefe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	7d1a      	ldrb	r2, [r3, #20]
 800cf04:	4b79      	ldr	r3, [pc, #484]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf06:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	7d5b      	ldrb	r3, [r3, #21]
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	4b76      	ldr	r3, [pc, #472]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf12:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800cf1a:	4b74      	ldr	r3, [pc, #464]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf1c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d105      	bne.n	800cf34 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	69db      	ldr	r3, [r3, #28]
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	4b6f      	ldr	r3, [pc, #444]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf30:	759a      	strb	r2, [r3, #22]
 800cf32:	e00b      	b.n	800cf4c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d103      	bne.n	800cf46 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800cf3e:	4b6b      	ldr	r3, [pc, #428]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf40:	22ff      	movs	r2, #255	; 0xff
 800cf42:	759a      	strb	r2, [r3, #22]
 800cf44:	e002      	b.n	800cf4c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800cf46:	4b69      	ldr	r3, [pc, #420]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cf48:	22ff      	movs	r2, #255	; 0xff
 800cf4a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d004      	beq.n	800cf60 <RadioSetRxGenericConfig+0x150>
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d12d      	bne.n	800cfbc <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf66:	2bf1      	cmp	r3, #241	; 0xf1
 800cf68:	d00c      	beq.n	800cf84 <RadioSetRxGenericConfig+0x174>
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf70:	2bf2      	cmp	r3, #242	; 0xf2
 800cf72:	d007      	beq.n	800cf84 <RadioSetRxGenericConfig+0x174>
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d002      	beq.n	800cf84 <RadioSetRxGenericConfig+0x174>
            return -1;
 800cf7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf82:	e10b      	b.n	800d19c <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800cf84:	2300      	movs	r3, #0
 800cf86:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800cf8c:	4b58      	ldr	r3, [pc, #352]	; (800d0f0 <RadioSetRxGenericConfig+0x2e0>)
 800cf8e:	6819      	ldr	r1, [r3, #0]
 800cf90:	f107 0310 	add.w	r3, r7, #16
 800cf94:	4a57      	ldr	r2, [pc, #348]	; (800d0f4 <RadioSetRxGenericConfig+0x2e4>)
 800cf96:	4618      	mov	r0, r3
 800cf98:	f001 fc0a 	bl	800e7b0 <RFW_Init>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <RadioSetRxGenericConfig+0x198>
            return -1;
 800cfa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfa6:	e0f9      	b.n	800d19c <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800cfa8:	4b50      	ldr	r3, [pc, #320]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800cfae:	4b4f      	ldr	r3, [pc, #316]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800cfb4:	4b4d      	ldr	r3, [pc, #308]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	755a      	strb	r2, [r3, #21]
        {
 800cfba:	e00e      	b.n	800cfda <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cfc2:	4b4a      	ldr	r3, [pc, #296]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfc4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800cfcc:	4b47      	ldr	r3, [pc, #284]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfce:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800cfd6:	4b45      	ldr	r3, [pc, #276]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800cfd8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800cfda:	f7ff fac8 	bl	800c56e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800cfde:	2000      	movs	r0, #0
 800cfe0:	f7fe fc60 	bl	800b8a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cfe4:	4844      	ldr	r0, [pc, #272]	; (800d0f8 <RadioSetRxGenericConfig+0x2e8>)
 800cfe6:	f000 ff03 	bl	800ddf0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cfea:	4844      	ldr	r0, [pc, #272]	; (800d0fc <RadioSetRxGenericConfig+0x2ec>)
 800cfec:	f000 ffcc 	bl	800df88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800cff0:	f107 031c 	add.w	r3, r7, #28
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 fb06 	bl	800d606 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	8c1b      	ldrh	r3, [r3, #32]
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 fb50 	bl	800d6a4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fb2b 	bl	800d664 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800d014:	fb02 f203 	mul.w	r2, r2, r3
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d020:	4a32      	ldr	r2, [pc, #200]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d022:	6093      	str	r3, [r2, #8]
        break;
 800d024:	e0b9      	b.n	800d19a <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d102      	bne.n	800d034 <RadioSetRxGenericConfig+0x224>
            return -1;
 800d02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d032:	e0b3      	b.n	800d19c <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d104      	bne.n	800d048 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	69db      	ldr	r3, [r3, #28]
 800d042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d046:	e002      	b.n	800d04e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800d048:	23ff      	movs	r3, #255	; 0xff
 800d04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	bf14      	ite	ne
 800d056:	2301      	movne	r3, #1
 800d058:	2300      	moveq	r3, #0
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4618      	mov	r0, r3
 800d05e:	f000 fc99 	bl	800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	b2db      	uxtb	r3, r3
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fca3 	bl	800d9b2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d06c:	4b1f      	ldr	r3, [pc, #124]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d06e:	2201      	movs	r2, #1
 800d070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d07a:	4b1c      	ldr	r3, [pc, #112]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d07c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800d086:	4b19      	ldr	r3, [pc, #100]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d088:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800d092:	4b16      	ldr	r3, [pc, #88]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d094:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d010      	beq.n	800d0c4 <RadioSetRxGenericConfig+0x2b4>
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	dc2c      	bgt.n	800d100 <RadioSetRxGenericConfig+0x2f0>
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <RadioSetRxGenericConfig+0x2a0>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d005      	beq.n	800d0ba <RadioSetRxGenericConfig+0x2aa>
            break;
 800d0ae:	e027      	b.n	800d100 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d0b0:	4b0e      	ldr	r3, [pc, #56]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d0b8:	e023      	b.n	800d102 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d0ba:	4b0c      	ldr	r3, [pc, #48]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d0c2:	e01e      	b.n	800d102 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ca:	2b0b      	cmp	r3, #11
 800d0cc:	d004      	beq.n	800d0d8 <RadioSetRxGenericConfig+0x2c8>
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0d4:	2b0c      	cmp	r3, #12
 800d0d6:	d104      	bne.n	800d0e2 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d0d8:	4b04      	ldr	r3, [pc, #16]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d0e0:	e00f      	b.n	800d102 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d0e2:	4b02      	ldr	r3, [pc, #8]	; (800d0ec <RadioSetRxGenericConfig+0x2dc>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d0ea:	e00a      	b.n	800d102 <RadioSetRxGenericConfig+0x2f2>
 800d0ec:	20002924 	.word	0x20002924
 800d0f0:	20001e9c 	.word	0x20001e9c
 800d0f4:	20002994 	.word	0x20002994
 800d0f8:	2000295c 	.word	0x2000295c
 800d0fc:	20002932 	.word	0x20002932
            break;
 800d100:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d102:	4b28      	ldr	r3, [pc, #160]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d104:	2201      	movs	r2, #1
 800d106:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800d10c:	4b25      	ldr	r3, [pc, #148]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d10e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800d116:	4b23      	ldr	r3, [pc, #140]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d118:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d11a:	4a22      	ldr	r2, [pc, #136]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d11c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d120:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800d128:	4b1e      	ldr	r3, [pc, #120]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d12a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800d134:	4b1b      	ldr	r3, [pc, #108]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800d13a:	f7ff fa18 	bl	800c56e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800d13e:	2001      	movs	r0, #1
 800d140:	f7fe fbb0 	bl	800b8a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d144:	4818      	ldr	r0, [pc, #96]	; (800d1a8 <RadioSetRxGenericConfig+0x398>)
 800d146:	f000 fe53 	bl	800ddf0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d14a:	4818      	ldr	r0, [pc, #96]	; (800d1ac <RadioSetRxGenericConfig+0x39c>)
 800d14c:	f000 ff1c 	bl	800df88 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800d150:	4b14      	ldr	r3, [pc, #80]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d152:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d156:	2b01      	cmp	r3, #1
 800d158:	d10d      	bne.n	800d176 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800d15a:	f240 7036 	movw	r0, #1846	; 0x736
 800d15e:	f001 f86f 	bl	800e240 <SUBGRF_ReadRegister>
 800d162:	4603      	mov	r3, r0
 800d164:	f023 0304 	bic.w	r3, r3, #4
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	4619      	mov	r1, r3
 800d16c:	f240 7036 	movw	r0, #1846	; 0x736
 800d170:	f001 f852 	bl	800e218 <SUBGRF_WriteRegister>
 800d174:	e00c      	b.n	800d190 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800d176:	f240 7036 	movw	r0, #1846	; 0x736
 800d17a:	f001 f861 	bl	800e240 <SUBGRF_ReadRegister>
 800d17e:	4603      	mov	r3, r0
 800d180:	f043 0304 	orr.w	r3, r3, #4
 800d184:	b2db      	uxtb	r3, r3
 800d186:	4619      	mov	r1, r3
 800d188:	f240 7036 	movw	r0, #1846	; 0x736
 800d18c:	f001 f844 	bl	800e218 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800d190:	4b04      	ldr	r3, [pc, #16]	; (800d1a4 <RadioSetRxGenericConfig+0x394>)
 800d192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d196:	609a      	str	r2, [r3, #8]
        break;
 800d198:	bf00      	nop
    }
    return status;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3730      	adds	r7, #48	; 0x30
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	20002924 	.word	0x20002924
 800d1a8:	2000295c 	.word	0x2000295c
 800d1ac:	20002932 	.word	0x20002932

0800d1b0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08a      	sub	sp, #40	; 0x28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607b      	str	r3, [r7, #4]
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	61fb      	str	r3, [r7, #28]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800d1ca:	f001 fafe 	bl	800e7ca <RFW_DeInit>
    switch( modem )
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	f000 8144 	beq.w	800d45e <RadioSetTxGenericConfig+0x2ae>
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	f300 8160 	bgt.w	800d49c <RadioSetTxGenericConfig+0x2ec>
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <RadioSetTxGenericConfig+0x38>
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	f000 80b7 	beq.w	800d354 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800d1e6:	e159      	b.n	800d49c <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <RadioSetTxGenericConfig+0x48>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <RadioSetTxGenericConfig+0x4e>
            return -1;
 800d1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1fc:	e163      	b.n	800d4c6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	7d1b      	ldrb	r3, [r3, #20]
 800d202:	2b08      	cmp	r3, #8
 800d204:	d902      	bls.n	800d20c <RadioSetTxGenericConfig+0x5c>
            return -1;
 800d206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d20a:	e15c      	b.n	800d4c6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800d20c:	2300      	movs	r3, #0
 800d20e:	627b      	str	r3, [r7, #36]	; 0x24
 800d210:	e00d      	b.n	800d22e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	699a      	ldr	r2, [r3, #24]
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	4413      	add	r3, r2
 800d21a:	7819      	ldrb	r1, [r3, #0]
 800d21c:	f107 021c 	add.w	r2, r7, #28
 800d220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d222:	4413      	add	r3, r2
 800d224:	460a      	mov	r2, r1
 800d226:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	3301      	adds	r3, #1
 800d22c:	627b      	str	r3, [r7, #36]	; 0x24
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	7d1b      	ldrb	r3, [r3, #20]
 800d232:	461a      	mov	r2, r3
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	4293      	cmp	r3, r2
 800d238:	dbeb      	blt.n	800d212 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d23a:	4ba5      	ldr	r3, [pc, #660]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	689b      	ldr	r3, [r3, #8]
 800d246:	4aa2      	ldr	r2, [pc, #648]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d248:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	781a      	ldrb	r2, [r3, #0]
 800d24e:	4ba0      	ldr	r3, [pc, #640]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 f9e7 	bl	800e62c <SUBGRF_GetFskBandwidthRegValue>
 800d25e:	4603      	mov	r3, r0
 800d260:	461a      	mov	r2, r3
 800d262:	4b9b      	ldr	r3, [pc, #620]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	4a98      	ldr	r2, [pc, #608]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d26e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d270:	4b97      	ldr	r3, [pc, #604]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d272:	2200      	movs	r2, #0
 800d274:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	b29a      	uxth	r2, r3
 800d280:	4b93      	ldr	r3, [pc, #588]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d282:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800d284:	4b92      	ldr	r3, [pc, #584]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d286:	2204      	movs	r2, #4
 800d288:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	7d1b      	ldrb	r3, [r3, #20]
 800d28e:	00db      	lsls	r3, r3, #3
 800d290:	b2da      	uxtb	r2, r3
 800d292:	4b8f      	ldr	r3, [pc, #572]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d294:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800d296:	4b8e      	ldr	r3, [pc, #568]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d298:	2200      	movs	r2, #0
 800d29a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d003      	beq.n	800d2ae <RadioSetTxGenericConfig+0xfe>
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	7f9b      	ldrb	r3, [r3, #30]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d12a      	bne.n	800d304 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	7fdb      	ldrb	r3, [r3, #31]
 800d2b2:	2bf1      	cmp	r3, #241	; 0xf1
 800d2b4:	d00a      	beq.n	800d2cc <RadioSetTxGenericConfig+0x11c>
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	7fdb      	ldrb	r3, [r3, #31]
 800d2ba:	2bf2      	cmp	r3, #242	; 0xf2
 800d2bc:	d006      	beq.n	800d2cc <RadioSetTxGenericConfig+0x11c>
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	7fdb      	ldrb	r3, [r3, #31]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d002      	beq.n	800d2cc <RadioSetTxGenericConfig+0x11c>
                return -1;
 800d2c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2ca:	e0fc      	b.n	800d4c6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800d2d4:	4b7f      	ldr	r3, [pc, #508]	; (800d4d4 <RadioSetTxGenericConfig+0x324>)
 800d2d6:	6819      	ldr	r1, [r3, #0]
 800d2d8:	f107 0310 	add.w	r3, r7, #16
 800d2dc:	4a7e      	ldr	r2, [pc, #504]	; (800d4d8 <RadioSetTxGenericConfig+0x328>)
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 fa66 	bl	800e7b0 <RFW_Init>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <RadioSetTxGenericConfig+0x140>
              return -1;
 800d2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2ee:	e0ea      	b.n	800d4c6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d2f0:	4b77      	ldr	r3, [pc, #476]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800d2f6:	4b76      	ldr	r3, [pc, #472]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d2fc:	4b74      	ldr	r3, [pc, #464]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	755a      	strb	r2, [r3, #21]
        {
 800d302:	e00c      	b.n	800d31e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	7fda      	ldrb	r2, [r3, #31]
 800d308:	4b71      	ldr	r3, [pc, #452]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d30a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d312:	4b6f      	ldr	r3, [pc, #444]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d314:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	7f9a      	ldrb	r2, [r3, #30]
 800d31a:	4b6d      	ldr	r3, [pc, #436]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d31c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800d31e:	f7ff f926 	bl	800c56e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800d322:	2000      	movs	r0, #0
 800d324:	f7fe fabe 	bl	800b8a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d328:	486c      	ldr	r0, [pc, #432]	; (800d4dc <RadioSetTxGenericConfig+0x32c>)
 800d32a:	f000 fd61 	bl	800ddf0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d32e:	486c      	ldr	r0, [pc, #432]	; (800d4e0 <RadioSetTxGenericConfig+0x330>)
 800d330:	f000 fe2a 	bl	800df88 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800d334:	f107 031c 	add.w	r3, r7, #28
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 f964 	bl	800d606 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	8b9b      	ldrh	r3, [r3, #28]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 f9ae 	bl	800d6a4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	8c1b      	ldrh	r3, [r3, #32]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 f989 	bl	800d664 <SUBGRF_SetCrcPolynomial>
        break;
 800d352:	e0a4      	b.n	800d49e <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d354:	4b5e      	ldr	r3, [pc, #376]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800d362:	4b5b      	ldr	r3, [pc, #364]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800d36e:	4b58      	ldr	r3, [pc, #352]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d37a:	4b55      	ldr	r3, [pc, #340]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d37c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800d386:	2b02      	cmp	r3, #2
 800d388:	d010      	beq.n	800d3ac <RadioSetTxGenericConfig+0x1fc>
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	dc22      	bgt.n	800d3d4 <RadioSetTxGenericConfig+0x224>
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <RadioSetTxGenericConfig+0x1e8>
 800d392:	2b01      	cmp	r3, #1
 800d394:	d005      	beq.n	800d3a2 <RadioSetTxGenericConfig+0x1f2>
            break;
 800d396:	e01d      	b.n	800d3d4 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d398:	4b4d      	ldr	r3, [pc, #308]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d3a0:	e019      	b.n	800d3d6 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d3a2:	4b4b      	ldr	r3, [pc, #300]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d3aa:	e014      	b.n	800d3d6 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3b2:	2b0b      	cmp	r3, #11
 800d3b4:	d004      	beq.n	800d3c0 <RadioSetTxGenericConfig+0x210>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3bc:	2b0c      	cmp	r3, #12
 800d3be:	d104      	bne.n	800d3ca <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800d3c0:	4b43      	ldr	r3, [pc, #268]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d3c8:	e005      	b.n	800d3d6 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800d3ca:	4b41      	ldr	r3, [pc, #260]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800d3d2:	e000      	b.n	800d3d6 <RadioSetTxGenericConfig+0x226>
            break;
 800d3d4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d3d6:	4b3e      	ldr	r3, [pc, #248]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d3e0:	4b3b      	ldr	r3, [pc, #236]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3e2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800d3ea:	4b39      	ldr	r3, [pc, #228]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3ec:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d3f4:	4b36      	ldr	r3, [pc, #216]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d3f6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d400:	4b33      	ldr	r3, [pc, #204]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800d406:	f7ff f8b2 	bl	800c56e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800d40a:	2001      	movs	r0, #1
 800d40c:	f7fe fa4a 	bl	800b8a4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d410:	4832      	ldr	r0, [pc, #200]	; (800d4dc <RadioSetTxGenericConfig+0x32c>)
 800d412:	f000 fced 	bl	800ddf0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d416:	4832      	ldr	r0, [pc, #200]	; (800d4e0 <RadioSetTxGenericConfig+0x330>)
 800d418:	f000 fdb6 	bl	800df88 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800d41c:	4b2c      	ldr	r3, [pc, #176]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d41e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d422:	2b06      	cmp	r3, #6
 800d424:	d10d      	bne.n	800d442 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800d426:	f640 0089 	movw	r0, #2185	; 0x889
 800d42a:	f000 ff09 	bl	800e240 <SUBGRF_ReadRegister>
 800d42e:	4603      	mov	r3, r0
 800d430:	f023 0304 	bic.w	r3, r3, #4
 800d434:	b2db      	uxtb	r3, r3
 800d436:	4619      	mov	r1, r3
 800d438:	f640 0089 	movw	r0, #2185	; 0x889
 800d43c:	f000 feec 	bl	800e218 <SUBGRF_WriteRegister>
        break;
 800d440:	e02d      	b.n	800d49e <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800d442:	f640 0089 	movw	r0, #2185	; 0x889
 800d446:	f000 fefb 	bl	800e240 <SUBGRF_ReadRegister>
 800d44a:	4603      	mov	r3, r0
 800d44c:	f043 0304 	orr.w	r3, r3, #4
 800d450:	b2db      	uxtb	r3, r3
 800d452:	4619      	mov	r1, r3
 800d454:	f640 0089 	movw	r0, #2185	; 0x889
 800d458:	f000 fede 	bl	800e218 <SUBGRF_WriteRegister>
        break;
 800d45c:	e01f      	b.n	800d49e <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d462:	2b00      	cmp	r3, #0
 800d464:	d004      	beq.n	800d470 <RadioSetTxGenericConfig+0x2c0>
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d46e:	d902      	bls.n	800d476 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800d470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d474:	e027      	b.n	800d4c6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800d476:	2002      	movs	r0, #2
 800d478:	f7fe fa14 	bl	800b8a4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800d47c:	4b14      	ldr	r3, [pc, #80]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d47e:	2202      	movs	r2, #2
 800d480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	4a11      	ldr	r2, [pc, #68]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d48a:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800d48c:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d48e:	2216      	movs	r2, #22
 800d490:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d494:	4811      	ldr	r0, [pc, #68]	; (800d4dc <RadioSetTxGenericConfig+0x32c>)
 800d496:	f000 fcab 	bl	800ddf0 <SUBGRF_SetModulationParams>
        break;
 800d49a:	e000      	b.n	800d49e <RadioSetTxGenericConfig+0x2ee>
        break;
 800d49c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800d49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 ffd4 	bl	800e450 <SUBGRF_SetRfTxPower>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b08      	ldr	r3, [pc, #32]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d4ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800d4b2:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d4b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f001 f99a 	bl	800e7f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800d4be:	4a04      	ldr	r2, [pc, #16]	; (800d4d0 <RadioSetTxGenericConfig+0x320>)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6053      	str	r3, [r2, #4]
    return 0;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3728      	adds	r7, #40	; 0x28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20002924 	.word	0x20002924
 800d4d4:	20001e9c 	.word	0x20001e9c
 800d4d8:	2000297c 	.word	0x2000297c
 800d4dc:	2000295c 	.word	0x2000295c
 800d4e0:	20002932 	.word	0x20002932

0800d4e4 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800d4f2:	4a1a      	ldr	r2, [pc, #104]	; (800d55c <SUBGRF_Init+0x78>)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800d4f8:	f7f3 fefe 	bl	80012f8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800d4fc:	2002      	movs	r0, #2
 800d4fe:	f001 f873 	bl	800e5e8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800d502:	4b17      	ldr	r3, [pc, #92]	; (800d560 <SUBGRF_Init+0x7c>)
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800d508:	2000      	movs	r0, #0
 800d50a:	f000 f977 	bl	800d7fc <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800d50e:	f001 fc04 	bl	800ed1a <RBI_IsTCXO>
 800d512:	4603      	mov	r3, r0
 800d514:	2b01      	cmp	r3, #1
 800d516:	d10e      	bne.n	800d536 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800d518:	2140      	movs	r1, #64	; 0x40
 800d51a:	2001      	movs	r0, #1
 800d51c:	f000 fb78 	bl	800dc10 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800d520:	2100      	movs	r1, #0
 800d522:	f640 1011 	movw	r0, #2321	; 0x911
 800d526:	f000 fe77 	bl	800e218 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800d52a:	237f      	movs	r3, #127	; 0x7f
 800d52c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800d52e:	7b38      	ldrb	r0, [r7, #12]
 800d530:	f000 fa85 	bl	800da3e <SUBGRF_Calibrate>
 800d534:	e009      	b.n	800d54a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800d536:	2120      	movs	r1, #32
 800d538:	f640 1011 	movw	r0, #2321	; 0x911
 800d53c:	f000 fe6c 	bl	800e218 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800d540:	2120      	movs	r1, #32
 800d542:	f640 1012 	movw	r0, #2322	; 0x912
 800d546:	f000 fe67 	bl	800e218 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800d54a:	f001 fbc3 	bl	800ecd4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <SUBGRF_Init+0x80>)
 800d550:	2201      	movs	r2, #1
 800d552:	701a      	strb	r2, [r3, #0]
}
 800d554:	bf00      	nop
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20001eac 	.word	0x20001eac
 800d560:	20001ea8 	.word	0x20001ea8
 800d564:	20001ea0 	.word	0x20001ea0

0800d568 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800d568:	b480      	push	{r7}
 800d56a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <SUBGRF_GetOperatingMode+0x10>)
 800d56e:	781b      	ldrb	r3, [r3, #0]
}
 800d570:	4618      	mov	r0, r3
 800d572:	46bd      	mov	sp, r7
 800d574:	bc80      	pop	{r7}
 800d576:	4770      	bx	lr
 800d578:	20001ea0 	.word	0x20001ea0

0800d57c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	461a      	mov	r2, r3
 800d58c:	6879      	ldr	r1, [r7, #4]
 800d58e:	2000      	movs	r0, #0
 800d590:	f000 feae 	bl	800e2f0 <SUBGRF_WriteBuffer>
}
 800d594:	bf00      	nop
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b086      	sub	sp, #24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800d5ae:	f107 0317 	add.w	r3, r7, #23
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	68b8      	ldr	r0, [r7, #8]
 800d5b6:	f000 fdb1 	bl	800e11c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	79fa      	ldrb	r2, [r7, #7]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d201      	bcs.n	800d5c8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e007      	b.n	800d5d8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800d5c8:	7df8      	ldrb	r0, [r7, #23]
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	68f9      	ldr	r1, [r7, #12]
 800d5d2:	f000 feaf 	bl	800e334 <SUBGRF_ReadBuffer>

    return 0;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	607a      	str	r2, [r7, #4]
 800d5ec:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800d5ee:	7afb      	ldrb	r3, [r7, #11]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f7ff ffc2 	bl	800d57c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f91b 	bl	800d834 <SUBGRF_SetTx>
}
 800d5fe:	bf00      	nop
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b082      	sub	sp, #8
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800d60e:	2208      	movs	r2, #8
 800d610:	6879      	ldr	r1, [r7, #4]
 800d612:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800d616:	f000 fe27 	bl	800e268 <SUBGRF_WriteRegisters>
    return 0;
 800d61a:	2300      	movs	r3, #0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	4603      	mov	r3, r0
 800d62c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800d62e:	88fb      	ldrh	r3, [r7, #6]
 800d630:	0a1b      	lsrs	r3, r3, #8
 800d632:	b29b      	uxth	r3, r3
 800d634:	b2db      	uxtb	r3, r3
 800d636:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800d638:	88fb      	ldrh	r3, [r7, #6]
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800d63e:	f000 fb67 	bl	800dd10 <SUBGRF_GetPacketType>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d108      	bne.n	800d65a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800d648:	f107 030c 	add.w	r3, r7, #12
 800d64c:	2202      	movs	r2, #2
 800d64e:	4619      	mov	r1, r3
 800d650:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800d654:	f000 fe08 	bl	800e268 <SUBGRF_WriteRegisters>
            break;
 800d658:	e000      	b.n	800d65c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800d65a:	bf00      	nop
    }
}
 800d65c:	bf00      	nop
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800d66e:	88fb      	ldrh	r3, [r7, #6]
 800d670:	0a1b      	lsrs	r3, r3, #8
 800d672:	b29b      	uxth	r3, r3
 800d674:	b2db      	uxtb	r3, r3
 800d676:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800d678:	88fb      	ldrh	r3, [r7, #6]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800d67e:	f000 fb47 	bl	800dd10 <SUBGRF_GetPacketType>
 800d682:	4603      	mov	r3, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d108      	bne.n	800d69a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800d688:	f107 030c 	add.w	r3, r7, #12
 800d68c:	2202      	movs	r2, #2
 800d68e:	4619      	mov	r1, r3
 800d690:	f240 60be 	movw	r0, #1726	; 0x6be
 800d694:	f000 fde8 	bl	800e268 <SUBGRF_WriteRegisters>
            break;
 800d698:	e000      	b.n	800d69c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800d69a:	bf00      	nop
    }
}
 800d69c:	bf00      	nop
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800d6b2:	f000 fb2d 	bl	800dd10 <SUBGRF_GetPacketType>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d121      	bne.n	800d700 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800d6bc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d6c0:	f000 fdbe 	bl	800e240 <SUBGRF_ReadRegister>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f023 0301 	bic.w	r3, r3, #1
 800d6ca:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800d6cc:	88fb      	ldrh	r3, [r7, #6]
 800d6ce:	0a1b      	lsrs	r3, r3, #8
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	b25a      	sxtb	r2, r3
 800d6da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	b25b      	sxtb	r3, r3
 800d6e2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d6ec:	f000 fd94 	bl	800e218 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800d6f0:	88fb      	ldrh	r3, [r7, #6]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800d6fa:	f000 fd8d 	bl	800e218 <SUBGRF_WriteRegister>
            break;
 800d6fe:	e000      	b.n	800d702 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800d700:	bf00      	nop
    }
}
 800d702:	bf00      	nop
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800d71c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d720:	f000 fd8e 	bl	800e240 <SUBGRF_ReadRegister>
 800d724:	4603      	mov	r3, r0
 800d726:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	f023 0301 	bic.w	r3, r3, #1
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	4619      	mov	r1, r3
 800d732:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d736:	f000 fd6f 	bl	800e218 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800d73a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d73e:	f000 fd7f 	bl	800e240 <SUBGRF_ReadRegister>
 800d742:	4603      	mov	r3, r0
 800d744:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800d746:	79bb      	ldrb	r3, [r7, #6]
 800d748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	4619      	mov	r1, r3
 800d750:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d754:	f000 fd60 	bl	800e218 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800d758:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d75c:	f000 f88a 	bl	800d874 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800d760:	463b      	mov	r3, r7
 800d762:	2204      	movs	r2, #4
 800d764:	4619      	mov	r1, r3
 800d766:	f640 0019 	movw	r0, #2073	; 0x819
 800d76a:	f000 fd9f 	bl	800e2ac <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800d76e:	2000      	movs	r0, #0
 800d770:	f000 f844 	bl	800d7fc <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	4619      	mov	r1, r3
 800d778:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800d77c:	f000 fd4c 	bl	800e218 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800d780:	79bb      	ldrb	r3, [r7, #6]
 800d782:	4619      	mov	r1, r3
 800d784:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800d788:	f000 fd46 	bl	800e218 <SUBGRF_WriteRegister>

    return number;
 800d78c:	683b      	ldr	r3, [r7, #0]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
	...

0800d798 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f001 faa2 	bl	800ecea <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800d7a6:	2002      	movs	r0, #2
 800d7a8:	f000 ff1e 	bl	800e5e8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d7ac:	793b      	ldrb	r3, [r7, #4]
 800d7ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d7b8:	793b      	ldrb	r3, [r7, #4]
 800d7ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d7c2:	b25b      	sxtb	r3, r3
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800d7c8:	793b      	ldrb	r3, [r7, #4]
 800d7ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	b25b      	sxtb	r3, r3
 800d7d6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800d7d8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800d7da:	f107 030f 	add.w	r3, r7, #15
 800d7de:	2201      	movs	r2, #1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	2084      	movs	r0, #132	; 0x84
 800d7e4:	f000 fdc8 	bl	800e378 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800d7e8:	4b03      	ldr	r3, [pc, #12]	; (800d7f8 <SUBGRF_SetSleep+0x60>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	701a      	strb	r2, [r3, #0]
}
 800d7ee:	bf00      	nop
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	20001ea0 	.word	0x20001ea0

0800d7fc <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800d806:	1dfb      	adds	r3, r7, #7
 800d808:	2201      	movs	r2, #1
 800d80a:	4619      	mov	r1, r3
 800d80c:	2080      	movs	r0, #128	; 0x80
 800d80e:	f000 fdb3 	bl	800e378 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800d812:	79fb      	ldrb	r3, [r7, #7]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800d818:	4b05      	ldr	r3, [pc, #20]	; (800d830 <SUBGRF_SetStandby+0x34>)
 800d81a:	2201      	movs	r2, #1
 800d81c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800d81e:	e002      	b.n	800d826 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800d820:	4b03      	ldr	r3, [pc, #12]	; (800d830 <SUBGRF_SetStandby+0x34>)
 800d822:	2202      	movs	r2, #2
 800d824:	701a      	strb	r2, [r3, #0]
}
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20001ea0 	.word	0x20001ea0

0800d834 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800d83c:	4b0c      	ldr	r3, [pc, #48]	; (800d870 <SUBGRF_SetTx+0x3c>)
 800d83e:	2204      	movs	r2, #4
 800d840:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	b2db      	uxtb	r3, r3
 800d848:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	0a1b      	lsrs	r3, r3, #8
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	b2db      	uxtb	r3, r3
 800d856:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800d858:	f107 030c 	add.w	r3, r7, #12
 800d85c:	2203      	movs	r2, #3
 800d85e:	4619      	mov	r1, r3
 800d860:	2083      	movs	r0, #131	; 0x83
 800d862:	f000 fd89 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	20001ea0 	.word	0x20001ea0

0800d874 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800d87c:	4b0c      	ldr	r3, [pc, #48]	; (800d8b0 <SUBGRF_SetRx+0x3c>)
 800d87e:	2205      	movs	r2, #5
 800d880:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	0c1b      	lsrs	r3, r3, #16
 800d886:	b2db      	uxtb	r3, r3
 800d888:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	0a1b      	lsrs	r3, r3, #8
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	b2db      	uxtb	r3, r3
 800d896:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800d898:	f107 030c 	add.w	r3, r7, #12
 800d89c:	2203      	movs	r2, #3
 800d89e:	4619      	mov	r1, r3
 800d8a0:	2082      	movs	r0, #130	; 0x82
 800d8a2:	f000 fd69 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d8a6:	bf00      	nop
 800d8a8:	3710      	adds	r7, #16
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	20001ea0 	.word	0x20001ea0

0800d8b4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800d8bc:	4b0e      	ldr	r3, [pc, #56]	; (800d8f8 <SUBGRF_SetRxBoosted+0x44>)
 800d8be:	2205      	movs	r2, #5
 800d8c0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800d8c2:	2197      	movs	r1, #151	; 0x97
 800d8c4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800d8c8:	f000 fca6 	bl	800e218 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	0c1b      	lsrs	r3, r3, #16
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	0a1b      	lsrs	r3, r3, #8
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800d8e2:	f107 030c 	add.w	r3, r7, #12
 800d8e6:	2203      	movs	r2, #3
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	2082      	movs	r0, #130	; 0x82
 800d8ec:	f000 fd44 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20001ea0 	.word	0x20001ea0

0800d8fc <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	0c1b      	lsrs	r3, r3, #16
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	0a1b      	lsrs	r3, r3, #8
 800d912:	b2db      	uxtb	r3, r3
 800d914:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	0c1b      	lsrs	r3, r3, #16
 800d920:	b2db      	uxtb	r3, r3
 800d922:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	0a1b      	lsrs	r3, r3, #8
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800d932:	f107 0308 	add.w	r3, r7, #8
 800d936:	2206      	movs	r2, #6
 800d938:	4619      	mov	r1, r3
 800d93a:	2094      	movs	r0, #148	; 0x94
 800d93c:	f000 fd1c 	bl	800e378 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800d940:	4b03      	ldr	r3, [pc, #12]	; (800d950 <SUBGRF_SetRxDutyCycle+0x54>)
 800d942:	2206      	movs	r2, #6
 800d944:	701a      	strb	r2, [r3, #0]
}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	20001ea0 	.word	0x20001ea0

0800d954 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	20c5      	movs	r0, #197	; 0xc5
 800d95e:	f000 fd0b 	bl	800e378 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800d962:	4b02      	ldr	r3, [pc, #8]	; (800d96c <SUBGRF_SetCad+0x18>)
 800d964:	2207      	movs	r2, #7
 800d966:	701a      	strb	r2, [r3, #0]
}
 800d968:	bf00      	nop
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20001ea0 	.word	0x20001ea0

0800d970 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800d974:	2200      	movs	r2, #0
 800d976:	2100      	movs	r1, #0
 800d978:	20d1      	movs	r0, #209	; 0xd1
 800d97a:	f000 fcfd 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d97e:	bf00      	nop
 800d980:	bd80      	pop	{r7, pc}

0800d982 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800d982:	b580      	push	{r7, lr}
 800d984:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800d986:	2200      	movs	r2, #0
 800d988:	2100      	movs	r1, #0
 800d98a:	20d2      	movs	r0, #210	; 0xd2
 800d98c:	f000 fcf4 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d990:	bf00      	nop
 800d992:	bd80      	pop	{r7, pc}

0800d994 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800d99e:	1dfb      	adds	r3, r7, #7
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	209f      	movs	r0, #159	; 0x9f
 800d9a6:	f000 fce7 	bl	800e378 <SUBGRF_WriteCommand>
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b084      	sub	sp, #16
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800d9bc:	1dfb      	adds	r3, r7, #7
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	20a0      	movs	r0, #160	; 0xa0
 800d9c4:	f000 fcd8 	bl	800e378 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800d9c8:	79fb      	ldrb	r3, [r7, #7]
 800d9ca:	2b3f      	cmp	r3, #63	; 0x3f
 800d9cc:	d91c      	bls.n	800da08 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	085b      	lsrs	r3, r3, #1
 800d9d2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800d9dc:	e005      	b.n	800d9ea <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800d9de:	7bfb      	ldrb	r3, [r7, #15]
 800d9e0:	089b      	lsrs	r3, r3, #2
 800d9e2:	73fb      	strb	r3, [r7, #15]
            exp++;
 800d9e4:	7bbb      	ldrb	r3, [r7, #14]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800d9ea:	7bfb      	ldrb	r3, [r7, #15]
 800d9ec:	2b1f      	cmp	r3, #31
 800d9ee:	d8f6      	bhi.n	800d9de <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800d9f0:	7bfb      	ldrb	r3, [r7, #15]
 800d9f2:	00db      	lsls	r3, r3, #3
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	7bbb      	ldrb	r3, [r7, #14]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800d9fc:	7b7b      	ldrb	r3, [r7, #13]
 800d9fe:	4619      	mov	r1, r3
 800da00:	f240 7006 	movw	r0, #1798	; 0x706
 800da04:	f000 fc08 	bl	800e218 <SUBGRF_WriteRegister>
    }
}
 800da08:	bf00      	nop
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800da16:	f001 f98b 	bl	800ed30 <RBI_IsDCDC>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d102      	bne.n	800da26 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800da20:	2301      	movs	r3, #1
 800da22:	71fb      	strb	r3, [r7, #7]
 800da24:	e001      	b.n	800da2a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800da26:	2300      	movs	r3, #0
 800da28:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800da2a:	1dfb      	adds	r3, r7, #7
 800da2c:	2201      	movs	r2, #1
 800da2e:	4619      	mov	r1, r3
 800da30:	2096      	movs	r0, #150	; 0x96
 800da32:	f000 fca1 	bl	800e378 <SUBGRF_WriteCommand>
}
 800da36:	bf00      	nop
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800da46:	793b      	ldrb	r3, [r7, #4]
 800da48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800da4c:	b2db      	uxtb	r3, r3
 800da4e:	019b      	lsls	r3, r3, #6
 800da50:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800da52:	793b      	ldrb	r3, [r7, #4]
 800da54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800da5c:	b25b      	sxtb	r3, r3
 800da5e:	4313      	orrs	r3, r2
 800da60:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800da62:	793b      	ldrb	r3, [r7, #4]
 800da64:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800da6c:	b25b      	sxtb	r3, r3
 800da6e:	4313      	orrs	r3, r2
 800da70:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800da72:	793b      	ldrb	r3, [r7, #4]
 800da74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800da7c:	b25b      	sxtb	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800da82:	793b      	ldrb	r3, [r7, #4]
 800da84:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800da8c:	b25b      	sxtb	r3, r3
 800da8e:	4313      	orrs	r3, r2
 800da90:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800da92:	793b      	ldrb	r3, [r7, #4]
 800da94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800da9c:	b25b      	sxtb	r3, r3
 800da9e:	4313      	orrs	r3, r2
 800daa0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800daa2:	793b      	ldrb	r3, [r7, #4]
 800daa4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800daac:	4313      	orrs	r3, r2
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dab2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800dab4:	f107 030f 	add.w	r3, r7, #15
 800dab8:	2201      	movs	r2, #1
 800daba:	4619      	mov	r1, r3
 800dabc:	2089      	movs	r0, #137	; 0x89
 800dabe:	f000 fc5b 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
	...

0800dacc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	4a1b      	ldr	r2, [pc, #108]	; (800db44 <SUBGRF_CalibrateImage+0x78>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d904      	bls.n	800dae6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800dadc:	23e1      	movs	r3, #225	; 0xe1
 800dade:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800dae0:	23e9      	movs	r3, #233	; 0xe9
 800dae2:	737b      	strb	r3, [r7, #13]
 800dae4:	e022      	b.n	800db2c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a17      	ldr	r2, [pc, #92]	; (800db48 <SUBGRF_CalibrateImage+0x7c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d904      	bls.n	800daf8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800daee:	23d7      	movs	r3, #215	; 0xd7
 800daf0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800daf2:	23db      	movs	r3, #219	; 0xdb
 800daf4:	737b      	strb	r3, [r7, #13]
 800daf6:	e019      	b.n	800db2c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a14      	ldr	r2, [pc, #80]	; (800db4c <SUBGRF_CalibrateImage+0x80>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d904      	bls.n	800db0a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800db00:	23c1      	movs	r3, #193	; 0xc1
 800db02:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800db04:	23c5      	movs	r3, #197	; 0xc5
 800db06:	737b      	strb	r3, [r7, #13]
 800db08:	e010      	b.n	800db2c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a10      	ldr	r2, [pc, #64]	; (800db50 <SUBGRF_CalibrateImage+0x84>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d904      	bls.n	800db1c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800db12:	2375      	movs	r3, #117	; 0x75
 800db14:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800db16:	2381      	movs	r3, #129	; 0x81
 800db18:	737b      	strb	r3, [r7, #13]
 800db1a:	e007      	b.n	800db2c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	4a0d      	ldr	r2, [pc, #52]	; (800db54 <SUBGRF_CalibrateImage+0x88>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d903      	bls.n	800db2c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800db24:	236b      	movs	r3, #107	; 0x6b
 800db26:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800db28:	236f      	movs	r3, #111	; 0x6f
 800db2a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800db2c:	f107 030c 	add.w	r3, r7, #12
 800db30:	2202      	movs	r2, #2
 800db32:	4619      	mov	r1, r3
 800db34:	2098      	movs	r0, #152	; 0x98
 800db36:	f000 fc1f 	bl	800e378 <SUBGRF_WriteCommand>
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	35a4e900 	.word	0x35a4e900
 800db48:	32a9f880 	.word	0x32a9f880
 800db4c:	2de54480 	.word	0x2de54480
 800db50:	1b6b0b00 	.word	0x1b6b0b00
 800db54:	1954fc40 	.word	0x1954fc40

0800db58 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4604      	mov	r4, r0
 800db60:	4608      	mov	r0, r1
 800db62:	4611      	mov	r1, r2
 800db64:	461a      	mov	r2, r3
 800db66:	4623      	mov	r3, r4
 800db68:	71fb      	strb	r3, [r7, #7]
 800db6a:	4603      	mov	r3, r0
 800db6c:	71bb      	strb	r3, [r7, #6]
 800db6e:	460b      	mov	r3, r1
 800db70:	717b      	strb	r3, [r7, #5]
 800db72:	4613      	mov	r3, r2
 800db74:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800db7a:	79bb      	ldrb	r3, [r7, #6]
 800db7c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800db7e:	797b      	ldrb	r3, [r7, #5]
 800db80:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800db82:	793b      	ldrb	r3, [r7, #4]
 800db84:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800db86:	f107 030c 	add.w	r3, r7, #12
 800db8a:	2204      	movs	r2, #4
 800db8c:	4619      	mov	r1, r3
 800db8e:	2095      	movs	r0, #149	; 0x95
 800db90:	f000 fbf2 	bl	800e378 <SUBGRF_WriteCommand>
}
 800db94:	bf00      	nop
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd90      	pop	{r4, r7, pc}

0800db9c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	4604      	mov	r4, r0
 800dba4:	4608      	mov	r0, r1
 800dba6:	4611      	mov	r1, r2
 800dba8:	461a      	mov	r2, r3
 800dbaa:	4623      	mov	r3, r4
 800dbac:	80fb      	strh	r3, [r7, #6]
 800dbae:	4603      	mov	r3, r0
 800dbb0:	80bb      	strh	r3, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	807b      	strh	r3, [r7, #2]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800dbba:	88fb      	ldrh	r3, [r7, #6]
 800dbbc:	0a1b      	lsrs	r3, r3, #8
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800dbc4:	88fb      	ldrh	r3, [r7, #6]
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800dbca:	88bb      	ldrh	r3, [r7, #4]
 800dbcc:	0a1b      	lsrs	r3, r3, #8
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800dbd4:	88bb      	ldrh	r3, [r7, #4]
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800dbda:	887b      	ldrh	r3, [r7, #2]
 800dbdc:	0a1b      	lsrs	r3, r3, #8
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800dbe4:	887b      	ldrh	r3, [r7, #2]
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800dbea:	883b      	ldrh	r3, [r7, #0]
 800dbec:	0a1b      	lsrs	r3, r3, #8
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800dbf4:	883b      	ldrh	r3, [r7, #0]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800dbfa:	f107 0308 	add.w	r3, r7, #8
 800dbfe:	2208      	movs	r2, #8
 800dc00:	4619      	mov	r1, r3
 800dc02:	2008      	movs	r0, #8
 800dc04:	f000 fbb8 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dc08:	bf00      	nop
 800dc0a:	3714      	adds	r7, #20
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}

0800dc10 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	6039      	str	r1, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	f003 0307 	and.w	r3, r3, #7
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	0c1b      	lsrs	r3, r3, #16
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	0a1b      	lsrs	r3, r3, #8
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800dc3c:	f107 030c 	add.w	r3, r7, #12
 800dc40:	2204      	movs	r2, #4
 800dc42:	4619      	mov	r1, r3
 800dc44:	2097      	movs	r0, #151	; 0x97
 800dc46:	f000 fb97 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dc4a:	bf00      	nop
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
	...

0800dc54 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800dc54:	b5b0      	push	{r4, r5, r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800dc60:	4b1b      	ldr	r3, [pc, #108]	; (800dcd0 <SUBGRF_SetRfFrequency+0x7c>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	f083 0301 	eor.w	r3, r3, #1
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff ff2c 	bl	800dacc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800dc74:	4b16      	ldr	r3, [pc, #88]	; (800dcd0 <SUBGRF_SetRfFrequency+0x7c>)
 800dc76:	2201      	movs	r2, #1
 800dc78:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	f04f 0300 	mov.w	r3, #0
 800dc82:	09d5      	lsrs	r5, r2, #7
 800dc84:	0654      	lsls	r4, r2, #25
 800dc86:	4a13      	ldr	r2, [pc, #76]	; (800dcd4 <SUBGRF_SetRfFrequency+0x80>)
 800dc88:	f04f 0300 	mov.w	r3, #0
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4629      	mov	r1, r5
 800dc90:	f7f2 fff2 	bl	8000c78 <__aeabi_uldivmod>
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	4613      	mov	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	0e1b      	lsrs	r3, r3, #24
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	0c1b      	lsrs	r3, r3, #16
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	0a1b      	lsrs	r3, r3, #8
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800dcba:	f107 0308 	add.w	r3, r7, #8
 800dcbe:	2204      	movs	r2, #4
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	2086      	movs	r0, #134	; 0x86
 800dcc4:	f000 fb58 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dcc8:	bf00      	nop
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd0:	20001ea8 	.word	0x20001ea8
 800dcd4:	01e84800 	.word	0x01e84800

0800dcd8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800dce2:	79fa      	ldrb	r2, [r7, #7]
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <SUBGRF_SetPacketType+0x34>)
 800dce6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d104      	bne.n	800dcf8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800dcee:	2100      	movs	r1, #0
 800dcf0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800dcf4:	f000 fa90 	bl	800e218 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800dcf8:	1dfb      	adds	r3, r7, #7
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	208a      	movs	r0, #138	; 0x8a
 800dd00:	f000 fb3a 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20001ea1 	.word	0x20001ea1

0800dd10 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800dd10:	b480      	push	{r7}
 800dd12:	af00      	add	r7, sp, #0
    return PacketType;
 800dd14:	4b02      	ldr	r3, [pc, #8]	; (800dd20 <SUBGRF_GetPacketType+0x10>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bc80      	pop	{r7}
 800dd1e:	4770      	bx	lr
 800dd20:	20001ea1 	.word	0x20001ea1

0800dd24 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	71fb      	strb	r3, [r7, #7]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	71bb      	strb	r3, [r7, #6]
 800dd32:	4613      	mov	r3, r2
 800dd34:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d124      	bne.n	800dd86 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800dd3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd40:	2b0f      	cmp	r3, #15
 800dd42:	d106      	bne.n	800dd52 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800dd44:	2301      	movs	r3, #1
 800dd46:	2201      	movs	r2, #1
 800dd48:	2100      	movs	r1, #0
 800dd4a:	2006      	movs	r0, #6
 800dd4c:	f7ff ff04 	bl	800db58 <SUBGRF_SetPaConfig>
 800dd50:	e005      	b.n	800dd5e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800dd52:	2301      	movs	r3, #1
 800dd54:	2201      	movs	r2, #1
 800dd56:	2100      	movs	r1, #0
 800dd58:	2004      	movs	r0, #4
 800dd5a:	f7ff fefd 	bl	800db58 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800dd5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd62:	2b0d      	cmp	r3, #13
 800dd64:	dd02      	ble.n	800dd6c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800dd66:	230e      	movs	r3, #14
 800dd68:	71bb      	strb	r3, [r7, #6]
 800dd6a:	e006      	b.n	800dd7a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800dd6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800dd70:	f113 0f11 	cmn.w	r3, #17
 800dd74:	da01      	bge.n	800dd7a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800dd76:	23ef      	movs	r3, #239	; 0xef
 800dd78:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800dd7a:	2118      	movs	r1, #24
 800dd7c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800dd80:	f000 fa4a 	bl	800e218 <SUBGRF_WriteRegister>
 800dd84:	e025      	b.n	800ddd2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800dd86:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800dd8a:	f000 fa59 	bl	800e240 <SUBGRF_ReadRegister>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	f043 031e 	orr.w	r3, r3, #30
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	4619      	mov	r1, r3
 800dd98:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800dd9c:	f000 fa3c 	bl	800e218 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800dda0:	2301      	movs	r3, #1
 800dda2:	2200      	movs	r2, #0
 800dda4:	2107      	movs	r1, #7
 800dda6:	2004      	movs	r0, #4
 800dda8:	f7ff fed6 	bl	800db58 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800ddac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ddb0:	2b16      	cmp	r3, #22
 800ddb2:	dd02      	ble.n	800ddba <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800ddb4:	2316      	movs	r3, #22
 800ddb6:	71bb      	strb	r3, [r7, #6]
 800ddb8:	e006      	b.n	800ddc8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800ddba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ddbe:	f113 0f09 	cmn.w	r3, #9
 800ddc2:	da01      	bge.n	800ddc8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800ddc4:	23f7      	movs	r3, #247	; 0xf7
 800ddc6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800ddc8:	2138      	movs	r1, #56	; 0x38
 800ddca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ddce:	f000 fa23 	bl	800e218 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ddd2:	79bb      	ldrb	r3, [r7, #6]
 800ddd4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800ddd6:	797b      	ldrb	r3, [r7, #5]
 800ddd8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	2202      	movs	r2, #2
 800dde0:	4619      	mov	r1, r3
 800dde2:	208e      	movs	r0, #142	; 0x8e
 800dde4:	f000 fac8 	bl	800e378 <SUBGRF_WriteCommand>
}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800ddf0:	b5b0      	push	{r4, r5, r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ddfc:	4a5e      	ldr	r2, [pc, #376]	; (800df78 <SUBGRF_SetModulationParams+0x188>)
 800ddfe:	f107 0308 	add.w	r3, r7, #8
 800de02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800de06:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	781a      	ldrb	r2, [r3, #0]
 800de0e:	4b5b      	ldr	r3, [pc, #364]	; (800df7c <SUBGRF_SetModulationParams+0x18c>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d004      	beq.n	800de20 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff ff5c 	bl	800dcd8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b03      	cmp	r3, #3
 800de26:	f200 80a2 	bhi.w	800df6e <SUBGRF_SetModulationParams+0x17e>
 800de2a:	a201      	add	r2, pc, #4	; (adr r2, 800de30 <SUBGRF_SetModulationParams+0x40>)
 800de2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de30:	0800de41 	.word	0x0800de41
 800de34:	0800defd 	.word	0x0800defd
 800de38:	0800debf 	.word	0x0800debf
 800de3c:	0800df2b 	.word	0x0800df2b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800de40:	2308      	movs	r3, #8
 800de42:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	4a4d      	ldr	r2, [pc, #308]	; (800df80 <SUBGRF_SetModulationParams+0x190>)
 800de4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800de4e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	0c1b      	lsrs	r3, r3, #16
 800de54:	b2db      	uxtb	r3, r3
 800de56:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	0a1b      	lsrs	r3, r3, #8
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	b2db      	uxtb	r3, r3
 800de64:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7b1b      	ldrb	r3, [r3, #12]
 800de6a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7b5b      	ldrb	r3, [r3, #13]
 800de70:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	461a      	mov	r2, r3
 800de78:	f04f 0300 	mov.w	r3, #0
 800de7c:	09d5      	lsrs	r5, r2, #7
 800de7e:	0654      	lsls	r4, r2, #25
 800de80:	4a40      	ldr	r2, [pc, #256]	; (800df84 <SUBGRF_SetModulationParams+0x194>)
 800de82:	f04f 0300 	mov.w	r3, #0
 800de86:	4620      	mov	r0, r4
 800de88:	4629      	mov	r1, r5
 800de8a:	f7f2 fef5 	bl	8000c78 <__aeabi_uldivmod>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4613      	mov	r3, r2
 800de94:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	0c1b      	lsrs	r3, r3, #16
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	0a1b      	lsrs	r3, r3, #8
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800deac:	7cfb      	ldrb	r3, [r7, #19]
 800deae:	b29a      	uxth	r2, r3
 800deb0:	f107 0308 	add.w	r3, r7, #8
 800deb4:	4619      	mov	r1, r3
 800deb6:	208b      	movs	r0, #139	; 0x8b
 800deb8:	f000 fa5e 	bl	800e378 <SUBGRF_WriteCommand>
        break;
 800debc:	e058      	b.n	800df70 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800debe:	2304      	movs	r3, #4
 800dec0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	4a2e      	ldr	r2, [pc, #184]	; (800df80 <SUBGRF_SetModulationParams+0x190>)
 800dec8:	fbb2 f3f3 	udiv	r3, r2, r3
 800decc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	0c1b      	lsrs	r3, r3, #16
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	0a1b      	lsrs	r3, r3, #8
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800deea:	7cfb      	ldrb	r3, [r7, #19]
 800deec:	b29a      	uxth	r2, r3
 800deee:	f107 0308 	add.w	r3, r7, #8
 800def2:	4619      	mov	r1, r3
 800def4:	208b      	movs	r0, #139	; 0x8b
 800def6:	f000 fa3f 	bl	800e378 <SUBGRF_WriteCommand>
        break;
 800defa:	e039      	b.n	800df70 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800defc:	2304      	movs	r3, #4
 800defe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	7e1b      	ldrb	r3, [r3, #24]
 800df04:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	7e5b      	ldrb	r3, [r3, #25]
 800df0a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7e9b      	ldrb	r3, [r3, #26]
 800df10:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	7edb      	ldrb	r3, [r3, #27]
 800df16:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df18:	7cfb      	ldrb	r3, [r7, #19]
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	f107 0308 	add.w	r3, r7, #8
 800df20:	4619      	mov	r1, r3
 800df22:	208b      	movs	r0, #139	; 0x8b
 800df24:	f000 fa28 	bl	800e378 <SUBGRF_WriteCommand>

        break;
 800df28:	e022      	b.n	800df70 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800df2a:	2305      	movs	r3, #5
 800df2c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	4a13      	ldr	r2, [pc, #76]	; (800df80 <SUBGRF_SetModulationParams+0x190>)
 800df34:	fbb2 f3f3 	udiv	r3, r2, r3
 800df38:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	0c1b      	lsrs	r3, r3, #16
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	0a1b      	lsrs	r3, r3, #8
 800df46:	b2db      	uxtb	r3, r3
 800df48:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7b1b      	ldrb	r3, [r3, #12]
 800df54:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	7b5b      	ldrb	r3, [r3, #13]
 800df5a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800df5c:	7cfb      	ldrb	r3, [r7, #19]
 800df5e:	b29a      	uxth	r2, r3
 800df60:	f107 0308 	add.w	r3, r7, #8
 800df64:	4619      	mov	r1, r3
 800df66:	208b      	movs	r0, #139	; 0x8b
 800df68:	f000 fa06 	bl	800e378 <SUBGRF_WriteCommand>
        break;
 800df6c:	e000      	b.n	800df70 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800df6e:	bf00      	nop
    }
}
 800df70:	bf00      	nop
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bdb0      	pop	{r4, r5, r7, pc}
 800df78:	0800fcbc 	.word	0x0800fcbc
 800df7c:	20001ea1 	.word	0x20001ea1
 800df80:	3d090000 	.word	0x3d090000
 800df84:	01e84800 	.word	0x01e84800

0800df88 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b086      	sub	sp, #24
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800df94:	4a48      	ldr	r2, [pc, #288]	; (800e0b8 <SUBGRF_SetPacketParams+0x130>)
 800df96:	f107 030c 	add.w	r3, r7, #12
 800df9a:	ca07      	ldmia	r2, {r0, r1, r2}
 800df9c:	c303      	stmia	r3!, {r0, r1}
 800df9e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	781a      	ldrb	r2, [r3, #0]
 800dfa4:	4b45      	ldr	r3, [pc, #276]	; (800e0bc <SUBGRF_SetPacketParams+0x134>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d004      	beq.n	800dfb6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7ff fe91 	bl	800dcd8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d878      	bhi.n	800e0b0 <SUBGRF_SetPacketParams+0x128>
 800dfbe:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <SUBGRF_SetPacketParams+0x3c>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800dfd5 	.word	0x0800dfd5
 800dfc8:	0800e065 	.word	0x0800e065
 800dfcc:	0800e059 	.word	0x0800e059
 800dfd0:	0800dfd5 	.word	0x0800dfd5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7a5b      	ldrb	r3, [r3, #9]
 800dfd8:	2bf1      	cmp	r3, #241	; 0xf1
 800dfda:	d10a      	bne.n	800dff2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800dfdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dfe0:	f7ff fb20 	bl	800d624 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800dfe4:	f248 0005 	movw	r0, #32773	; 0x8005
 800dfe8:	f7ff fb3c 	bl	800d664 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800dfec:	2302      	movs	r3, #2
 800dfee:	75bb      	strb	r3, [r7, #22]
 800dff0:	e011      	b.n	800e016 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	7a5b      	ldrb	r3, [r3, #9]
 800dff6:	2bf2      	cmp	r3, #242	; 0xf2
 800dff8:	d10a      	bne.n	800e010 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800dffa:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800dffe:	f7ff fb11 	bl	800d624 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800e002:	f241 0021 	movw	r0, #4129	; 0x1021
 800e006:	f7ff fb2d 	bl	800d664 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800e00a:	2306      	movs	r3, #6
 800e00c:	75bb      	strb	r3, [r7, #22]
 800e00e:	e002      	b.n	800e016 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7a5b      	ldrb	r3, [r3, #9]
 800e014:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800e016:	2309      	movs	r3, #9
 800e018:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	885b      	ldrh	r3, [r3, #2]
 800e01e:	0a1b      	lsrs	r3, r3, #8
 800e020:	b29b      	uxth	r3, r3
 800e022:	b2db      	uxtb	r3, r3
 800e024:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	885b      	ldrh	r3, [r3, #2]
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	791b      	ldrb	r3, [r3, #4]
 800e032:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	795b      	ldrb	r3, [r3, #5]
 800e038:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	799b      	ldrb	r3, [r3, #6]
 800e03e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	79db      	ldrb	r3, [r3, #7]
 800e044:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	7a1b      	ldrb	r3, [r3, #8]
 800e04a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800e04c:	7dbb      	ldrb	r3, [r7, #22]
 800e04e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7a9b      	ldrb	r3, [r3, #10]
 800e054:	753b      	strb	r3, [r7, #20]
        break;
 800e056:	e022      	b.n	800e09e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800e058:	2301      	movs	r3, #1
 800e05a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7b1b      	ldrb	r3, [r3, #12]
 800e060:	733b      	strb	r3, [r7, #12]
        break;
 800e062:	e01c      	b.n	800e09e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800e064:	2306      	movs	r3, #6
 800e066:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	89db      	ldrh	r3, [r3, #14]
 800e06c:	0a1b      	lsrs	r3, r3, #8
 800e06e:	b29b      	uxth	r3, r3
 800e070:	b2db      	uxtb	r3, r3
 800e072:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	89db      	ldrh	r3, [r3, #14]
 800e078:	b2db      	uxtb	r3, r3
 800e07a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7c1a      	ldrb	r2, [r3, #16]
 800e080:	4b0f      	ldr	r3, [pc, #60]	; (800e0c0 <SUBGRF_SetPacketParams+0x138>)
 800e082:	4611      	mov	r1, r2
 800e084:	7019      	strb	r1, [r3, #0]
 800e086:	4613      	mov	r3, r2
 800e088:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	7c5b      	ldrb	r3, [r3, #17]
 800e08e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	7c9b      	ldrb	r3, [r3, #18]
 800e094:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7cdb      	ldrb	r3, [r3, #19]
 800e09a:	747b      	strb	r3, [r7, #17]
        break;
 800e09c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	f107 030c 	add.w	r3, r7, #12
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	208c      	movs	r0, #140	; 0x8c
 800e0aa:	f000 f965 	bl	800e378 <SUBGRF_WriteCommand>
 800e0ae:	e000      	b.n	800e0b2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800e0b0:	bf00      	nop
}
 800e0b2:	3718      	adds	r7, #24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	0800fcc4 	.word	0x0800fcc4
 800e0bc:	20001ea1 	.word	0x20001ea1
 800e0c0:	20001ea2 	.word	0x20001ea2

0800e0c4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	460a      	mov	r2, r1
 800e0ce:	71fb      	strb	r3, [r7, #7]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800e0d4:	79fb      	ldrb	r3, [r7, #7]
 800e0d6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800e0d8:	79bb      	ldrb	r3, [r7, #6]
 800e0da:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800e0dc:	f107 030c 	add.w	r3, r7, #12
 800e0e0:	2202      	movs	r2, #2
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	208f      	movs	r0, #143	; 0x8f
 800e0e6:	f000 f947 	bl	800e378 <SUBGRF_WriteCommand>
}
 800e0ea:	bf00      	nop
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800e0fc:	1d3b      	adds	r3, r7, #4
 800e0fe:	2201      	movs	r2, #1
 800e100:	4619      	mov	r1, r3
 800e102:	2015      	movs	r0, #21
 800e104:	f000 f95a 	bl	800e3bc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800e108:	793b      	ldrb	r3, [r7, #4]
 800e10a:	425b      	negs	r3, r3
 800e10c:	105b      	asrs	r3, r3, #1
 800e10e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800e110:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800e126:	f107 030c 	add.w	r3, r7, #12
 800e12a:	2202      	movs	r2, #2
 800e12c:	4619      	mov	r1, r3
 800e12e:	2013      	movs	r0, #19
 800e130:	f000 f944 	bl	800e3bc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800e134:	f7ff fdec 	bl	800dd10 <SUBGRF_GetPacketType>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d10d      	bne.n	800e15a <SUBGRF_GetRxBufferStatus+0x3e>
 800e13e:	4b0c      	ldr	r3, [pc, #48]	; (800e170 <SUBGRF_GetRxBufferStatus+0x54>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b01      	cmp	r3, #1
 800e146:	d108      	bne.n	800e15a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800e148:	f240 7002 	movw	r0, #1794	; 0x702
 800e14c:	f000 f878 	bl	800e240 <SUBGRF_ReadRegister>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	701a      	strb	r2, [r3, #0]
 800e158:	e002      	b.n	800e160 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800e15a:	7b3a      	ldrb	r2, [r7, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800e160:	7b7a      	ldrb	r2, [r7, #13]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	701a      	strb	r2, [r3, #0]
}
 800e166:	bf00      	nop
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	20001ea2 	.word	0x20001ea2

0800e174 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800e17c:	f107 030c 	add.w	r3, r7, #12
 800e180:	2203      	movs	r2, #3
 800e182:	4619      	mov	r1, r3
 800e184:	2014      	movs	r0, #20
 800e186:	f000 f919 	bl	800e3bc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800e18a:	f7ff fdc1 	bl	800dd10 <SUBGRF_GetPacketType>
 800e18e:	4603      	mov	r3, r0
 800e190:	461a      	mov	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d002      	beq.n	800e1a4 <SUBGRF_GetPacketStatus+0x30>
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d013      	beq.n	800e1ca <SUBGRF_GetPacketStatus+0x56>
 800e1a2:	e02a      	b.n	800e1fa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800e1a4:	7b3a      	ldrb	r2, [r7, #12]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800e1aa:	7b7b      	ldrb	r3, [r7, #13]
 800e1ac:	425b      	negs	r3, r3
 800e1ae:	105b      	asrs	r3, r3, #1
 800e1b0:	b25a      	sxtb	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800e1b6:	7bbb      	ldrb	r3, [r7, #14]
 800e1b8:	425b      	negs	r3, r3
 800e1ba:	105b      	asrs	r3, r3, #1
 800e1bc:	b25a      	sxtb	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	609a      	str	r2, [r3, #8]
            break;
 800e1c8:	e020      	b.n	800e20c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800e1ca:	7b3b      	ldrb	r3, [r7, #12]
 800e1cc:	425b      	negs	r3, r3
 800e1ce:	105b      	asrs	r3, r3, #1
 800e1d0:	b25a      	sxtb	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800e1d6:	7b7b      	ldrb	r3, [r7, #13]
 800e1d8:	b25b      	sxtb	r3, r3
 800e1da:	3302      	adds	r3, #2
 800e1dc:	109b      	asrs	r3, r3, #2
 800e1de:	b25a      	sxtb	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800e1e4:	7bbb      	ldrb	r3, [r7, #14]
 800e1e6:	425b      	negs	r3, r3
 800e1e8:	105b      	asrs	r3, r3, #1
 800e1ea:	b25a      	sxtb	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800e1f0:	4b08      	ldr	r3, [pc, #32]	; (800e214 <SUBGRF_GetPacketStatus+0xa0>)
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	611a      	str	r2, [r3, #16]
            break;
 800e1f8:	e008      	b.n	800e20c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800e1fa:	2214      	movs	r2, #20
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fda1 	bl	800ed46 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	220f      	movs	r2, #15
 800e208:	701a      	strb	r2, [r3, #0]
            break;
 800e20a:	bf00      	nop
    }
}
 800e20c:	bf00      	nop
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	20001ea4 	.word	0x20001ea4

0800e218 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	460a      	mov	r2, r1
 800e222:	80fb      	strh	r3, [r7, #6]
 800e224:	4613      	mov	r3, r2
 800e226:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800e228:	1d7a      	adds	r2, r7, #5
 800e22a:	88f9      	ldrh	r1, [r7, #6]
 800e22c:	2301      	movs	r3, #1
 800e22e:	4803      	ldr	r0, [pc, #12]	; (800e23c <SUBGRF_WriteRegister+0x24>)
 800e230:	f7f7 fcae 	bl	8005b90 <HAL_SUBGHZ_WriteRegisters>
}
 800e234:	bf00      	nop
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	20001ff0 	.word	0x20001ff0

0800e240 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	4603      	mov	r3, r0
 800e248:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800e24a:	f107 020f 	add.w	r2, r7, #15
 800e24e:	88f9      	ldrh	r1, [r7, #6]
 800e250:	2301      	movs	r3, #1
 800e252:	4804      	ldr	r0, [pc, #16]	; (800e264 <SUBGRF_ReadRegister+0x24>)
 800e254:	f7f7 fcfb 	bl	8005c4e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	20001ff0 	.word	0x20001ff0

0800e268 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	6039      	str	r1, [r7, #0]
 800e272:	80fb      	strh	r3, [r7, #6]
 800e274:	4613      	mov	r3, r2
 800e276:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e278:	f3ef 8310 	mrs	r3, PRIMASK
 800e27c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e27e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e282:	b672      	cpsid	i
}
 800e284:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800e286:	88bb      	ldrh	r3, [r7, #4]
 800e288:	88f9      	ldrh	r1, [r7, #6]
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	4806      	ldr	r0, [pc, #24]	; (800e2a8 <SUBGRF_WriteRegisters+0x40>)
 800e28e:	f7f7 fc7f 	bl	8005b90 <HAL_SUBGHZ_WriteRegisters>
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	f383 8810 	msr	PRIMASK, r3
}
 800e29c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e29e:	bf00      	nop
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	20001ff0 	.word	0x20001ff0

0800e2ac <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	6039      	str	r1, [r7, #0]
 800e2b6:	80fb      	strh	r3, [r7, #6]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e2c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e2c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e2c6:	b672      	cpsid	i
}
 800e2c8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800e2ca:	88bb      	ldrh	r3, [r7, #4]
 800e2cc:	88f9      	ldrh	r1, [r7, #6]
 800e2ce:	683a      	ldr	r2, [r7, #0]
 800e2d0:	4806      	ldr	r0, [pc, #24]	; (800e2ec <SUBGRF_ReadRegisters+0x40>)
 800e2d2:	f7f7 fcbc 	bl	8005c4e <HAL_SUBGHZ_ReadRegisters>
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f383 8810 	msr	PRIMASK, r3
}
 800e2e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e2e2:	bf00      	nop
 800e2e4:	3718      	adds	r7, #24
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20001ff0 	.word	0x20001ff0

0800e2f0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	71fb      	strb	r3, [r7, #7]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e300:	f3ef 8310 	mrs	r3, PRIMASK
 800e304:	60fb      	str	r3, [r7, #12]
  return(result);
 800e306:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e30a:	b672      	cpsid	i
}
 800e30c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800e30e:	79bb      	ldrb	r3, [r7, #6]
 800e310:	b29b      	uxth	r3, r3
 800e312:	79f9      	ldrb	r1, [r7, #7]
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	4806      	ldr	r0, [pc, #24]	; (800e330 <SUBGRF_WriteBuffer+0x40>)
 800e318:	f7f7 fdad 	bl	8005e76 <HAL_SUBGHZ_WriteBuffer>
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f383 8810 	msr	PRIMASK, r3
}
 800e326:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e328:	bf00      	nop
 800e32a:	3718      	adds	r7, #24
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20001ff0 	.word	0x20001ff0

0800e334 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	6039      	str	r1, [r7, #0]
 800e33e:	71fb      	strb	r3, [r7, #7]
 800e340:	4613      	mov	r3, r2
 800e342:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e344:	f3ef 8310 	mrs	r3, PRIMASK
 800e348:	60fb      	str	r3, [r7, #12]
  return(result);
 800e34a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e34c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e34e:	b672      	cpsid	i
}
 800e350:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800e352:	79bb      	ldrb	r3, [r7, #6]
 800e354:	b29b      	uxth	r3, r3
 800e356:	79f9      	ldrb	r1, [r7, #7]
 800e358:	683a      	ldr	r2, [r7, #0]
 800e35a:	4806      	ldr	r0, [pc, #24]	; (800e374 <SUBGRF_ReadBuffer+0x40>)
 800e35c:	f7f7 fdde 	bl	8005f1c <HAL_SUBGHZ_ReadBuffer>
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	f383 8810 	msr	PRIMASK, r3
}
 800e36a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e36c:	bf00      	nop
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20001ff0 	.word	0x20001ff0

0800e378 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	4603      	mov	r3, r0
 800e380:	6039      	str	r1, [r7, #0]
 800e382:	71fb      	strb	r3, [r7, #7]
 800e384:	4613      	mov	r3, r2
 800e386:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e388:	f3ef 8310 	mrs	r3, PRIMASK
 800e38c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e38e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e390:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e392:	b672      	cpsid	i
}
 800e394:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800e396:	88bb      	ldrh	r3, [r7, #4]
 800e398:	79f9      	ldrb	r1, [r7, #7]
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <SUBGRF_WriteCommand+0x40>)
 800e39e:	f7f7 fcb7 	bl	8005d10 <HAL_SUBGHZ_ExecSetCmd>
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	f383 8810 	msr	PRIMASK, r3
}
 800e3ac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e3ae:	bf00      	nop
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20001ff0 	.word	0x20001ff0

0800e3bc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	6039      	str	r1, [r7, #0]
 800e3c6:	71fb      	strb	r3, [r7, #7]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e3d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800e3d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e3d6:	b672      	cpsid	i
}
 800e3d8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800e3da:	88bb      	ldrh	r3, [r7, #4]
 800e3dc:	79f9      	ldrb	r1, [r7, #7]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	4806      	ldr	r0, [pc, #24]	; (800e3fc <SUBGRF_ReadCommand+0x40>)
 800e3e2:	f7f7 fcf4 	bl	8005dce <HAL_SUBGHZ_ExecGetCmd>
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	f383 8810 	msr	PRIMASK, r3
}
 800e3f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800e3f2:	bf00      	nop
 800e3f4:	3718      	adds	r7, #24
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	20001ff0 	.word	0x20001ff0

0800e400 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	460a      	mov	r2, r1
 800e40a:	71fb      	strb	r3, [r7, #7]
 800e40c:	4613      	mov	r3, r2
 800e40e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800e410:	2301      	movs	r3, #1
 800e412:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800e414:	79bb      	ldrb	r3, [r7, #6]
 800e416:	2b01      	cmp	r3, #1
 800e418:	d10d      	bne.n	800e436 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d104      	bne.n	800e42a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800e420:	2302      	movs	r3, #2
 800e422:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800e424:	2004      	movs	r0, #4
 800e426:	f000 f8df 	bl	800e5e8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d107      	bne.n	800e440 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800e430:	2303      	movs	r3, #3
 800e432:	73fb      	strb	r3, [r7, #15]
 800e434:	e004      	b.n	800e440 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800e436:	79bb      	ldrb	r3, [r7, #6]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d101      	bne.n	800e440 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800e43c:	2301      	movs	r3, #1
 800e43e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4618      	mov	r0, r3
 800e444:	f000 fc51 	bl	800ecea <RBI_ConfigRFSwitch>
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	4603      	mov	r3, r0
 800e458:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800e45a:	2301      	movs	r3, #1
 800e45c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800e45e:	f000 fc51 	bl	800ed04 <RBI_GetTxConfig>
 800e462:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	2b02      	cmp	r3, #2
 800e468:	d016      	beq.n	800e498 <SUBGRF_SetRfTxPower+0x48>
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	dc16      	bgt.n	800e49e <SUBGRF_SetRfTxPower+0x4e>
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <SUBGRF_SetRfTxPower+0x2e>
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d00a      	beq.n	800e492 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800e47c:	e00f      	b.n	800e49e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800e47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e482:	2b0f      	cmp	r3, #15
 800e484:	dd02      	ble.n	800e48c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800e486:	2302      	movs	r3, #2
 800e488:	73fb      	strb	r3, [r7, #15]
            break;
 800e48a:	e009      	b.n	800e4a0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800e48c:	2301      	movs	r3, #1
 800e48e:	73fb      	strb	r3, [r7, #15]
            break;
 800e490:	e006      	b.n	800e4a0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800e492:	2301      	movs	r3, #1
 800e494:	73fb      	strb	r3, [r7, #15]
            break;
 800e496:	e003      	b.n	800e4a0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800e498:	2302      	movs	r3, #2
 800e49a:	73fb      	strb	r3, [r7, #15]
            break;
 800e49c:	e000      	b.n	800e4a0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800e49e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800e4a0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7ff fc3b 	bl	800dd24 <SUBGRF_SetTxParams>

    return paSelect;
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800e4bc:	2301      	movs	r3, #1
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bc80      	pop	{r7}
 800e4c4:	4770      	bx	lr
	...

0800e4c8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800e4d0:	4b03      	ldr	r3, [pc, #12]	; (800e4e0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2001      	movs	r0, #1
 800e4d6:	4798      	blx	r3
}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	20001eac 	.word	0x20001eac

0800e4e4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800e4ec:	4b03      	ldr	r3, [pc, #12]	; (800e4fc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2002      	movs	r0, #2
 800e4f2:	4798      	blx	r3
}
 800e4f4:	bf00      	nop
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	20001eac 	.word	0x20001eac

0800e500 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800e508:	4b03      	ldr	r3, [pc, #12]	; (800e518 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2040      	movs	r0, #64	; 0x40
 800e50e:	4798      	blx	r3
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	20001eac 	.word	0x20001eac

0800e51c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800e528:	78fb      	ldrb	r3, [r7, #3]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d002      	beq.n	800e534 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d005      	beq.n	800e53e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800e532:	e00a      	b.n	800e54a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800e534:	4b07      	ldr	r3, [pc, #28]	; (800e554 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2080      	movs	r0, #128	; 0x80
 800e53a:	4798      	blx	r3
            break;
 800e53c:	e005      	b.n	800e54a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800e53e:	4b05      	ldr	r3, [pc, #20]	; (800e554 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e546:	4798      	blx	r3
            break;
 800e548:	bf00      	nop
    }
}
 800e54a:	bf00      	nop
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20001eac 	.word	0x20001eac

0800e558 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800e560:	4b04      	ldr	r3, [pc, #16]	; (800e574 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e568:	4798      	blx	r3
}
 800e56a:	bf00      	nop
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20001eac 	.word	0x20001eac

0800e578 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b082      	sub	sp, #8
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800e580:	4b03      	ldr	r3, [pc, #12]	; (800e590 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2020      	movs	r0, #32
 800e586:	4798      	blx	r3
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20001eac 	.word	0x20001eac

0800e594 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800e59c:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2004      	movs	r0, #4
 800e5a2:	4798      	blx	r3
}
 800e5a4:	bf00      	nop
 800e5a6:	3708      	adds	r7, #8
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}
 800e5ac:	20001eac 	.word	0x20001eac

0800e5b0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800e5b8:	4b03      	ldr	r3, [pc, #12]	; (800e5c8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2008      	movs	r0, #8
 800e5be:	4798      	blx	r3
}
 800e5c0:	bf00      	nop
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20001eac 	.word	0x20001eac

0800e5cc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800e5d4:	4b03      	ldr	r3, [pc, #12]	; (800e5e4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2010      	movs	r0, #16
 800e5da:	4798      	blx	r3
}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	20001eac 	.word	0x20001eac

0800e5e8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800e5f2:	f000 fb9d 	bl	800ed30 <RBI_IsDCDC>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d112      	bne.n	800e622 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800e5fc:	f640 1023 	movw	r0, #2339	; 0x923
 800e600:	f7ff fe1e 	bl	800e240 <SUBGRF_ReadRegister>
 800e604:	4603      	mov	r3, r0
 800e606:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800e608:	7bfb      	ldrb	r3, [r7, #15]
 800e60a:	f023 0306 	bic.w	r3, r3, #6
 800e60e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800e610:	7bfa      	ldrb	r2, [r7, #15]
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	4313      	orrs	r3, r2
 800e616:	b2db      	uxtb	r3, r3
 800e618:	4619      	mov	r1, r3
 800e61a:	f640 1023 	movw	r0, #2339	; 0x923
 800e61e:	f7ff fdfb 	bl	800e218 <SUBGRF_WriteRegister>
  }
}
 800e622:	bf00      	nop
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800e63a:	231f      	movs	r3, #31
 800e63c:	e016      	b.n	800e66c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800e63e:	2300      	movs	r3, #0
 800e640:	73fb      	strb	r3, [r7, #15]
 800e642:	e00f      	b.n	800e664 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800e644:	7bfb      	ldrb	r3, [r7, #15]
 800e646:	4a0c      	ldr	r2, [pc, #48]	; (800e678 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800e648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e64c:	687a      	ldr	r2, [r7, #4]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d205      	bcs.n	800e65e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800e652:	7bfb      	ldrb	r3, [r7, #15]
 800e654:	4a08      	ldr	r2, [pc, #32]	; (800e678 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	4413      	add	r3, r2
 800e65a:	791b      	ldrb	r3, [r3, #4]
 800e65c:	e006      	b.n	800e66c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800e65e:	7bfb      	ldrb	r3, [r7, #15]
 800e660:	3301      	adds	r3, #1
 800e662:	73fb      	strb	r3, [r7, #15]
 800e664:	7bfb      	ldrb	r3, [r7, #15]
 800e666:	2b15      	cmp	r3, #21
 800e668:	d9ec      	bls.n	800e644 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800e66a:	e7fe      	b.n	800e66a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	bc80      	pop	{r7}
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	0800fec4 	.word	0x0800fec4

0800e67c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b08a      	sub	sp, #40	; 0x28
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800e686:	4b36      	ldr	r3, [pc, #216]	; (800e760 <SUBGRF_GetCFO+0xe4>)
 800e688:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800e68a:	f640 0007 	movw	r0, #2055	; 0x807
 800e68e:	f7ff fdd7 	bl	800e240 <SUBGRF_ReadRegister>
 800e692:	4603      	mov	r3, r0
 800e694:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800e696:	7ffb      	ldrb	r3, [r7, #31]
 800e698:	08db      	lsrs	r3, r3, #3
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	f003 0303 	and.w	r3, r3, #3
 800e6a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e6a4:	4413      	add	r3, r2
 800e6a6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800e6aa:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800e6ac:	7ffb      	ldrb	r3, [r7, #31]
 800e6ae:	f003 0307 	and.w	r3, r3, #7
 800e6b2:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800e6b4:	7fba      	ldrb	r2, [r7, #30]
 800e6b6:	7f7b      	ldrb	r3, [r7, #29]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e6be:	461a      	mov	r2, r3
 800e6c0:	4b28      	ldr	r3, [pc, #160]	; (800e764 <SUBGRF_GetCFO+0xe8>)
 800e6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6c6:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800e6c8:	69ba      	ldr	r2, [r7, #24]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6d0:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800e6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6dc:	697a      	ldr	r2, [r7, #20]
 800e6de:	fb02 f303 	mul.w	r3, r2, r3
 800e6e2:	2b07      	cmp	r3, #7
 800e6e4:	d802      	bhi.n	800e6ec <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800e6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f0:	697a      	ldr	r2, [r7, #20]
 800e6f2:	fb02 f303 	mul.w	r3, r2, r3
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d802      	bhi.n	800e700 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800e700:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	fb02 f303 	mul.w	r3, r2, r3
 800e70a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800e70c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800e710:	f7ff fd96 	bl	800e240 <SUBGRF_ReadRegister>
 800e714:	4603      	mov	r3, r0
 800e716:	021b      	lsls	r3, r3, #8
 800e718:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e71c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800e71e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800e722:	f7ff fd8d 	bl	800e240 <SUBGRF_ReadRegister>
 800e726:	4603      	mov	r3, r0
 800e728:	461a      	mov	r2, r3
 800e72a:	6a3b      	ldr	r3, [r7, #32]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800e730:	6a3b      	ldr	r3, [r7, #32]
 800e732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800e740:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800e744:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	095b      	lsrs	r3, r3, #5
 800e74a:	6a3a      	ldr	r2, [r7, #32]
 800e74c:	fb02 f303 	mul.w	r3, r2, r3
 800e750:	11da      	asrs	r2, r3, #7
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	601a      	str	r2, [r3, #0]
}
 800e756:	bf00      	nop
 800e758:	3728      	adds	r7, #40	; 0x28
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0c0a0804 	.word	0x0c0a0804
 800e764:	01e84800 	.word	0x01e84800

0800e768 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800e768:	b480      	push	{r7}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
 800e774:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800e77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e77e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800e780:	697b      	ldr	r3, [r7, #20]
}
 800e782:	4618      	mov	r0, r3
 800e784:	371c      	adds	r7, #28
 800e786:	46bd      	mov	sp, r7
 800e788:	bc80      	pop	{r7}
 800e78a:	4770      	bx	lr

0800e78c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800e79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7a2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800e7a4:	697b      	ldr	r3, [r7, #20]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr

0800e7b0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800e7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bc80      	pop	{r7}
 800e7c8:	4770      	bx	lr

0800e7ca <RFW_DeInit>:

void RFW_DeInit( void)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800e7ce:	bf00      	nop
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bc80      	pop	{r7}
 800e7d4:	4770      	bx	lr

0800e7d6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800e7da:	2300      	movs	r3, #0
#endif
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bc80      	pop	{r7}
 800e7e2:	4770      	bx	lr

0800e7e4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800e7e8:	2300      	movs	r3, #0
#endif
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bc80      	pop	{r7}
 800e7f0:	4770      	bx	lr

0800e7f2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	bc80      	pop	{r7}
 800e804:	4770      	bx	lr

0800e806 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800e806:	b480      	push	{r7}
 800e808:	b087      	sub	sp, #28
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	60f8      	str	r0, [r7, #12]
 800e80e:	460b      	mov	r3, r1
 800e810:	607a      	str	r2, [r7, #4]
 800e812:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800e814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e818:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800e81a:	697b      	ldr	r3, [r7, #20]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	371c      	adds	r7, #28
 800e820:	46bd      	mov	sp, r7
 800e822:	bc80      	pop	{r7}
 800e824:	4770      	bx	lr

0800e826 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800e826:	b480      	push	{r7}
 800e828:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800e82a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800e82e:	4618      	mov	r0, r3
 800e830:	46bd      	mov	sp, r7
 800e832:	bc80      	pop	{r7}
 800e834:	4770      	bx	lr

0800e836 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800e836:	b480      	push	{r7}
 800e838:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800e83a:	bf00      	nop
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bc80      	pop	{r7}
 800e840:	4770      	bx	lr

0800e842 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800e842:	b480      	push	{r7}
 800e844:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800e846:	bf00      	nop
 800e848:	46bd      	mov	sp, r7
 800e84a:	bc80      	pop	{r7}
 800e84c:	4770      	bx	lr

0800e84e <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800e84e:	b480      	push	{r7}
 800e850:	b083      	sub	sp, #12
 800e852:	af00      	add	r7, sp, #0
 800e854:	4603      	mov	r3, r0
 800e856:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bc80      	pop	{r7}
 800e860:	4770      	bx	lr
	...

0800e864 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800e868:	f7f3 fd58 	bl	800231c <SystemApp_Init>
  SubghzApp_Init();
 800e86c:	f000 f8b6 	bl	800e9dc <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

	PacketSendCallbackRegister(packetSendCallback);
 800e870:	4803      	ldr	r0, [pc, #12]	; (800e880 <MX_SubGHz_Phy_Init+0x1c>)
 800e872:	f000 f923 	bl	800eabc <PacketSendCallbackRegister>
	PacketRecviceCallbackRegister(packetRecviceCallback);
 800e876:	4803      	ldr	r0, [pc, #12]	; (800e884 <MX_SubGHz_Phy_Init+0x20>)
 800e878:	f000 f92e 	bl	800ead8 <PacketRecviceCallbackRegister>

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800e87c:	bf00      	nop
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	0800e889 	.word	0x0800e889
 800e884:	0800e8b5 	.word	0x0800e8b5

0800e888 <packetSendCallback>:

/* USER CODE BEGIN EF */

static void packetSendCallback(uint8_t state) {
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4603      	mov	r3, r0
 800e890:	71fb      	strb	r3, [r7, #7]

	radio_tx_state = state;
 800e892:	4a06      	ldr	r2, [pc, #24]	; (800e8ac <packetSendCallback+0x24>)
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	7013      	strb	r3, [r2, #0]

	osSemaphoreRelease(radioBinarySemHandle);
 800e898:	4b05      	ldr	r3, [pc, #20]	; (800e8b0 <packetSendCallback+0x28>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7f9 fcc1 	bl	8008224 <osSemaphoreRelease>

}
 800e8a2:	bf00      	nop
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20001eb0 	.word	0x20001eb0
 800e8b0:	20002394 	.word	0x20002394

0800e8b4 <packetRecviceCallback>:

static void packetRecviceCallback(uint8_t state, int16_t rssi, int8_t snr,
		uint8_t *payload, uint8_t payload_size) {
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	603b      	str	r3, [r7, #0]
 800e8bc:	4603      	mov	r3, r0
 800e8be:	71fb      	strb	r3, [r7, #7]
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	80bb      	strh	r3, [r7, #4]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	71bb      	strb	r3, [r7, #6]

	radio_rx_state = state;
 800e8c8:	4a0d      	ldr	r2, [pc, #52]	; (800e900 <packetRecviceCallback+0x4c>)
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	7013      	strb	r3, [r2, #0]

	rx_rssi = rssi;
 800e8ce:	4a0d      	ldr	r2, [pc, #52]	; (800e904 <packetRecviceCallback+0x50>)
 800e8d0:	88bb      	ldrh	r3, [r7, #4]
 800e8d2:	8013      	strh	r3, [r2, #0]
	rx_snr = snr;
 800e8d4:	4a0c      	ldr	r2, [pc, #48]	; (800e908 <packetRecviceCallback+0x54>)
 800e8d6:	79bb      	ldrb	r3, [r7, #6]
 800e8d8:	7013      	strb	r3, [r2, #0]
	rx_payload_size = payload_size;
 800e8da:	4a0c      	ldr	r2, [pc, #48]	; (800e90c <packetRecviceCallback+0x58>)
 800e8dc:	7c3b      	ldrb	r3, [r7, #16]
 800e8de:	7013      	strb	r3, [r2, #0]
	memcpy(rx_payload_buffer, payload, rx_payload_size);
 800e8e0:	4b0a      	ldr	r3, [pc, #40]	; (800e90c <packetRecviceCallback+0x58>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	4809      	ldr	r0, [pc, #36]	; (800e910 <packetRecviceCallback+0x5c>)
 800e8ea:	f000 fc73 	bl	800f1d4 <memcpy>

	osSemaphoreRelease(radioBinarySemHandle);
 800e8ee:	4b09      	ldr	r3, [pc, #36]	; (800e914 <packetRecviceCallback+0x60>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7f9 fc96 	bl	8008224 <osSemaphoreRelease>

}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	20001eb1 	.word	0x20001eb1
 800e904:	20001eb2 	.word	0x20001eb2
 800e908:	20001eb4 	.word	0x20001eb4
 800e90c:	20001eb5 	.word	0x20001eb5
 800e910:	20001eb8 	.word	0x20001eb8
 800e914:	20002394 	.word	0x20002394

0800e918 <MX_SubGhz_Phy_Radio_Sleep>:

void MX_SubGhz_Phy_Radio_Sleep() {
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0

	SubghzApp_Sleep();
 800e91c:	f000 f8ea 	bl	800eaf4 <SubghzApp_Sleep>

}
 800e920:	bf00      	nop
 800e922:	bd80      	pop	{r7, pc}

0800e924 <MX_SubGhz_Phy_SendPacket>:

void MX_SubGhz_Phy_SendPacket(uint8_t *payload, uint8_t payload_size) {
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	70fb      	strb	r3, [r7, #3]

	radio_tx_state = 0x00;
 800e930:	4b05      	ldr	r3, [pc, #20]	; (800e948 <MX_SubGhz_Phy_SendPacket+0x24>)
 800e932:	2200      	movs	r2, #0
 800e934:	701a      	strb	r2, [r3, #0]
	SubghzApp_TX(payload, payload_size);
 800e936:	78fb      	ldrb	r3, [r7, #3]
 800e938:	4619      	mov	r1, r3
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f8e4 	bl	800eb08 <SubghzApp_TX>

}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	20001eb0 	.word	0x20001eb0

0800e94c <MX_SubGhz_Phy_Get_SendPacket_State>:

uint8_t MX_SubGhz_Phy_Get_SendPacket_State() {
 800e94c:	b480      	push	{r7}
 800e94e:	af00      	add	r7, sp, #0

	return radio_tx_state;
 800e950:	4b02      	ldr	r3, [pc, #8]	; (800e95c <MX_SubGhz_Phy_Get_SendPacket_State+0x10>)
 800e952:	781b      	ldrb	r3, [r3, #0]

}
 800e954:	4618      	mov	r0, r3
 800e956:	46bd      	mov	sp, r7
 800e958:	bc80      	pop	{r7}
 800e95a:	4770      	bx	lr
 800e95c:	20001eb0 	.word	0x20001eb0

0800e960 <MX_SubGhz_Phy_RecvicePacket>:

void MX_SubGhz_Phy_RecvicePacket() {
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0

	radio_rx_state = 0x00;
 800e964:	4b03      	ldr	r3, [pc, #12]	; (800e974 <MX_SubGhz_Phy_RecvicePacket+0x14>)
 800e966:	2200      	movs	r2, #0
 800e968:	701a      	strb	r2, [r3, #0]
	SubghzApp_RX(0);
 800e96a:	2000      	movs	r0, #0
 800e96c:	f000 f8de 	bl	800eb2c <SubghzApp_RX>

}
 800e970:	bf00      	nop
 800e972:	bd80      	pop	{r7, pc}
 800e974:	20001eb1 	.word	0x20001eb1

0800e978 <MX_SubGhz_Phy_Get_RecvicePacket_State>:

uint8_t MX_SubGhz_Phy_Get_RecvicePacket_State() {
 800e978:	b480      	push	{r7}
 800e97a:	af00      	add	r7, sp, #0

	return radio_rx_state;
 800e97c:	4b02      	ldr	r3, [pc, #8]	; (800e988 <MX_SubGhz_Phy_Get_RecvicePacket_State+0x10>)
 800e97e:	781b      	ldrb	r3, [r3, #0]

}
 800e980:	4618      	mov	r0, r3
 800e982:	46bd      	mov	sp, r7
 800e984:	bc80      	pop	{r7}
 800e986:	4770      	bx	lr
 800e988:	20001eb1 	.word	0x20001eb1

0800e98c <MX_SubGhz_Phy_Get_RecvicePacket>:

void MX_SubGhz_Phy_Get_RecvicePacket(int16_t *rssi, int8_t *snr,
		uint8_t *payload, uint8_t *payload_size) {
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
 800e998:	603b      	str	r3, [r7, #0]

	*rssi = rx_rssi;
 800e99a:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <MX_SubGhz_Phy_Get_RecvicePacket+0x40>)
 800e99c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	801a      	strh	r2, [r3, #0]
	*snr = rx_snr;
 800e9a4:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <MX_SubGhz_Phy_Get_RecvicePacket+0x44>)
 800e9a6:	f993 2000 	ldrsb.w	r2, [r3]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	701a      	strb	r2, [r3, #0]
	*payload_size = rx_payload_size;
 800e9ae:	4b09      	ldr	r3, [pc, #36]	; (800e9d4 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800e9b0:	781a      	ldrb	r2, [r3, #0]
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	701a      	strb	r2, [r3, #0]
	memcpy(payload, rx_payload_buffer, rx_payload_size);
 800e9b6:	4b07      	ldr	r3, [pc, #28]	; (800e9d4 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4906      	ldr	r1, [pc, #24]	; (800e9d8 <MX_SubGhz_Phy_Get_RecvicePacket+0x4c>)
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fc08 	bl	800f1d4 <memcpy>

}
 800e9c4:	bf00      	nop
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	20001eb2 	.word	0x20001eb2
 800e9d0:	20001eb4 	.word	0x20001eb4
 800e9d4:	20001eb5 	.word	0x20001eb5
 800e9d8:	20001eb8 	.word	0x20001eb8

0800e9dc <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b08b      	sub	sp, #44	; 0x2c
 800e9e0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800e9e2:	4b2e      	ldr	r3, [pc, #184]	; (800ea9c <SubghzApp_Init+0xc0>)
 800e9e4:	4a2e      	ldr	r2, [pc, #184]	; (800eaa0 <SubghzApp_Init+0xc4>)
 800e9e6:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800e9e8:	4b2c      	ldr	r3, [pc, #176]	; (800ea9c <SubghzApp_Init+0xc0>)
 800e9ea:	4a2e      	ldr	r2, [pc, #184]	; (800eaa4 <SubghzApp_Init+0xc8>)
 800e9ec:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800e9ee:	4b2b      	ldr	r3, [pc, #172]	; (800ea9c <SubghzApp_Init+0xc0>)
 800e9f0:	4a2d      	ldr	r2, [pc, #180]	; (800eaa8 <SubghzApp_Init+0xcc>)
 800e9f2:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800e9f4:	4b29      	ldr	r3, [pc, #164]	; (800ea9c <SubghzApp_Init+0xc0>)
 800e9f6:	4a2d      	ldr	r2, [pc, #180]	; (800eaac <SubghzApp_Init+0xd0>)
 800e9f8:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800e9fa:	4b28      	ldr	r3, [pc, #160]	; (800ea9c <SubghzApp_Init+0xc0>)
 800e9fc:	4a2c      	ldr	r2, [pc, #176]	; (800eab0 <SubghzApp_Init+0xd4>)
 800e9fe:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800ea00:	4b2c      	ldr	r3, [pc, #176]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4825      	ldr	r0, [pc, #148]	; (800ea9c <SubghzApp_Init+0xc0>)
 800ea06:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

	Radio.SetChannel(RF_FREQUENCY);
 800ea08:	4b2a      	ldr	r3, [pc, #168]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	482a      	ldr	r0, [pc, #168]	; (800eab8 <SubghzApp_Init+0xdc>)
 800ea0e:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800ea10:	4b28      	ldr	r3, [pc, #160]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea12:	69dc      	ldr	r4, [r3, #28]
 800ea14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ea18:	9308      	str	r3, [sp, #32]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	9307      	str	r3, [sp, #28]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	9306      	str	r3, [sp, #24]
 800ea22:	2300      	movs	r3, #0
 800ea24:	9305      	str	r3, [sp, #20]
 800ea26:	2301      	movs	r3, #1
 800ea28:	9304      	str	r3, [sp, #16]
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	9303      	str	r3, [sp, #12]
 800ea2e:	2308      	movs	r3, #8
 800ea30:	9302      	str	r3, [sp, #8]
 800ea32:	2301      	movs	r3, #1
 800ea34:	9301      	str	r3, [sp, #4]
 800ea36:	230a      	movs	r3, #10
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	210e      	movs	r1, #14
 800ea40:	2001      	movs	r0, #1
 800ea42:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE, LORA_PREAMBLE_LENGTH,
	LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800ea44:	4b1b      	ldr	r3, [pc, #108]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea46:	699c      	ldr	r4, [r3, #24]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9308      	str	r3, [sp, #32]
 800ea50:	2300      	movs	r3, #0
 800ea52:	9307      	str	r3, [sp, #28]
 800ea54:	2300      	movs	r3, #0
 800ea56:	9306      	str	r3, [sp, #24]
 800ea58:	2301      	movs	r3, #1
 800ea5a:	9305      	str	r3, [sp, #20]
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	2300      	movs	r3, #0
 800ea62:	9303      	str	r3, [sp, #12]
 800ea64:	2305      	movs	r3, #5
 800ea66:	9302      	str	r3, [sp, #8]
 800ea68:	2308      	movs	r3, #8
 800ea6a:	9301      	str	r3, [sp, #4]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	2301      	movs	r3, #1
 800ea72:	220a      	movs	r2, #10
 800ea74:	2100      	movs	r1, #0
 800ea76:	2001      	movs	r0, #1
 800ea78:	47a0      	blx	r4
	LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH, LORA_SYMBOL_TIMEOUT,
	LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0, LORA_IQ_INVERSION_ON,
	true);

	Radio.SetPublicNetwork(false);
 800ea7a:	4b0e      	ldr	r3, [pc, #56]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea7e:	2000      	movs	r0, #0
 800ea80:	4798      	blx	r3

	Radio.SetMaxPayloadLength(MODEM_LORA, TX_BUFFER_SIZE);
 800ea82:	4b0c      	ldr	r3, [pc, #48]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea86:	2180      	movs	r1, #128	; 0x80
 800ea88:	2001      	movs	r0, #1
 800ea8a:	4798      	blx	r3

	Radio.Sleep();
 800ea8c:	4b09      	ldr	r3, [pc, #36]	; (800eab4 <SubghzApp_Init+0xd8>)
 800ea8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea90:	4798      	blx	r3

  /* USER CODE END SubghzApp_Init_2 */
}
 800ea92:	bf00      	nop
 800ea94:	3704      	adds	r7, #4
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd90      	pop	{r4, r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20001f38 	.word	0x20001f38
 800eaa0:	0800eb79 	.word	0x0800eb79
 800eaa4:	0800eb95 	.word	0x0800eb95
 800eaa8:	0800ec29 	.word	0x0800ec29
 800eaac:	0800ec45 	.word	0x0800ec45
 800eab0:	0800ec8d 	.word	0x0800ec8d
 800eab4:	0800fe3c 	.word	0x0800fe3c
 800eab8:	3703dcc0 	.word	0x3703dcc0

0800eabc <PacketSendCallbackRegister>:

/* USER CODE BEGIN EF */

void PacketSendCallbackRegister(PacketSendCallback callback) {
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]

	packetSendCallback = callback;
 800eac4:	4a03      	ldr	r2, [pc, #12]	; (800ead4 <PacketSendCallbackRegister+0x18>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6013      	str	r3, [r2, #0]

}
 800eaca:	bf00      	nop
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	bc80      	pop	{r7}
 800ead2:	4770      	bx	lr
 800ead4:	20001f54 	.word	0x20001f54

0800ead8 <PacketRecviceCallbackRegister>:

void PacketRecviceCallbackRegister(PacketRecviceCallback callback) {
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]

	packetRecviceCallback = callback;
 800eae0:	4a03      	ldr	r2, [pc, #12]	; (800eaf0 <PacketRecviceCallbackRegister+0x18>)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6013      	str	r3, [r2, #0]

}
 800eae6:	bf00      	nop
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bc80      	pop	{r7}
 800eaee:	4770      	bx	lr
 800eaf0:	20001f58 	.word	0x20001f58

0800eaf4 <SubghzApp_Sleep>:

void SubghzApp_Sleep() {
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0

	Radio.Sleep();
 800eaf8:	4b02      	ldr	r3, [pc, #8]	; (800eb04 <SubghzApp_Sleep+0x10>)
 800eafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafc:	4798      	blx	r3

}
 800eafe:	bf00      	nop
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	0800fe3c 	.word	0x0800fe3c

0800eb08 <SubghzApp_TX>:

void SubghzApp_TX(uint8_t *payload, uint8_t payload_size) {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	70fb      	strb	r3, [r7, #3]

	Radio.Send(payload, payload_size);
 800eb14:	4b04      	ldr	r3, [pc, #16]	; (800eb28 <SubghzApp_TX+0x20>)
 800eb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb18:	78fa      	ldrb	r2, [r7, #3]
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	4798      	blx	r3

}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	0800fe3c 	.word	0x0800fe3c

0800eb2c <SubghzApp_RX>:

void SubghzApp_RX(uint16_t timeout) {
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	80fb      	strh	r3, [r7, #6]

	rx_rssi = 0;
 800eb36:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <SubghzApp_RX+0x38>)
 800eb38:	2200      	movs	r2, #0
 800eb3a:	801a      	strh	r2, [r3, #0]
	rx_snr = 0;
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	; (800eb68 <SubghzApp_RX+0x3c>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	701a      	strb	r2, [r3, #0]
	radio_rx_buffer_size = 0;
 800eb42:	4b0a      	ldr	r3, [pc, #40]	; (800eb6c <SubghzApp_RX+0x40>)
 800eb44:	2200      	movs	r2, #0
 800eb46:	701a      	strb	r2, [r3, #0]
	memset(radio_rx_buffer, 0x00, sizeof(radio_rx_buffer));
 800eb48:	2280      	movs	r2, #128	; 0x80
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	4808      	ldr	r0, [pc, #32]	; (800eb70 <SubghzApp_RX+0x44>)
 800eb4e:	f000 fb4f 	bl	800f1f0 <memset>

	Radio.Rx(timeout);
 800eb52:	4b08      	ldr	r3, [pc, #32]	; (800eb74 <SubghzApp_RX+0x48>)
 800eb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb56:	88fa      	ldrh	r2, [r7, #6]
 800eb58:	4610      	mov	r0, r2
 800eb5a:	4798      	blx	r3

}
 800eb5c:	bf00      	nop
 800eb5e:	3708      	adds	r7, #8
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20001f5c 	.word	0x20001f5c
 800eb68:	20001f5e 	.word	0x20001f5e
 800eb6c:	20001f5f 	.word	0x20001f5f
 800eb70:	20001f60 	.word	0x20001f60
 800eb74:	0800fe3c 	.word	0x0800fe3c

0800eb78 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

	if (packetSendCallback) {
 800eb7c:	4b04      	ldr	r3, [pc, #16]	; (800eb90 <OnTxDone+0x18>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <OnTxDone+0x14>

		packetSendCallback(0x01);
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <OnTxDone+0x18>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2001      	movs	r0, #1
 800eb8a:	4798      	blx	r3

	}

  /* USER CODE END OnTxDone */
}
 800eb8c:	bf00      	nop
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20001f54 	.word	0x20001f54

0800eb94 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800eb94:	b590      	push	{r4, r7, lr}
 800eb96:	b089      	sub	sp, #36	; 0x24
 800eb98:	af02      	add	r7, sp, #8
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	4608      	mov	r0, r1
 800eb9e:	4611      	mov	r1, r2
 800eba0:	461a      	mov	r2, r3
 800eba2:	4603      	mov	r3, r0
 800eba4:	817b      	strh	r3, [r7, #10]
 800eba6:	460b      	mov	r3, r1
 800eba8:	813b      	strh	r3, [r7, #8]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */

	uint8_t rx_state = 0x00;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	75fb      	strb	r3, [r7, #23]

	rx_rssi = rssi;
 800ebb2:	4a18      	ldr	r2, [pc, #96]	; (800ec14 <OnRxDone+0x80>)
 800ebb4:	893b      	ldrh	r3, [r7, #8]
 800ebb6:	8013      	strh	r3, [r2, #0]

	rx_snr = LoraSnr_FskCfo;
 800ebb8:	4a17      	ldr	r2, [pc, #92]	; (800ec18 <OnRxDone+0x84>)
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	7013      	strb	r3, [r2, #0]

	radio_rx_buffer_size = size;
 800ebbe:	897b      	ldrh	r3, [r7, #10]
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	4b16      	ldr	r3, [pc, #88]	; (800ec1c <OnRxDone+0x88>)
 800ebc4:	701a      	strb	r2, [r3, #0]

	if (radio_rx_buffer_size <= sizeof(radio_rx_buffer)) {
 800ebc6:	4b15      	ldr	r3, [pc, #84]	; (800ec1c <OnRxDone+0x88>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b80      	cmp	r3, #128	; 0x80
 800ebcc:	d809      	bhi.n	800ebe2 <OnRxDone+0x4e>

		memcpy(radio_rx_buffer, payload, radio_rx_buffer_size);
 800ebce:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <OnRxDone+0x88>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	68f9      	ldr	r1, [r7, #12]
 800ebd6:	4812      	ldr	r0, [pc, #72]	; (800ec20 <OnRxDone+0x8c>)
 800ebd8:	f000 fafc 	bl	800f1d4 <memcpy>
		rx_state = 0x01;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	75fb      	strb	r3, [r7, #23]
 800ebe0:	e001      	b.n	800ebe6 <OnRxDone+0x52>

	} else {

		rx_state = 0x04;
 800ebe2:	2304      	movs	r3, #4
 800ebe4:	75fb      	strb	r3, [r7, #23]

	}

	if (packetRecviceCallback) {
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	; (800ec24 <OnRxDone+0x90>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00d      	beq.n	800ec0a <OnRxDone+0x76>

		packetRecviceCallback(rx_state, rx_rssi, rx_snr, radio_rx_buffer,
 800ebee:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <OnRxDone+0x90>)
 800ebf0:	681c      	ldr	r4, [r3, #0]
 800ebf2:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <OnRxDone+0x80>)
 800ebf4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ebf8:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <OnRxDone+0x84>)
 800ebfa:	f993 2000 	ldrsb.w	r2, [r3]
 800ebfe:	4b07      	ldr	r3, [pc, #28]	; (800ec1c <OnRxDone+0x88>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	7df8      	ldrb	r0, [r7, #23]
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	4b06      	ldr	r3, [pc, #24]	; (800ec20 <OnRxDone+0x8c>)
 800ec08:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxDone */
}
 800ec0a:	bf00      	nop
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd90      	pop	{r4, r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20001f5c 	.word	0x20001f5c
 800ec18:	20001f5e 	.word	0x20001f5e
 800ec1c:	20001f5f 	.word	0x20001f5f
 800ec20:	20001f60 	.word	0x20001f60
 800ec24:	20001f58 	.word	0x20001f58

0800ec28 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */

	if (packetSendCallback) {
 800ec2c:	4b04      	ldr	r3, [pc, #16]	; (800ec40 <OnTxTimeout+0x18>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d003      	beq.n	800ec3c <OnTxTimeout+0x14>

		packetSendCallback(0x02);
 800ec34:	4b02      	ldr	r3, [pc, #8]	; (800ec40 <OnTxTimeout+0x18>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2002      	movs	r0, #2
 800ec3a:	4798      	blx	r3

	}

  /* USER CODE END OnTxTimeout */
}
 800ec3c:	bf00      	nop
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20001f54 	.word	0x20001f54

0800ec44 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800ec44:	b590      	push	{r4, r7, lr}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN OnRxTimeout */

	if (packetRecviceCallback) {
 800ec4a:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <OnRxTimeout+0x34>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00d      	beq.n	800ec6e <OnRxTimeout+0x2a>

		packetRecviceCallback(0x02, rx_rssi, rx_snr, radio_rx_buffer,
 800ec52:	4b09      	ldr	r3, [pc, #36]	; (800ec78 <OnRxTimeout+0x34>)
 800ec54:	681c      	ldr	r4, [r3, #0]
 800ec56:	4b09      	ldr	r3, [pc, #36]	; (800ec7c <OnRxTimeout+0x38>)
 800ec58:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ec5c:	4b08      	ldr	r3, [pc, #32]	; (800ec80 <OnRxTimeout+0x3c>)
 800ec5e:	f993 2000 	ldrsb.w	r2, [r3]
 800ec62:	4b08      	ldr	r3, [pc, #32]	; (800ec84 <OnRxTimeout+0x40>)
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	4b07      	ldr	r3, [pc, #28]	; (800ec88 <OnRxTimeout+0x44>)
 800ec6a:	2002      	movs	r0, #2
 800ec6c:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxTimeout */
}
 800ec6e:	bf00      	nop
 800ec70:	3704      	adds	r7, #4
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd90      	pop	{r4, r7, pc}
 800ec76:	bf00      	nop
 800ec78:	20001f58 	.word	0x20001f58
 800ec7c:	20001f5c 	.word	0x20001f5c
 800ec80:	20001f5e 	.word	0x20001f5e
 800ec84:	20001f5f 	.word	0x20001f5f
 800ec88:	20001f60 	.word	0x20001f60

0800ec8c <OnRxError>:

static void OnRxError(void)
{
 800ec8c:	b590      	push	{r4, r7, lr}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN OnRxError */

	if (packetRecviceCallback) {
 800ec92:	4b0b      	ldr	r3, [pc, #44]	; (800ecc0 <OnRxError+0x34>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00d      	beq.n	800ecb6 <OnRxError+0x2a>

		packetRecviceCallback(0x03, rx_rssi, rx_snr, radio_rx_buffer,
 800ec9a:	4b09      	ldr	r3, [pc, #36]	; (800ecc0 <OnRxError+0x34>)
 800ec9c:	681c      	ldr	r4, [r3, #0]
 800ec9e:	4b09      	ldr	r3, [pc, #36]	; (800ecc4 <OnRxError+0x38>)
 800eca0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800eca4:	4b08      	ldr	r3, [pc, #32]	; (800ecc8 <OnRxError+0x3c>)
 800eca6:	f993 2000 	ldrsb.w	r2, [r3]
 800ecaa:	4b08      	ldr	r3, [pc, #32]	; (800eccc <OnRxError+0x40>)
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <OnRxError+0x44>)
 800ecb2:	2003      	movs	r0, #3
 800ecb4:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxError */
}
 800ecb6:	bf00      	nop
 800ecb8:	3704      	adds	r7, #4
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd90      	pop	{r4, r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20001f58 	.word	0x20001f58
 800ecc4:	20001f5c 	.word	0x20001f5c
 800ecc8:	20001f5e 	.word	0x20001f5e
 800eccc:	20001f5f 	.word	0x20001f5f
 800ecd0:	20001f60 	.word	0x20001f60

0800ecd4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800ecde:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bc80      	pop	{r7}
 800ece8:	4770      	bx	lr

0800ecea <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bc80      	pop	{r7}
 800ed02:	4770      	bx	lr

0800ed04 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800ed0e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bc80      	pop	{r7}
 800ed18:	4770      	bx	lr

0800ed1a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800ed20:	2300      	movs	r3, #0
 800ed22:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800ed24:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	370c      	adds	r7, #12
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bc80      	pop	{r7}
 800ed2e:	4770      	bx	lr

0800ed30 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800ed36:	2301      	movs	r3, #1
 800ed38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800ed3a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bc80      	pop	{r7}
 800ed44:	4770      	bx	lr

0800ed46 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800ed46:	b480      	push	{r7}
 800ed48:	b085      	sub	sp, #20
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	6078      	str	r0, [r7, #4]
 800ed4e:	460b      	mov	r3, r1
 800ed50:	70fb      	strb	r3, [r7, #3]
 800ed52:	4613      	mov	r3, r2
 800ed54:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800ed5a:	e004      	b.n	800ed66 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	60fa      	str	r2, [r7, #12]
 800ed62:	78fa      	ldrb	r2, [r7, #3]
 800ed64:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800ed66:	883b      	ldrh	r3, [r7, #0]
 800ed68:	1e5a      	subs	r2, r3, #1
 800ed6a:	803a      	strh	r2, [r7, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1f5      	bne.n	800ed5c <UTIL_MEM_set_8+0x16>
  }
}
 800ed70:	bf00      	nop
 800ed72:	bf00      	nop
 800ed74:	3714      	adds	r7, #20
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bc80      	pop	{r7}
 800ed7a:	4770      	bx	lr

0800ed7c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	603b      	str	r3, [r7, #0]
 800ed88:	4613      	mov	r3, r2
 800ed8a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d023      	beq.n	800edda <UTIL_TIMER_Create+0x5e>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d020      	beq.n	800edda <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ed9e:	4b11      	ldr	r3, [pc, #68]	; (800ede4 <UTIL_TIMER_Create+0x68>)
 800eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda2:	68b8      	ldr	r0, [r7, #8]
 800eda4:	4798      	blx	r3
 800eda6:	4602      	mov	r2, r0
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2200      	movs	r2, #0
 800edb6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	69ba      	ldr	r2, [r7, #24]
 800edc8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	79fa      	ldrb	r2, [r7, #7]
 800edce:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	e000      	b.n	800eddc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800edda:	2301      	movs	r3, #1
  }
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3710      	adds	r7, #16
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	0800fde8 	.word	0x0800fde8

0800ede8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08a      	sub	sp, #40	; 0x28
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d056      	beq.n	800eeaa <UTIL_TIMER_Start+0xc2>
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f929 	bl	800f054 <TimerExists>
 800ee02:	4603      	mov	r3, r0
 800ee04:	f083 0301 	eor.w	r3, r3, #1
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d04d      	beq.n	800eeaa <UTIL_TIMER_Start+0xc2>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	7a5b      	ldrb	r3, [r3, #9]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d149      	bne.n	800eeaa <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee16:	f3ef 8310 	mrs	r3, PRIMASK
 800ee1a:	613b      	str	r3, [r7, #16]
  return(result);
 800ee1c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800ee1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee20:	b672      	cpsid	i
}
 800ee22:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ee2a:	4b24      	ldr	r3, [pc, #144]	; (800eebc <UTIL_TIMER_Start+0xd4>)
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	4798      	blx	r3
 800ee30:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800ee32:	6a3a      	ldr	r2, [r7, #32]
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d201      	bcs.n	800ee3e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a3a      	ldr	r2, [r7, #32]
 800ee42:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800ee56:	4b1a      	ldr	r3, [pc, #104]	; (800eec0 <UTIL_TIMER_Start+0xd8>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d106      	bne.n	800ee6c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800ee5e:	4b17      	ldr	r3, [pc, #92]	; (800eebc <UTIL_TIMER_Start+0xd4>)
 800ee60:	691b      	ldr	r3, [r3, #16]
 800ee62:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f96b 	bl	800f140 <TimerInsertNewHeadTimer>
 800ee6a:	e017      	b.n	800ee9c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800ee6c:	4b13      	ldr	r3, [pc, #76]	; (800eebc <UTIL_TIMER_Start+0xd4>)
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	4798      	blx	r3
 800ee72:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	441a      	add	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	4b0e      	ldr	r3, [pc, #56]	; (800eec0 <UTIL_TIMER_Start+0xd8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d203      	bcs.n	800ee96 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	f000 f956 	bl	800f140 <TimerInsertNewHeadTimer>
 800ee94:	e002      	b.n	800ee9c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f922 	bl	800f0e0 <TimerInsertTimer>
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f383 8810 	msr	PRIMASK, r3
}
 800eea6:	bf00      	nop
  {
 800eea8:	e002      	b.n	800eeb0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800eeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3728      	adds	r7, #40	; 0x28
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	0800fde8 	.word	0x0800fde8
 800eec0:	20001fe0 	.word	0x20001fe0

0800eec4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800eecc:	2300      	movs	r3, #0
 800eece:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d05b      	beq.n	800ef8e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eed6:	f3ef 8310 	mrs	r3, PRIMASK
 800eeda:	60fb      	str	r3, [r7, #12]
  return(result);
 800eedc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800eede:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800eee0:	b672      	cpsid	i
}
 800eee2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800eee4:	4b2d      	ldr	r3, [pc, #180]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800eeea:	4b2c      	ldr	r3, [pc, #176]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2201      	movs	r2, #1
 800eef4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800eef6:	4b29      	ldr	r3, [pc, #164]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d041      	beq.n	800ef82 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800ef04:	4b25      	ldr	r3, [pc, #148]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d134      	bne.n	800ef78 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800ef0e:	4b23      	ldr	r3, [pc, #140]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2200      	movs	r2, #0
 800ef14:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800ef16:	4b21      	ldr	r3, [pc, #132]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	695b      	ldr	r3, [r3, #20]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00a      	beq.n	800ef36 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800ef20:	4b1e      	ldr	r3, [pc, #120]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	4a1d      	ldr	r2, [pc, #116]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef28:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800ef2a:	4b1c      	ldr	r3, [pc, #112]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f000 f8ac 	bl	800f08c <TimerSetTimeout>
 800ef34:	e023      	b.n	800ef7e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800ef36:	4b1a      	ldr	r3, [pc, #104]	; (800efa0 <UTIL_TIMER_Stop+0xdc>)
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	4798      	blx	r3
            TimerListHead = NULL;
 800ef3c:	4b17      	ldr	r3, [pc, #92]	; (800ef9c <UTIL_TIMER_Stop+0xd8>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	601a      	str	r2, [r3, #0]
 800ef42:	e01c      	b.n	800ef7e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d110      	bne.n	800ef6e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	695b      	ldr	r3, [r3, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d006      	beq.n	800ef62 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	695b      	ldr	r3, [r3, #20]
 800ef58:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ef60:	e00d      	b.n	800ef7e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	615a      	str	r2, [r3, #20]
            break;
 800ef6c:	e007      	b.n	800ef7e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	695b      	ldr	r3, [r3, #20]
 800ef76:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e2      	bne.n	800ef44 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	77fb      	strb	r3, [r7, #31]
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	f383 8810 	msr	PRIMASK, r3
}
 800ef8c:	e001      	b.n	800ef92 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800ef92:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3720      	adds	r7, #32
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	20001fe0 	.word	0x20001fe0
 800efa0:	0800fde8 	.word	0x0800fde8

0800efa4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d102      	bne.n	800efbe <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800efb8:	2301      	movs	r3, #1
 800efba:	73fb      	strb	r3, [r7, #15]
 800efbc:	e014      	b.n	800efe8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800efbe:	4b0d      	ldr	r3, [pc, #52]	; (800eff4 <UTIL_TIMER_SetPeriod+0x50>)
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	6838      	ldr	r0, [r7, #0]
 800efc4:	4798      	blx	r3
 800efc6:	4602      	mov	r2, r0
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f000 f841 	bl	800f054 <TimerExists>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d007      	beq.n	800efe8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f7ff ff73 	bl	800eec4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7ff ff02 	bl	800ede8 <UTIL_TIMER_Start>
 800efe4:	4603      	mov	r3, r0
 800efe6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800efe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	0800fde8 	.word	0x0800fde8

0800eff8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800effe:	4b06      	ldr	r3, [pc, #24]	; (800f018 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f000:	69db      	ldr	r3, [r3, #28]
 800f002:	4798      	blx	r3
 800f004:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800f006:	4b04      	ldr	r3, [pc, #16]	; (800f018 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	4798      	blx	r3
 800f00e:	4603      	mov	r3, r0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	0800fde8 	.word	0x0800fde8

0800f01c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f024:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <UTIL_TIMER_GetElapsedTime+0x34>)
 800f026:	69db      	ldr	r3, [r3, #28]
 800f028:	4798      	blx	r3
 800f02a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f02c:	4b08      	ldr	r3, [pc, #32]	; (800f050 <UTIL_TIMER_GetElapsedTime+0x34>)
 800f02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	4798      	blx	r3
 800f034:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800f036:	4b06      	ldr	r3, [pc, #24]	; (800f050 <UTIL_TIMER_GetElapsedTime+0x34>)
 800f038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03a:	68f9      	ldr	r1, [r7, #12]
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	1a8a      	subs	r2, r1, r2
 800f040:	4610      	mov	r0, r2
 800f042:	4798      	blx	r3
 800f044:	4603      	mov	r3, r0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	0800fde8 	.word	0x0800fde8

0800f054 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f05c:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <TimerExists+0x34>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800f062:	e008      	b.n	800f076 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d101      	bne.n	800f070 <TimerExists+0x1c>
    {
      return true;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e006      	b.n	800f07e <TimerExists+0x2a>
    }
    cur = cur->Next;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	695b      	ldr	r3, [r3, #20]
 800f074:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1f3      	bne.n	800f064 <TimerExists+0x10>
  }
  return false;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	bc80      	pop	{r7}
 800f086:	4770      	bx	lr
 800f088:	20001fe0 	.word	0x20001fe0

0800f08c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800f08c:	b590      	push	{r4, r7, lr}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f094:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <TimerSetTimeout+0x50>)
 800f096:	6a1b      	ldr	r3, [r3, #32]
 800f098:	4798      	blx	r3
 800f09a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681c      	ldr	r4, [r3, #0]
 800f0a6:	4b0d      	ldr	r3, [pc, #52]	; (800f0dc <TimerSetTimeout+0x50>)
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	4798      	blx	r3
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	429c      	cmp	r4, r3
 800f0b4:	d207      	bcs.n	800f0c6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800f0b6:	4b09      	ldr	r3, [pc, #36]	; (800f0dc <TimerSetTimeout+0x50>)
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	4798      	blx	r3
 800f0bc:	4602      	mov	r2, r0
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	441a      	add	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800f0c6:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <TimerSetTimeout+0x50>)
 800f0c8:	689b      	ldr	r3, [r3, #8]
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	6812      	ldr	r2, [r2, #0]
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	4798      	blx	r3
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd90      	pop	{r4, r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	0800fde8 	.word	0x0800fde8

0800f0e0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f0e8:	4b14      	ldr	r3, [pc, #80]	; (800f13c <TimerInsertTimer+0x5c>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <TimerInsertTimer+0x5c>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	695b      	ldr	r3, [r3, #20]
 800f0f4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800f0f6:	e012      	b.n	800f11e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	d905      	bls.n	800f110 <TimerInsertTimer+0x30>
    {
        cur = next;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	695b      	ldr	r3, [r3, #20]
 800f10c:	60bb      	str	r3, [r7, #8]
 800f10e:	e006      	b.n	800f11e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	615a      	str	r2, [r3, #20]
        return;
 800f11c:	e009      	b.n	800f132 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e8      	bne.n	800f0f8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	615a      	str	r2, [r3, #20]
}
 800f132:	3714      	adds	r7, #20
 800f134:	46bd      	mov	sp, r7
 800f136:	bc80      	pop	{r7}
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	20001fe0 	.word	0x20001fe0

0800f140 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f148:	4b0b      	ldr	r3, [pc, #44]	; (800f178 <TimerInsertNewHeadTimer+0x38>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d002      	beq.n	800f15a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800f160:	4a05      	ldr	r2, [pc, #20]	; (800f178 <TimerInsertNewHeadTimer+0x38>)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800f166:	4b04      	ldr	r3, [pc, #16]	; (800f178 <TimerInsertNewHeadTimer+0x38>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff ff8e 	bl	800f08c <TimerSetTimeout>
}
 800f170:	bf00      	nop
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	20001fe0 	.word	0x20001fe0

0800f17c <__errno>:
 800f17c:	4b01      	ldr	r3, [pc, #4]	; (800f184 <__errno+0x8>)
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop
 800f184:	20000018 	.word	0x20000018

0800f188 <__libc_init_array>:
 800f188:	b570      	push	{r4, r5, r6, lr}
 800f18a:	4d0d      	ldr	r5, [pc, #52]	; (800f1c0 <__libc_init_array+0x38>)
 800f18c:	4c0d      	ldr	r4, [pc, #52]	; (800f1c4 <__libc_init_array+0x3c>)
 800f18e:	1b64      	subs	r4, r4, r5
 800f190:	10a4      	asrs	r4, r4, #2
 800f192:	2600      	movs	r6, #0
 800f194:	42a6      	cmp	r6, r4
 800f196:	d109      	bne.n	800f1ac <__libc_init_array+0x24>
 800f198:	4d0b      	ldr	r5, [pc, #44]	; (800f1c8 <__libc_init_array+0x40>)
 800f19a:	4c0c      	ldr	r4, [pc, #48]	; (800f1cc <__libc_init_array+0x44>)
 800f19c:	f000 fcb6 	bl	800fb0c <_init>
 800f1a0:	1b64      	subs	r4, r4, r5
 800f1a2:	10a4      	asrs	r4, r4, #2
 800f1a4:	2600      	movs	r6, #0
 800f1a6:	42a6      	cmp	r6, r4
 800f1a8:	d105      	bne.n	800f1b6 <__libc_init_array+0x2e>
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}
 800f1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1b0:	4798      	blx	r3
 800f1b2:	3601      	adds	r6, #1
 800f1b4:	e7ee      	b.n	800f194 <__libc_init_array+0xc>
 800f1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ba:	4798      	blx	r3
 800f1bc:	3601      	adds	r6, #1
 800f1be:	e7f2      	b.n	800f1a6 <__libc_init_array+0x1e>
 800f1c0:	08010010 	.word	0x08010010
 800f1c4:	08010010 	.word	0x08010010
 800f1c8:	08010010 	.word	0x08010010
 800f1cc:	08010014 	.word	0x08010014

0800f1d0 <__retarget_lock_acquire_recursive>:
 800f1d0:	4770      	bx	lr

0800f1d2 <__retarget_lock_release_recursive>:
 800f1d2:	4770      	bx	lr

0800f1d4 <memcpy>:
 800f1d4:	440a      	add	r2, r1
 800f1d6:	4291      	cmp	r1, r2
 800f1d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f1dc:	d100      	bne.n	800f1e0 <memcpy+0xc>
 800f1de:	4770      	bx	lr
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1ea:	4291      	cmp	r1, r2
 800f1ec:	d1f9      	bne.n	800f1e2 <memcpy+0xe>
 800f1ee:	bd10      	pop	{r4, pc}

0800f1f0 <memset>:
 800f1f0:	4402      	add	r2, r0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d100      	bne.n	800f1fa <memset+0xa>
 800f1f8:	4770      	bx	lr
 800f1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f1fe:	e7f9      	b.n	800f1f4 <memset+0x4>

0800f200 <_malloc_r>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	1ccd      	adds	r5, r1, #3
 800f204:	f025 0503 	bic.w	r5, r5, #3
 800f208:	3508      	adds	r5, #8
 800f20a:	2d0c      	cmp	r5, #12
 800f20c:	bf38      	it	cc
 800f20e:	250c      	movcc	r5, #12
 800f210:	2d00      	cmp	r5, #0
 800f212:	4606      	mov	r6, r0
 800f214:	db01      	blt.n	800f21a <_malloc_r+0x1a>
 800f216:	42a9      	cmp	r1, r5
 800f218:	d903      	bls.n	800f222 <_malloc_r+0x22>
 800f21a:	230c      	movs	r3, #12
 800f21c:	6033      	str	r3, [r6, #0]
 800f21e:	2000      	movs	r0, #0
 800f220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f222:	f000 f8e1 	bl	800f3e8 <__malloc_lock>
 800f226:	4921      	ldr	r1, [pc, #132]	; (800f2ac <_malloc_r+0xac>)
 800f228:	680a      	ldr	r2, [r1, #0]
 800f22a:	4614      	mov	r4, r2
 800f22c:	b99c      	cbnz	r4, 800f256 <_malloc_r+0x56>
 800f22e:	4f20      	ldr	r7, [pc, #128]	; (800f2b0 <_malloc_r+0xb0>)
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	b923      	cbnz	r3, 800f23e <_malloc_r+0x3e>
 800f234:	4621      	mov	r1, r4
 800f236:	4630      	mov	r0, r6
 800f238:	f000 f8a6 	bl	800f388 <_sbrk_r>
 800f23c:	6038      	str	r0, [r7, #0]
 800f23e:	4629      	mov	r1, r5
 800f240:	4630      	mov	r0, r6
 800f242:	f000 f8a1 	bl	800f388 <_sbrk_r>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	d123      	bne.n	800f292 <_malloc_r+0x92>
 800f24a:	230c      	movs	r3, #12
 800f24c:	6033      	str	r3, [r6, #0]
 800f24e:	4630      	mov	r0, r6
 800f250:	f000 f8d0 	bl	800f3f4 <__malloc_unlock>
 800f254:	e7e3      	b.n	800f21e <_malloc_r+0x1e>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	1b5b      	subs	r3, r3, r5
 800f25a:	d417      	bmi.n	800f28c <_malloc_r+0x8c>
 800f25c:	2b0b      	cmp	r3, #11
 800f25e:	d903      	bls.n	800f268 <_malloc_r+0x68>
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	441c      	add	r4, r3
 800f264:	6025      	str	r5, [r4, #0]
 800f266:	e004      	b.n	800f272 <_malloc_r+0x72>
 800f268:	6863      	ldr	r3, [r4, #4]
 800f26a:	42a2      	cmp	r2, r4
 800f26c:	bf0c      	ite	eq
 800f26e:	600b      	streq	r3, [r1, #0]
 800f270:	6053      	strne	r3, [r2, #4]
 800f272:	4630      	mov	r0, r6
 800f274:	f000 f8be 	bl	800f3f4 <__malloc_unlock>
 800f278:	f104 000b 	add.w	r0, r4, #11
 800f27c:	1d23      	adds	r3, r4, #4
 800f27e:	f020 0007 	bic.w	r0, r0, #7
 800f282:	1ac2      	subs	r2, r0, r3
 800f284:	d0cc      	beq.n	800f220 <_malloc_r+0x20>
 800f286:	1a1b      	subs	r3, r3, r0
 800f288:	50a3      	str	r3, [r4, r2]
 800f28a:	e7c9      	b.n	800f220 <_malloc_r+0x20>
 800f28c:	4622      	mov	r2, r4
 800f28e:	6864      	ldr	r4, [r4, #4]
 800f290:	e7cc      	b.n	800f22c <_malloc_r+0x2c>
 800f292:	1cc4      	adds	r4, r0, #3
 800f294:	f024 0403 	bic.w	r4, r4, #3
 800f298:	42a0      	cmp	r0, r4
 800f29a:	d0e3      	beq.n	800f264 <_malloc_r+0x64>
 800f29c:	1a21      	subs	r1, r4, r0
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f000 f872 	bl	800f388 <_sbrk_r>
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	d1dd      	bne.n	800f264 <_malloc_r+0x64>
 800f2a8:	e7cf      	b.n	800f24a <_malloc_r+0x4a>
 800f2aa:	bf00      	nop
 800f2ac:	20001fe4 	.word	0x20001fe4
 800f2b0:	20001fe8 	.word	0x20001fe8

0800f2b4 <cleanup_glue>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	6809      	ldr	r1, [r1, #0]
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	b109      	cbz	r1, 800f2c2 <cleanup_glue+0xe>
 800f2be:	f7ff fff9 	bl	800f2b4 <cleanup_glue>
 800f2c2:	4621      	mov	r1, r4
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2ca:	f000 b899 	b.w	800f400 <_free_r>
	...

0800f2d0 <_reclaim_reent>:
 800f2d0:	4b2c      	ldr	r3, [pc, #176]	; (800f384 <_reclaim_reent+0xb4>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4283      	cmp	r3, r0
 800f2d6:	b570      	push	{r4, r5, r6, lr}
 800f2d8:	4604      	mov	r4, r0
 800f2da:	d051      	beq.n	800f380 <_reclaim_reent+0xb0>
 800f2dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f2de:	b143      	cbz	r3, 800f2f2 <_reclaim_reent+0x22>
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d14a      	bne.n	800f37c <_reclaim_reent+0xac>
 800f2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2e8:	6819      	ldr	r1, [r3, #0]
 800f2ea:	b111      	cbz	r1, 800f2f2 <_reclaim_reent+0x22>
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f000 f887 	bl	800f400 <_free_r>
 800f2f2:	6961      	ldr	r1, [r4, #20]
 800f2f4:	b111      	cbz	r1, 800f2fc <_reclaim_reent+0x2c>
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 f882 	bl	800f400 <_free_r>
 800f2fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f2fe:	b111      	cbz	r1, 800f306 <_reclaim_reent+0x36>
 800f300:	4620      	mov	r0, r4
 800f302:	f000 f87d 	bl	800f400 <_free_r>
 800f306:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f308:	b111      	cbz	r1, 800f310 <_reclaim_reent+0x40>
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 f878 	bl	800f400 <_free_r>
 800f310:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f312:	b111      	cbz	r1, 800f31a <_reclaim_reent+0x4a>
 800f314:	4620      	mov	r0, r4
 800f316:	f000 f873 	bl	800f400 <_free_r>
 800f31a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f31c:	b111      	cbz	r1, 800f324 <_reclaim_reent+0x54>
 800f31e:	4620      	mov	r0, r4
 800f320:	f000 f86e 	bl	800f400 <_free_r>
 800f324:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f326:	b111      	cbz	r1, 800f32e <_reclaim_reent+0x5e>
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 f869 	bl	800f400 <_free_r>
 800f32e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f330:	b111      	cbz	r1, 800f338 <_reclaim_reent+0x68>
 800f332:	4620      	mov	r0, r4
 800f334:	f000 f864 	bl	800f400 <_free_r>
 800f338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f33a:	b111      	cbz	r1, 800f342 <_reclaim_reent+0x72>
 800f33c:	4620      	mov	r0, r4
 800f33e:	f000 f85f 	bl	800f400 <_free_r>
 800f342:	69a3      	ldr	r3, [r4, #24]
 800f344:	b1e3      	cbz	r3, 800f380 <_reclaim_reent+0xb0>
 800f346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f348:	4620      	mov	r0, r4
 800f34a:	4798      	blx	r3
 800f34c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f34e:	b1b9      	cbz	r1, 800f380 <_reclaim_reent+0xb0>
 800f350:	4620      	mov	r0, r4
 800f352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f356:	f7ff bfad 	b.w	800f2b4 <cleanup_glue>
 800f35a:	5949      	ldr	r1, [r1, r5]
 800f35c:	b941      	cbnz	r1, 800f370 <_reclaim_reent+0xa0>
 800f35e:	3504      	adds	r5, #4
 800f360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f362:	2d80      	cmp	r5, #128	; 0x80
 800f364:	68d9      	ldr	r1, [r3, #12]
 800f366:	d1f8      	bne.n	800f35a <_reclaim_reent+0x8a>
 800f368:	4620      	mov	r0, r4
 800f36a:	f000 f849 	bl	800f400 <_free_r>
 800f36e:	e7ba      	b.n	800f2e6 <_reclaim_reent+0x16>
 800f370:	680e      	ldr	r6, [r1, #0]
 800f372:	4620      	mov	r0, r4
 800f374:	f000 f844 	bl	800f400 <_free_r>
 800f378:	4631      	mov	r1, r6
 800f37a:	e7ef      	b.n	800f35c <_reclaim_reent+0x8c>
 800f37c:	2500      	movs	r5, #0
 800f37e:	e7ef      	b.n	800f360 <_reclaim_reent+0x90>
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	bf00      	nop
 800f384:	20000018 	.word	0x20000018

0800f388 <_sbrk_r>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	4d06      	ldr	r5, [pc, #24]	; (800f3a4 <_sbrk_r+0x1c>)
 800f38c:	2300      	movs	r3, #0
 800f38e:	4604      	mov	r4, r0
 800f390:	4608      	mov	r0, r1
 800f392:	602b      	str	r3, [r5, #0]
 800f394:	f7f2 ffc8 	bl	8002328 <_sbrk>
 800f398:	1c43      	adds	r3, r0, #1
 800f39a:	d102      	bne.n	800f3a2 <_sbrk_r+0x1a>
 800f39c:	682b      	ldr	r3, [r5, #0]
 800f39e:	b103      	cbz	r3, 800f3a2 <_sbrk_r+0x1a>
 800f3a0:	6023      	str	r3, [r4, #0]
 800f3a2:	bd38      	pop	{r3, r4, r5, pc}
 800f3a4:	200029b8 	.word	0x200029b8

0800f3a8 <siprintf>:
 800f3a8:	b40e      	push	{r1, r2, r3}
 800f3aa:	b500      	push	{lr}
 800f3ac:	b09c      	sub	sp, #112	; 0x70
 800f3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800f3b0:	9002      	str	r0, [sp, #8]
 800f3b2:	9006      	str	r0, [sp, #24]
 800f3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3b8:	4809      	ldr	r0, [pc, #36]	; (800f3e0 <siprintf+0x38>)
 800f3ba:	9107      	str	r1, [sp, #28]
 800f3bc:	9104      	str	r1, [sp, #16]
 800f3be:	4909      	ldr	r1, [pc, #36]	; (800f3e4 <siprintf+0x3c>)
 800f3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c4:	9105      	str	r1, [sp, #20]
 800f3c6:	6800      	ldr	r0, [r0, #0]
 800f3c8:	9301      	str	r3, [sp, #4]
 800f3ca:	a902      	add	r1, sp, #8
 800f3cc:	f000 f8c2 	bl	800f554 <_svfiprintf_r>
 800f3d0:	9b02      	ldr	r3, [sp, #8]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	701a      	strb	r2, [r3, #0]
 800f3d6:	b01c      	add	sp, #112	; 0x70
 800f3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3dc:	b003      	add	sp, #12
 800f3de:	4770      	bx	lr
 800f3e0:	20000018 	.word	0x20000018
 800f3e4:	ffff0208 	.word	0xffff0208

0800f3e8 <__malloc_lock>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__malloc_lock+0x8>)
 800f3ea:	f7ff bef1 	b.w	800f1d0 <__retarget_lock_acquire_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	200029b0 	.word	0x200029b0

0800f3f4 <__malloc_unlock>:
 800f3f4:	4801      	ldr	r0, [pc, #4]	; (800f3fc <__malloc_unlock+0x8>)
 800f3f6:	f7ff beec 	b.w	800f1d2 <__retarget_lock_release_recursive>
 800f3fa:	bf00      	nop
 800f3fc:	200029b0 	.word	0x200029b0

0800f400 <_free_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4605      	mov	r5, r0
 800f404:	2900      	cmp	r1, #0
 800f406:	d045      	beq.n	800f494 <_free_r+0x94>
 800f408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40c:	1f0c      	subs	r4, r1, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	bfb8      	it	lt
 800f412:	18e4      	addlt	r4, r4, r3
 800f414:	f7ff ffe8 	bl	800f3e8 <__malloc_lock>
 800f418:	4a1f      	ldr	r2, [pc, #124]	; (800f498 <_free_r+0x98>)
 800f41a:	6813      	ldr	r3, [r2, #0]
 800f41c:	4610      	mov	r0, r2
 800f41e:	b933      	cbnz	r3, 800f42e <_free_r+0x2e>
 800f420:	6063      	str	r3, [r4, #4]
 800f422:	6014      	str	r4, [r2, #0]
 800f424:	4628      	mov	r0, r5
 800f426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f42a:	f7ff bfe3 	b.w	800f3f4 <__malloc_unlock>
 800f42e:	42a3      	cmp	r3, r4
 800f430:	d90b      	bls.n	800f44a <_free_r+0x4a>
 800f432:	6821      	ldr	r1, [r4, #0]
 800f434:	1862      	adds	r2, r4, r1
 800f436:	4293      	cmp	r3, r2
 800f438:	bf04      	itt	eq
 800f43a:	681a      	ldreq	r2, [r3, #0]
 800f43c:	685b      	ldreq	r3, [r3, #4]
 800f43e:	6063      	str	r3, [r4, #4]
 800f440:	bf04      	itt	eq
 800f442:	1852      	addeq	r2, r2, r1
 800f444:	6022      	streq	r2, [r4, #0]
 800f446:	6004      	str	r4, [r0, #0]
 800f448:	e7ec      	b.n	800f424 <_free_r+0x24>
 800f44a:	461a      	mov	r2, r3
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	b10b      	cbz	r3, 800f454 <_free_r+0x54>
 800f450:	42a3      	cmp	r3, r4
 800f452:	d9fa      	bls.n	800f44a <_free_r+0x4a>
 800f454:	6811      	ldr	r1, [r2, #0]
 800f456:	1850      	adds	r0, r2, r1
 800f458:	42a0      	cmp	r0, r4
 800f45a:	d10b      	bne.n	800f474 <_free_r+0x74>
 800f45c:	6820      	ldr	r0, [r4, #0]
 800f45e:	4401      	add	r1, r0
 800f460:	1850      	adds	r0, r2, r1
 800f462:	4283      	cmp	r3, r0
 800f464:	6011      	str	r1, [r2, #0]
 800f466:	d1dd      	bne.n	800f424 <_free_r+0x24>
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	6053      	str	r3, [r2, #4]
 800f46e:	4401      	add	r1, r0
 800f470:	6011      	str	r1, [r2, #0]
 800f472:	e7d7      	b.n	800f424 <_free_r+0x24>
 800f474:	d902      	bls.n	800f47c <_free_r+0x7c>
 800f476:	230c      	movs	r3, #12
 800f478:	602b      	str	r3, [r5, #0]
 800f47a:	e7d3      	b.n	800f424 <_free_r+0x24>
 800f47c:	6820      	ldr	r0, [r4, #0]
 800f47e:	1821      	adds	r1, r4, r0
 800f480:	428b      	cmp	r3, r1
 800f482:	bf04      	itt	eq
 800f484:	6819      	ldreq	r1, [r3, #0]
 800f486:	685b      	ldreq	r3, [r3, #4]
 800f488:	6063      	str	r3, [r4, #4]
 800f48a:	bf04      	itt	eq
 800f48c:	1809      	addeq	r1, r1, r0
 800f48e:	6021      	streq	r1, [r4, #0]
 800f490:	6054      	str	r4, [r2, #4]
 800f492:	e7c7      	b.n	800f424 <_free_r+0x24>
 800f494:	bd38      	pop	{r3, r4, r5, pc}
 800f496:	bf00      	nop
 800f498:	20001fe4 	.word	0x20001fe4

0800f49c <__ssputs_r>:
 800f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a0:	688e      	ldr	r6, [r1, #8]
 800f4a2:	429e      	cmp	r6, r3
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	4690      	mov	r8, r2
 800f4aa:	461f      	mov	r7, r3
 800f4ac:	d838      	bhi.n	800f520 <__ssputs_r+0x84>
 800f4ae:	898a      	ldrh	r2, [r1, #12]
 800f4b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4b4:	d032      	beq.n	800f51c <__ssputs_r+0x80>
 800f4b6:	6825      	ldr	r5, [r4, #0]
 800f4b8:	6909      	ldr	r1, [r1, #16]
 800f4ba:	eba5 0901 	sub.w	r9, r5, r1
 800f4be:	6965      	ldr	r5, [r4, #20]
 800f4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	444b      	add	r3, r9
 800f4cc:	106d      	asrs	r5, r5, #1
 800f4ce:	429d      	cmp	r5, r3
 800f4d0:	bf38      	it	cc
 800f4d2:	461d      	movcc	r5, r3
 800f4d4:	0553      	lsls	r3, r2, #21
 800f4d6:	d531      	bpl.n	800f53c <__ssputs_r+0xa0>
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7ff fe91 	bl	800f200 <_malloc_r>
 800f4de:	4606      	mov	r6, r0
 800f4e0:	b950      	cbnz	r0, 800f4f8 <__ssputs_r+0x5c>
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	f8ca 3000 	str.w	r3, [sl]
 800f4e8:	89a3      	ldrh	r3, [r4, #12]
 800f4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ee:	81a3      	strh	r3, [r4, #12]
 800f4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f8:	6921      	ldr	r1, [r4, #16]
 800f4fa:	464a      	mov	r2, r9
 800f4fc:	f7ff fe6a 	bl	800f1d4 <memcpy>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	6126      	str	r6, [r4, #16]
 800f50e:	6165      	str	r5, [r4, #20]
 800f510:	444e      	add	r6, r9
 800f512:	eba5 0509 	sub.w	r5, r5, r9
 800f516:	6026      	str	r6, [r4, #0]
 800f518:	60a5      	str	r5, [r4, #8]
 800f51a:	463e      	mov	r6, r7
 800f51c:	42be      	cmp	r6, r7
 800f51e:	d900      	bls.n	800f522 <__ssputs_r+0x86>
 800f520:	463e      	mov	r6, r7
 800f522:	4632      	mov	r2, r6
 800f524:	6820      	ldr	r0, [r4, #0]
 800f526:	4641      	mov	r1, r8
 800f528:	f000 faa8 	bl	800fa7c <memmove>
 800f52c:	68a3      	ldr	r3, [r4, #8]
 800f52e:	6822      	ldr	r2, [r4, #0]
 800f530:	1b9b      	subs	r3, r3, r6
 800f532:	4432      	add	r2, r6
 800f534:	60a3      	str	r3, [r4, #8]
 800f536:	6022      	str	r2, [r4, #0]
 800f538:	2000      	movs	r0, #0
 800f53a:	e7db      	b.n	800f4f4 <__ssputs_r+0x58>
 800f53c:	462a      	mov	r2, r5
 800f53e:	f000 fab7 	bl	800fab0 <_realloc_r>
 800f542:	4606      	mov	r6, r0
 800f544:	2800      	cmp	r0, #0
 800f546:	d1e1      	bne.n	800f50c <__ssputs_r+0x70>
 800f548:	6921      	ldr	r1, [r4, #16]
 800f54a:	4650      	mov	r0, sl
 800f54c:	f7ff ff58 	bl	800f400 <_free_r>
 800f550:	e7c7      	b.n	800f4e2 <__ssputs_r+0x46>
	...

0800f554 <_svfiprintf_r>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	4698      	mov	r8, r3
 800f55a:	898b      	ldrh	r3, [r1, #12]
 800f55c:	061b      	lsls	r3, r3, #24
 800f55e:	b09d      	sub	sp, #116	; 0x74
 800f560:	4607      	mov	r7, r0
 800f562:	460d      	mov	r5, r1
 800f564:	4614      	mov	r4, r2
 800f566:	d50e      	bpl.n	800f586 <_svfiprintf_r+0x32>
 800f568:	690b      	ldr	r3, [r1, #16]
 800f56a:	b963      	cbnz	r3, 800f586 <_svfiprintf_r+0x32>
 800f56c:	2140      	movs	r1, #64	; 0x40
 800f56e:	f7ff fe47 	bl	800f200 <_malloc_r>
 800f572:	6028      	str	r0, [r5, #0]
 800f574:	6128      	str	r0, [r5, #16]
 800f576:	b920      	cbnz	r0, 800f582 <_svfiprintf_r+0x2e>
 800f578:	230c      	movs	r3, #12
 800f57a:	603b      	str	r3, [r7, #0]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f580:	e0d1      	b.n	800f726 <_svfiprintf_r+0x1d2>
 800f582:	2340      	movs	r3, #64	; 0x40
 800f584:	616b      	str	r3, [r5, #20]
 800f586:	2300      	movs	r3, #0
 800f588:	9309      	str	r3, [sp, #36]	; 0x24
 800f58a:	2320      	movs	r3, #32
 800f58c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f590:	f8cd 800c 	str.w	r8, [sp, #12]
 800f594:	2330      	movs	r3, #48	; 0x30
 800f596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f740 <_svfiprintf_r+0x1ec>
 800f59a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f59e:	f04f 0901 	mov.w	r9, #1
 800f5a2:	4623      	mov	r3, r4
 800f5a4:	469a      	mov	sl, r3
 800f5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5aa:	b10a      	cbz	r2, 800f5b0 <_svfiprintf_r+0x5c>
 800f5ac:	2a25      	cmp	r2, #37	; 0x25
 800f5ae:	d1f9      	bne.n	800f5a4 <_svfiprintf_r+0x50>
 800f5b0:	ebba 0b04 	subs.w	fp, sl, r4
 800f5b4:	d00b      	beq.n	800f5ce <_svfiprintf_r+0x7a>
 800f5b6:	465b      	mov	r3, fp
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f7ff ff6d 	bl	800f49c <__ssputs_r>
 800f5c2:	3001      	adds	r0, #1
 800f5c4:	f000 80aa 	beq.w	800f71c <_svfiprintf_r+0x1c8>
 800f5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5ca:	445a      	add	r2, fp
 800f5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 80a2 	beq.w	800f71c <_svfiprintf_r+0x1c8>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5e2:	f10a 0a01 	add.w	sl, sl, #1
 800f5e6:	9304      	str	r3, [sp, #16]
 800f5e8:	9307      	str	r3, [sp, #28]
 800f5ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5ee:	931a      	str	r3, [sp, #104]	; 0x68
 800f5f0:	4654      	mov	r4, sl
 800f5f2:	2205      	movs	r2, #5
 800f5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5f8:	4851      	ldr	r0, [pc, #324]	; (800f740 <_svfiprintf_r+0x1ec>)
 800f5fa:	f7f0 fdc1 	bl	8000180 <memchr>
 800f5fe:	9a04      	ldr	r2, [sp, #16]
 800f600:	b9d8      	cbnz	r0, 800f63a <_svfiprintf_r+0xe6>
 800f602:	06d0      	lsls	r0, r2, #27
 800f604:	bf44      	itt	mi
 800f606:	2320      	movmi	r3, #32
 800f608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f60c:	0711      	lsls	r1, r2, #28
 800f60e:	bf44      	itt	mi
 800f610:	232b      	movmi	r3, #43	; 0x2b
 800f612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f616:	f89a 3000 	ldrb.w	r3, [sl]
 800f61a:	2b2a      	cmp	r3, #42	; 0x2a
 800f61c:	d015      	beq.n	800f64a <_svfiprintf_r+0xf6>
 800f61e:	9a07      	ldr	r2, [sp, #28]
 800f620:	4654      	mov	r4, sl
 800f622:	2000      	movs	r0, #0
 800f624:	f04f 0c0a 	mov.w	ip, #10
 800f628:	4621      	mov	r1, r4
 800f62a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f62e:	3b30      	subs	r3, #48	; 0x30
 800f630:	2b09      	cmp	r3, #9
 800f632:	d94e      	bls.n	800f6d2 <_svfiprintf_r+0x17e>
 800f634:	b1b0      	cbz	r0, 800f664 <_svfiprintf_r+0x110>
 800f636:	9207      	str	r2, [sp, #28]
 800f638:	e014      	b.n	800f664 <_svfiprintf_r+0x110>
 800f63a:	eba0 0308 	sub.w	r3, r0, r8
 800f63e:	fa09 f303 	lsl.w	r3, r9, r3
 800f642:	4313      	orrs	r3, r2
 800f644:	9304      	str	r3, [sp, #16]
 800f646:	46a2      	mov	sl, r4
 800f648:	e7d2      	b.n	800f5f0 <_svfiprintf_r+0x9c>
 800f64a:	9b03      	ldr	r3, [sp, #12]
 800f64c:	1d19      	adds	r1, r3, #4
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	9103      	str	r1, [sp, #12]
 800f652:	2b00      	cmp	r3, #0
 800f654:	bfbb      	ittet	lt
 800f656:	425b      	neglt	r3, r3
 800f658:	f042 0202 	orrlt.w	r2, r2, #2
 800f65c:	9307      	strge	r3, [sp, #28]
 800f65e:	9307      	strlt	r3, [sp, #28]
 800f660:	bfb8      	it	lt
 800f662:	9204      	strlt	r2, [sp, #16]
 800f664:	7823      	ldrb	r3, [r4, #0]
 800f666:	2b2e      	cmp	r3, #46	; 0x2e
 800f668:	d10c      	bne.n	800f684 <_svfiprintf_r+0x130>
 800f66a:	7863      	ldrb	r3, [r4, #1]
 800f66c:	2b2a      	cmp	r3, #42	; 0x2a
 800f66e:	d135      	bne.n	800f6dc <_svfiprintf_r+0x188>
 800f670:	9b03      	ldr	r3, [sp, #12]
 800f672:	1d1a      	adds	r2, r3, #4
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	9203      	str	r2, [sp, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	bfb8      	it	lt
 800f67c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f680:	3402      	adds	r4, #2
 800f682:	9305      	str	r3, [sp, #20]
 800f684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f750 <_svfiprintf_r+0x1fc>
 800f688:	7821      	ldrb	r1, [r4, #0]
 800f68a:	2203      	movs	r2, #3
 800f68c:	4650      	mov	r0, sl
 800f68e:	f7f0 fd77 	bl	8000180 <memchr>
 800f692:	b140      	cbz	r0, 800f6a6 <_svfiprintf_r+0x152>
 800f694:	2340      	movs	r3, #64	; 0x40
 800f696:	eba0 000a 	sub.w	r0, r0, sl
 800f69a:	fa03 f000 	lsl.w	r0, r3, r0
 800f69e:	9b04      	ldr	r3, [sp, #16]
 800f6a0:	4303      	orrs	r3, r0
 800f6a2:	3401      	adds	r4, #1
 800f6a4:	9304      	str	r3, [sp, #16]
 800f6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6aa:	4826      	ldr	r0, [pc, #152]	; (800f744 <_svfiprintf_r+0x1f0>)
 800f6ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6b0:	2206      	movs	r2, #6
 800f6b2:	f7f0 fd65 	bl	8000180 <memchr>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d038      	beq.n	800f72c <_svfiprintf_r+0x1d8>
 800f6ba:	4b23      	ldr	r3, [pc, #140]	; (800f748 <_svfiprintf_r+0x1f4>)
 800f6bc:	bb1b      	cbnz	r3, 800f706 <_svfiprintf_r+0x1b2>
 800f6be:	9b03      	ldr	r3, [sp, #12]
 800f6c0:	3307      	adds	r3, #7
 800f6c2:	f023 0307 	bic.w	r3, r3, #7
 800f6c6:	3308      	adds	r3, #8
 800f6c8:	9303      	str	r3, [sp, #12]
 800f6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6cc:	4433      	add	r3, r6
 800f6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d0:	e767      	b.n	800f5a2 <_svfiprintf_r+0x4e>
 800f6d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	2001      	movs	r0, #1
 800f6da:	e7a5      	b.n	800f628 <_svfiprintf_r+0xd4>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	3401      	adds	r4, #1
 800f6e0:	9305      	str	r3, [sp, #20]
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	f04f 0c0a 	mov.w	ip, #10
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6ee:	3a30      	subs	r2, #48	; 0x30
 800f6f0:	2a09      	cmp	r2, #9
 800f6f2:	d903      	bls.n	800f6fc <_svfiprintf_r+0x1a8>
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d0c5      	beq.n	800f684 <_svfiprintf_r+0x130>
 800f6f8:	9105      	str	r1, [sp, #20]
 800f6fa:	e7c3      	b.n	800f684 <_svfiprintf_r+0x130>
 800f6fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f700:	4604      	mov	r4, r0
 800f702:	2301      	movs	r3, #1
 800f704:	e7f0      	b.n	800f6e8 <_svfiprintf_r+0x194>
 800f706:	ab03      	add	r3, sp, #12
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	462a      	mov	r2, r5
 800f70c:	4b0f      	ldr	r3, [pc, #60]	; (800f74c <_svfiprintf_r+0x1f8>)
 800f70e:	a904      	add	r1, sp, #16
 800f710:	4638      	mov	r0, r7
 800f712:	f3af 8000 	nop.w
 800f716:	1c42      	adds	r2, r0, #1
 800f718:	4606      	mov	r6, r0
 800f71a:	d1d6      	bne.n	800f6ca <_svfiprintf_r+0x176>
 800f71c:	89ab      	ldrh	r3, [r5, #12]
 800f71e:	065b      	lsls	r3, r3, #25
 800f720:	f53f af2c 	bmi.w	800f57c <_svfiprintf_r+0x28>
 800f724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f726:	b01d      	add	sp, #116	; 0x74
 800f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72c:	ab03      	add	r3, sp, #12
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	462a      	mov	r2, r5
 800f732:	4b06      	ldr	r3, [pc, #24]	; (800f74c <_svfiprintf_r+0x1f8>)
 800f734:	a904      	add	r1, sp, #16
 800f736:	4638      	mov	r0, r7
 800f738:	f000 f87a 	bl	800f830 <_printf_i>
 800f73c:	e7eb      	b.n	800f716 <_svfiprintf_r+0x1c2>
 800f73e:	bf00      	nop
 800f740:	0800ffd4 	.word	0x0800ffd4
 800f744:	0800ffde 	.word	0x0800ffde
 800f748:	00000000 	.word	0x00000000
 800f74c:	0800f49d 	.word	0x0800f49d
 800f750:	0800ffda 	.word	0x0800ffda

0800f754 <_printf_common>:
 800f754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f758:	4616      	mov	r6, r2
 800f75a:	4699      	mov	r9, r3
 800f75c:	688a      	ldr	r2, [r1, #8]
 800f75e:	690b      	ldr	r3, [r1, #16]
 800f760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f764:	4293      	cmp	r3, r2
 800f766:	bfb8      	it	lt
 800f768:	4613      	movlt	r3, r2
 800f76a:	6033      	str	r3, [r6, #0]
 800f76c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f770:	4607      	mov	r7, r0
 800f772:	460c      	mov	r4, r1
 800f774:	b10a      	cbz	r2, 800f77a <_printf_common+0x26>
 800f776:	3301      	adds	r3, #1
 800f778:	6033      	str	r3, [r6, #0]
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	0699      	lsls	r1, r3, #26
 800f77e:	bf42      	ittt	mi
 800f780:	6833      	ldrmi	r3, [r6, #0]
 800f782:	3302      	addmi	r3, #2
 800f784:	6033      	strmi	r3, [r6, #0]
 800f786:	6825      	ldr	r5, [r4, #0]
 800f788:	f015 0506 	ands.w	r5, r5, #6
 800f78c:	d106      	bne.n	800f79c <_printf_common+0x48>
 800f78e:	f104 0a19 	add.w	sl, r4, #25
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	6832      	ldr	r2, [r6, #0]
 800f796:	1a9b      	subs	r3, r3, r2
 800f798:	42ab      	cmp	r3, r5
 800f79a:	dc26      	bgt.n	800f7ea <_printf_common+0x96>
 800f79c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f7a0:	1e13      	subs	r3, r2, #0
 800f7a2:	6822      	ldr	r2, [r4, #0]
 800f7a4:	bf18      	it	ne
 800f7a6:	2301      	movne	r3, #1
 800f7a8:	0692      	lsls	r2, r2, #26
 800f7aa:	d42b      	bmi.n	800f804 <_printf_common+0xb0>
 800f7ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f7b0:	4649      	mov	r1, r9
 800f7b2:	4638      	mov	r0, r7
 800f7b4:	47c0      	blx	r8
 800f7b6:	3001      	adds	r0, #1
 800f7b8:	d01e      	beq.n	800f7f8 <_printf_common+0xa4>
 800f7ba:	6823      	ldr	r3, [r4, #0]
 800f7bc:	68e5      	ldr	r5, [r4, #12]
 800f7be:	6832      	ldr	r2, [r6, #0]
 800f7c0:	f003 0306 	and.w	r3, r3, #6
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	bf08      	it	eq
 800f7c8:	1aad      	subeq	r5, r5, r2
 800f7ca:	68a3      	ldr	r3, [r4, #8]
 800f7cc:	6922      	ldr	r2, [r4, #16]
 800f7ce:	bf0c      	ite	eq
 800f7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7d4:	2500      	movne	r5, #0
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	bfc4      	itt	gt
 800f7da:	1a9b      	subgt	r3, r3, r2
 800f7dc:	18ed      	addgt	r5, r5, r3
 800f7de:	2600      	movs	r6, #0
 800f7e0:	341a      	adds	r4, #26
 800f7e2:	42b5      	cmp	r5, r6
 800f7e4:	d11a      	bne.n	800f81c <_printf_common+0xc8>
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	e008      	b.n	800f7fc <_printf_common+0xa8>
 800f7ea:	2301      	movs	r3, #1
 800f7ec:	4652      	mov	r2, sl
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	4638      	mov	r0, r7
 800f7f2:	47c0      	blx	r8
 800f7f4:	3001      	adds	r0, #1
 800f7f6:	d103      	bne.n	800f800 <_printf_common+0xac>
 800f7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f800:	3501      	adds	r5, #1
 800f802:	e7c6      	b.n	800f792 <_printf_common+0x3e>
 800f804:	18e1      	adds	r1, r4, r3
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	2030      	movs	r0, #48	; 0x30
 800f80a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f80e:	4422      	add	r2, r4
 800f810:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f814:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f818:	3302      	adds	r3, #2
 800f81a:	e7c7      	b.n	800f7ac <_printf_common+0x58>
 800f81c:	2301      	movs	r3, #1
 800f81e:	4622      	mov	r2, r4
 800f820:	4649      	mov	r1, r9
 800f822:	4638      	mov	r0, r7
 800f824:	47c0      	blx	r8
 800f826:	3001      	adds	r0, #1
 800f828:	d0e6      	beq.n	800f7f8 <_printf_common+0xa4>
 800f82a:	3601      	adds	r6, #1
 800f82c:	e7d9      	b.n	800f7e2 <_printf_common+0x8e>
	...

0800f830 <_printf_i>:
 800f830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f834:	460c      	mov	r4, r1
 800f836:	4691      	mov	r9, r2
 800f838:	7e27      	ldrb	r7, [r4, #24]
 800f83a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f83c:	2f78      	cmp	r7, #120	; 0x78
 800f83e:	4680      	mov	r8, r0
 800f840:	469a      	mov	sl, r3
 800f842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f846:	d807      	bhi.n	800f858 <_printf_i+0x28>
 800f848:	2f62      	cmp	r7, #98	; 0x62
 800f84a:	d80a      	bhi.n	800f862 <_printf_i+0x32>
 800f84c:	2f00      	cmp	r7, #0
 800f84e:	f000 80d8 	beq.w	800fa02 <_printf_i+0x1d2>
 800f852:	2f58      	cmp	r7, #88	; 0x58
 800f854:	f000 80a3 	beq.w	800f99e <_printf_i+0x16e>
 800f858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f85c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f860:	e03a      	b.n	800f8d8 <_printf_i+0xa8>
 800f862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f866:	2b15      	cmp	r3, #21
 800f868:	d8f6      	bhi.n	800f858 <_printf_i+0x28>
 800f86a:	a001      	add	r0, pc, #4	; (adr r0, 800f870 <_printf_i+0x40>)
 800f86c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f870:	0800f8c9 	.word	0x0800f8c9
 800f874:	0800f8dd 	.word	0x0800f8dd
 800f878:	0800f859 	.word	0x0800f859
 800f87c:	0800f859 	.word	0x0800f859
 800f880:	0800f859 	.word	0x0800f859
 800f884:	0800f859 	.word	0x0800f859
 800f888:	0800f8dd 	.word	0x0800f8dd
 800f88c:	0800f859 	.word	0x0800f859
 800f890:	0800f859 	.word	0x0800f859
 800f894:	0800f859 	.word	0x0800f859
 800f898:	0800f859 	.word	0x0800f859
 800f89c:	0800f9e9 	.word	0x0800f9e9
 800f8a0:	0800f90d 	.word	0x0800f90d
 800f8a4:	0800f9cb 	.word	0x0800f9cb
 800f8a8:	0800f859 	.word	0x0800f859
 800f8ac:	0800f859 	.word	0x0800f859
 800f8b0:	0800fa0b 	.word	0x0800fa0b
 800f8b4:	0800f859 	.word	0x0800f859
 800f8b8:	0800f90d 	.word	0x0800f90d
 800f8bc:	0800f859 	.word	0x0800f859
 800f8c0:	0800f859 	.word	0x0800f859
 800f8c4:	0800f9d3 	.word	0x0800f9d3
 800f8c8:	680b      	ldr	r3, [r1, #0]
 800f8ca:	1d1a      	adds	r2, r3, #4
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	600a      	str	r2, [r1, #0]
 800f8d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e0a3      	b.n	800fa24 <_printf_i+0x1f4>
 800f8dc:	6825      	ldr	r5, [r4, #0]
 800f8de:	6808      	ldr	r0, [r1, #0]
 800f8e0:	062e      	lsls	r6, r5, #24
 800f8e2:	f100 0304 	add.w	r3, r0, #4
 800f8e6:	d50a      	bpl.n	800f8fe <_printf_i+0xce>
 800f8e8:	6805      	ldr	r5, [r0, #0]
 800f8ea:	600b      	str	r3, [r1, #0]
 800f8ec:	2d00      	cmp	r5, #0
 800f8ee:	da03      	bge.n	800f8f8 <_printf_i+0xc8>
 800f8f0:	232d      	movs	r3, #45	; 0x2d
 800f8f2:	426d      	negs	r5, r5
 800f8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8f8:	485e      	ldr	r0, [pc, #376]	; (800fa74 <_printf_i+0x244>)
 800f8fa:	230a      	movs	r3, #10
 800f8fc:	e019      	b.n	800f932 <_printf_i+0x102>
 800f8fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f902:	6805      	ldr	r5, [r0, #0]
 800f904:	600b      	str	r3, [r1, #0]
 800f906:	bf18      	it	ne
 800f908:	b22d      	sxthne	r5, r5
 800f90a:	e7ef      	b.n	800f8ec <_printf_i+0xbc>
 800f90c:	680b      	ldr	r3, [r1, #0]
 800f90e:	6825      	ldr	r5, [r4, #0]
 800f910:	1d18      	adds	r0, r3, #4
 800f912:	6008      	str	r0, [r1, #0]
 800f914:	0628      	lsls	r0, r5, #24
 800f916:	d501      	bpl.n	800f91c <_printf_i+0xec>
 800f918:	681d      	ldr	r5, [r3, #0]
 800f91a:	e002      	b.n	800f922 <_printf_i+0xf2>
 800f91c:	0669      	lsls	r1, r5, #25
 800f91e:	d5fb      	bpl.n	800f918 <_printf_i+0xe8>
 800f920:	881d      	ldrh	r5, [r3, #0]
 800f922:	4854      	ldr	r0, [pc, #336]	; (800fa74 <_printf_i+0x244>)
 800f924:	2f6f      	cmp	r7, #111	; 0x6f
 800f926:	bf0c      	ite	eq
 800f928:	2308      	moveq	r3, #8
 800f92a:	230a      	movne	r3, #10
 800f92c:	2100      	movs	r1, #0
 800f92e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f932:	6866      	ldr	r6, [r4, #4]
 800f934:	60a6      	str	r6, [r4, #8]
 800f936:	2e00      	cmp	r6, #0
 800f938:	bfa2      	ittt	ge
 800f93a:	6821      	ldrge	r1, [r4, #0]
 800f93c:	f021 0104 	bicge.w	r1, r1, #4
 800f940:	6021      	strge	r1, [r4, #0]
 800f942:	b90d      	cbnz	r5, 800f948 <_printf_i+0x118>
 800f944:	2e00      	cmp	r6, #0
 800f946:	d04d      	beq.n	800f9e4 <_printf_i+0x1b4>
 800f948:	4616      	mov	r6, r2
 800f94a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f94e:	fb03 5711 	mls	r7, r3, r1, r5
 800f952:	5dc7      	ldrb	r7, [r0, r7]
 800f954:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f958:	462f      	mov	r7, r5
 800f95a:	42bb      	cmp	r3, r7
 800f95c:	460d      	mov	r5, r1
 800f95e:	d9f4      	bls.n	800f94a <_printf_i+0x11a>
 800f960:	2b08      	cmp	r3, #8
 800f962:	d10b      	bne.n	800f97c <_printf_i+0x14c>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	07df      	lsls	r7, r3, #31
 800f968:	d508      	bpl.n	800f97c <_printf_i+0x14c>
 800f96a:	6923      	ldr	r3, [r4, #16]
 800f96c:	6861      	ldr	r1, [r4, #4]
 800f96e:	4299      	cmp	r1, r3
 800f970:	bfde      	ittt	le
 800f972:	2330      	movle	r3, #48	; 0x30
 800f974:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f978:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f97c:	1b92      	subs	r2, r2, r6
 800f97e:	6122      	str	r2, [r4, #16]
 800f980:	f8cd a000 	str.w	sl, [sp]
 800f984:	464b      	mov	r3, r9
 800f986:	aa03      	add	r2, sp, #12
 800f988:	4621      	mov	r1, r4
 800f98a:	4640      	mov	r0, r8
 800f98c:	f7ff fee2 	bl	800f754 <_printf_common>
 800f990:	3001      	adds	r0, #1
 800f992:	d14c      	bne.n	800fa2e <_printf_i+0x1fe>
 800f994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f998:	b004      	add	sp, #16
 800f99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99e:	4835      	ldr	r0, [pc, #212]	; (800fa74 <_printf_i+0x244>)
 800f9a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f9a4:	6823      	ldr	r3, [r4, #0]
 800f9a6:	680e      	ldr	r6, [r1, #0]
 800f9a8:	061f      	lsls	r7, r3, #24
 800f9aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800f9ae:	600e      	str	r6, [r1, #0]
 800f9b0:	d514      	bpl.n	800f9dc <_printf_i+0x1ac>
 800f9b2:	07d9      	lsls	r1, r3, #31
 800f9b4:	bf44      	itt	mi
 800f9b6:	f043 0320 	orrmi.w	r3, r3, #32
 800f9ba:	6023      	strmi	r3, [r4, #0]
 800f9bc:	b91d      	cbnz	r5, 800f9c6 <_printf_i+0x196>
 800f9be:	6823      	ldr	r3, [r4, #0]
 800f9c0:	f023 0320 	bic.w	r3, r3, #32
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	2310      	movs	r3, #16
 800f9c8:	e7b0      	b.n	800f92c <_printf_i+0xfc>
 800f9ca:	6823      	ldr	r3, [r4, #0]
 800f9cc:	f043 0320 	orr.w	r3, r3, #32
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	2378      	movs	r3, #120	; 0x78
 800f9d4:	4828      	ldr	r0, [pc, #160]	; (800fa78 <_printf_i+0x248>)
 800f9d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9da:	e7e3      	b.n	800f9a4 <_printf_i+0x174>
 800f9dc:	065e      	lsls	r6, r3, #25
 800f9de:	bf48      	it	mi
 800f9e0:	b2ad      	uxthmi	r5, r5
 800f9e2:	e7e6      	b.n	800f9b2 <_printf_i+0x182>
 800f9e4:	4616      	mov	r6, r2
 800f9e6:	e7bb      	b.n	800f960 <_printf_i+0x130>
 800f9e8:	680b      	ldr	r3, [r1, #0]
 800f9ea:	6826      	ldr	r6, [r4, #0]
 800f9ec:	6960      	ldr	r0, [r4, #20]
 800f9ee:	1d1d      	adds	r5, r3, #4
 800f9f0:	600d      	str	r5, [r1, #0]
 800f9f2:	0635      	lsls	r5, r6, #24
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	d501      	bpl.n	800f9fc <_printf_i+0x1cc>
 800f9f8:	6018      	str	r0, [r3, #0]
 800f9fa:	e002      	b.n	800fa02 <_printf_i+0x1d2>
 800f9fc:	0671      	lsls	r1, r6, #25
 800f9fe:	d5fb      	bpl.n	800f9f8 <_printf_i+0x1c8>
 800fa00:	8018      	strh	r0, [r3, #0]
 800fa02:	2300      	movs	r3, #0
 800fa04:	6123      	str	r3, [r4, #16]
 800fa06:	4616      	mov	r6, r2
 800fa08:	e7ba      	b.n	800f980 <_printf_i+0x150>
 800fa0a:	680b      	ldr	r3, [r1, #0]
 800fa0c:	1d1a      	adds	r2, r3, #4
 800fa0e:	600a      	str	r2, [r1, #0]
 800fa10:	681e      	ldr	r6, [r3, #0]
 800fa12:	6862      	ldr	r2, [r4, #4]
 800fa14:	2100      	movs	r1, #0
 800fa16:	4630      	mov	r0, r6
 800fa18:	f7f0 fbb2 	bl	8000180 <memchr>
 800fa1c:	b108      	cbz	r0, 800fa22 <_printf_i+0x1f2>
 800fa1e:	1b80      	subs	r0, r0, r6
 800fa20:	6060      	str	r0, [r4, #4]
 800fa22:	6863      	ldr	r3, [r4, #4]
 800fa24:	6123      	str	r3, [r4, #16]
 800fa26:	2300      	movs	r3, #0
 800fa28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa2c:	e7a8      	b.n	800f980 <_printf_i+0x150>
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	4632      	mov	r2, r6
 800fa32:	4649      	mov	r1, r9
 800fa34:	4640      	mov	r0, r8
 800fa36:	47d0      	blx	sl
 800fa38:	3001      	adds	r0, #1
 800fa3a:	d0ab      	beq.n	800f994 <_printf_i+0x164>
 800fa3c:	6823      	ldr	r3, [r4, #0]
 800fa3e:	079b      	lsls	r3, r3, #30
 800fa40:	d413      	bmi.n	800fa6a <_printf_i+0x23a>
 800fa42:	68e0      	ldr	r0, [r4, #12]
 800fa44:	9b03      	ldr	r3, [sp, #12]
 800fa46:	4298      	cmp	r0, r3
 800fa48:	bfb8      	it	lt
 800fa4a:	4618      	movlt	r0, r3
 800fa4c:	e7a4      	b.n	800f998 <_printf_i+0x168>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	4632      	mov	r2, r6
 800fa52:	4649      	mov	r1, r9
 800fa54:	4640      	mov	r0, r8
 800fa56:	47d0      	blx	sl
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d09b      	beq.n	800f994 <_printf_i+0x164>
 800fa5c:	3501      	adds	r5, #1
 800fa5e:	68e3      	ldr	r3, [r4, #12]
 800fa60:	9903      	ldr	r1, [sp, #12]
 800fa62:	1a5b      	subs	r3, r3, r1
 800fa64:	42ab      	cmp	r3, r5
 800fa66:	dcf2      	bgt.n	800fa4e <_printf_i+0x21e>
 800fa68:	e7eb      	b.n	800fa42 <_printf_i+0x212>
 800fa6a:	2500      	movs	r5, #0
 800fa6c:	f104 0619 	add.w	r6, r4, #25
 800fa70:	e7f5      	b.n	800fa5e <_printf_i+0x22e>
 800fa72:	bf00      	nop
 800fa74:	0800ffe5 	.word	0x0800ffe5
 800fa78:	0800fff6 	.word	0x0800fff6

0800fa7c <memmove>:
 800fa7c:	4288      	cmp	r0, r1
 800fa7e:	b510      	push	{r4, lr}
 800fa80:	eb01 0402 	add.w	r4, r1, r2
 800fa84:	d902      	bls.n	800fa8c <memmove+0x10>
 800fa86:	4284      	cmp	r4, r0
 800fa88:	4623      	mov	r3, r4
 800fa8a:	d807      	bhi.n	800fa9c <memmove+0x20>
 800fa8c:	1e43      	subs	r3, r0, #1
 800fa8e:	42a1      	cmp	r1, r4
 800fa90:	d008      	beq.n	800faa4 <memmove+0x28>
 800fa92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa9a:	e7f8      	b.n	800fa8e <memmove+0x12>
 800fa9c:	4402      	add	r2, r0
 800fa9e:	4601      	mov	r1, r0
 800faa0:	428a      	cmp	r2, r1
 800faa2:	d100      	bne.n	800faa6 <memmove+0x2a>
 800faa4:	bd10      	pop	{r4, pc}
 800faa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800faaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800faae:	e7f7      	b.n	800faa0 <memmove+0x24>

0800fab0 <_realloc_r>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	4607      	mov	r7, r0
 800fab4:	4614      	mov	r4, r2
 800fab6:	460e      	mov	r6, r1
 800fab8:	b921      	cbnz	r1, 800fac4 <_realloc_r+0x14>
 800faba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fabe:	4611      	mov	r1, r2
 800fac0:	f7ff bb9e 	b.w	800f200 <_malloc_r>
 800fac4:	b922      	cbnz	r2, 800fad0 <_realloc_r+0x20>
 800fac6:	f7ff fc9b 	bl	800f400 <_free_r>
 800faca:	4625      	mov	r5, r4
 800facc:	4628      	mov	r0, r5
 800face:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fad0:	f000 f814 	bl	800fafc <_malloc_usable_size_r>
 800fad4:	42a0      	cmp	r0, r4
 800fad6:	d20f      	bcs.n	800faf8 <_realloc_r+0x48>
 800fad8:	4621      	mov	r1, r4
 800fada:	4638      	mov	r0, r7
 800fadc:	f7ff fb90 	bl	800f200 <_malloc_r>
 800fae0:	4605      	mov	r5, r0
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d0f2      	beq.n	800facc <_realloc_r+0x1c>
 800fae6:	4631      	mov	r1, r6
 800fae8:	4622      	mov	r2, r4
 800faea:	f7ff fb73 	bl	800f1d4 <memcpy>
 800faee:	4631      	mov	r1, r6
 800faf0:	4638      	mov	r0, r7
 800faf2:	f7ff fc85 	bl	800f400 <_free_r>
 800faf6:	e7e9      	b.n	800facc <_realloc_r+0x1c>
 800faf8:	4635      	mov	r5, r6
 800fafa:	e7e7      	b.n	800facc <_realloc_r+0x1c>

0800fafc <_malloc_usable_size_r>:
 800fafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb00:	1f18      	subs	r0, r3, #4
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	bfbc      	itt	lt
 800fb06:	580b      	ldrlt	r3, [r1, r0]
 800fb08:	18c0      	addlt	r0, r0, r3
 800fb0a:	4770      	bx	lr

0800fb0c <_init>:
 800fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0e:	bf00      	nop
 800fb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb12:	bc08      	pop	{r3}
 800fb14:	469e      	mov	lr, r3
 800fb16:	4770      	bx	lr

0800fb18 <_fini>:
 800fb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1a:	bf00      	nop
 800fb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb1e:	bc08      	pop	{r3}
 800fb20:	469e      	mov	lr, r3
 800fb22:	4770      	bx	lr
