
STM32WL55_Ping_pong_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08010420  08010420  00020420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010908  08010908  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08010908  08010908  00020908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010910  08010910  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010910  08010910  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010914  08010914  00020914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08010918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002940  2000007c  08010994  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200029bc  08010994  000329bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e8d0  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006dd2  00000000  00000000  0006e976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd8  00000000  00000000  00075748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b68  00000000  00000000  00078520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a38  00000000  00000000  0007b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031302  00000000  00000000  000a1ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e249f  00000000  00000000  000d2dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8e4  00000000  00000000  001b52b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	08010408 	.word	0x08010408

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	08010408 	.word	0x08010408

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_frsub>:
 8000a5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	e002      	b.n	8000a68 <__addsf3>
 8000a62:	bf00      	nop

08000a64 <__aeabi_fsub>:
 8000a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a68 <__addsf3>:
 8000a68:	0042      	lsls	r2, r0, #1
 8000a6a:	bf1f      	itttt	ne
 8000a6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a70:	ea92 0f03 	teqne	r2, r3
 8000a74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7c:	d06a      	beq.n	8000b54 <__addsf3+0xec>
 8000a7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a86:	bfc1      	itttt	gt
 8000a88:	18d2      	addgt	r2, r2, r3
 8000a8a:	4041      	eorgt	r1, r0
 8000a8c:	4048      	eorgt	r0, r1
 8000a8e:	4041      	eorgt	r1, r0
 8000a90:	bfb8      	it	lt
 8000a92:	425b      	neglt	r3, r3
 8000a94:	2b19      	cmp	r3, #25
 8000a96:	bf88      	it	hi
 8000a98:	4770      	bxhi	lr
 8000a9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ab2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4249      	negne	r1, r1
 8000aba:	ea92 0f03 	teq	r2, r3
 8000abe:	d03f      	beq.n	8000b40 <__addsf3+0xd8>
 8000ac0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ac4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ac8:	eb10 000c 	adds.w	r0, r0, ip
 8000acc:	f1c3 0320 	rsb	r3, r3, #32
 8000ad0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ad4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__addsf3+0x78>
 8000ada:	4249      	negs	r1, r1
 8000adc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ae4:	d313      	bcc.n	8000b0e <__addsf3+0xa6>
 8000ae6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aea:	d306      	bcc.n	8000afa <__addsf3+0x92>
 8000aec:	0840      	lsrs	r0, r0, #1
 8000aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000af2:	f102 0201 	add.w	r2, r2, #1
 8000af6:	2afe      	cmp	r2, #254	; 0xfe
 8000af8:	d251      	bcs.n	8000b9e <__addsf3+0x136>
 8000afa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b02:	bf08      	it	eq
 8000b04:	f020 0001 	biceq.w	r0, r0, #1
 8000b08:	ea40 0003 	orr.w	r0, r0, r3
 8000b0c:	4770      	bx	lr
 8000b0e:	0049      	lsls	r1, r1, #1
 8000b10:	eb40 0000 	adc.w	r0, r0, r0
 8000b14:	3a01      	subs	r2, #1
 8000b16:	bf28      	it	cs
 8000b18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b1c:	d2ed      	bcs.n	8000afa <__addsf3+0x92>
 8000b1e:	fab0 fc80 	clz	ip, r0
 8000b22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b26:	ebb2 020c 	subs.w	r2, r2, ip
 8000b2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b2e:	bfaa      	itet	ge
 8000b30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b34:	4252      	neglt	r2, r2
 8000b36:	4318      	orrge	r0, r3
 8000b38:	bfbc      	itt	lt
 8000b3a:	40d0      	lsrlt	r0, r2
 8000b3c:	4318      	orrlt	r0, r3
 8000b3e:	4770      	bx	lr
 8000b40:	f092 0f00 	teq	r2, #0
 8000b44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b48:	bf06      	itte	eq
 8000b4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b4e:	3201      	addeq	r2, #1
 8000b50:	3b01      	subne	r3, #1
 8000b52:	e7b5      	b.n	8000ac0 <__addsf3+0x58>
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d021      	beq.n	8000ba8 <__addsf3+0x140>
 8000b64:	ea92 0f03 	teq	r2, r3
 8000b68:	d004      	beq.n	8000b74 <__addsf3+0x10c>
 8000b6a:	f092 0f00 	teq	r2, #0
 8000b6e:	bf08      	it	eq
 8000b70:	4608      	moveq	r0, r1
 8000b72:	4770      	bx	lr
 8000b74:	ea90 0f01 	teq	r0, r1
 8000b78:	bf1c      	itt	ne
 8000b7a:	2000      	movne	r0, #0
 8000b7c:	4770      	bxne	lr
 8000b7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b82:	d104      	bne.n	8000b8e <__addsf3+0x126>
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	bf28      	it	cs
 8000b88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	4770      	bx	lr
 8000b8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b92:	bf3c      	itt	cc
 8000b94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bxcc	lr
 8000b9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	4770      	bx	lr
 8000ba8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bac:	bf16      	itet	ne
 8000bae:	4608      	movne	r0, r1
 8000bb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bb4:	4601      	movne	r1, r0
 8000bb6:	0242      	lsls	r2, r0, #9
 8000bb8:	bf06      	itte	eq
 8000bba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bbe:	ea90 0f01 	teqeq	r0, r1
 8000bc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ui2f>:
 8000bc8:	f04f 0300 	mov.w	r3, #0
 8000bcc:	e004      	b.n	8000bd8 <__aeabi_i2f+0x8>
 8000bce:	bf00      	nop

08000bd0 <__aeabi_i2f>:
 8000bd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	bf48      	it	mi
 8000bd6:	4240      	negmi	r0, r0
 8000bd8:	ea5f 0c00 	movs.w	ip, r0
 8000bdc:	bf08      	it	eq
 8000bde:	4770      	bxeq	lr
 8000be0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000be4:	4601      	mov	r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	e01c      	b.n	8000c26 <__aeabi_l2f+0x2a>

08000bec <__aeabi_ul2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <__aeabi_l2f+0x14>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_l2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c08:	d502      	bpl.n	8000c10 <__aeabi_l2f+0x14>
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	ea5f 0c01 	movs.w	ip, r1
 8000c14:	bf02      	ittt	eq
 8000c16:	4684      	moveq	ip, r0
 8000c18:	4601      	moveq	r1, r0
 8000c1a:	2000      	moveq	r0, #0
 8000c1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c20:	bf08      	it	eq
 8000c22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c2a:	fabc f28c 	clz	r2, ip
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c34:	db10      	blt.n	8000c58 <__aeabi_l2f+0x5c>
 8000c36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c48:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f102 0220 	add.w	r2, r2, #32
 8000c5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c60:	f1c2 0220 	rsb	r2, r2, #32
 8000c64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c68:	fa21 f202 	lsr.w	r2, r1, r2
 8000c6c:	eb43 0002 	adc.w	r0, r3, r2
 8000c70:	bf08      	it	eq
 8000c72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b96c 	b.w	8000f68 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	468e      	mov	lr, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 8082 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cba:	428a      	cmp	r2, r1
 8000cbc:	4617      	mov	r7, r2
 8000cbe:	d946      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	b14a      	cbz	r2, 8000cda <__udivmoddi4+0x32>
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa05 f302 	lsl.w	r3, r5, r2
 8000cce:	fa20 f101 	lsr.w	r1, r0, r1
 8000cd2:	4097      	lsls	r7, r2
 8000cd4:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fbbe fcf8 	udiv	ip, lr, r8
 8000ce4:	b2b9      	uxth	r1, r7
 8000ce6:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000cea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cee:	fb0c f001 	mul.w	r0, ip, r1
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8000cfc:	f080 8116 	bcs.w	8000f2c <__udivmoddi4+0x284>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f240 8113 	bls.w	8000f2c <__udivmoddi4+0x284>
 8000d06:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a1b      	subs	r3, r3, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f101 	mul.w	r1, r0, r1
 8000d20:	42a1      	cmp	r1, r4
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	f080 8101 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000d2e:	42a1      	cmp	r1, r4
 8000d30:	f240 80fe 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d34:	3802      	subs	r0, #2
 8000d36:	443c      	add	r4, r7
 8000d38:	1a64      	subs	r4, r4, r1
 8000d3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40d4      	lsrs	r4, r2
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d14f      	bne.n	8000dfa <__udivmoddi4+0x152>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2101      	movs	r1, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c25      	lsrs	r5, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	42ab      	cmp	r3, r5
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	197d      	adds	r5, r7, r5
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	f200 80e7 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1aed      	subs	r5, r5, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000d94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000d98:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d7 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7c0      	b.n	8000d40 <__udivmoddi4+0x98>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	f000 80af 	beq.w	8000f26 <__udivmoddi4+0x27e>
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e9c6 0500 	strd	r0, r5, [r6]
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	d14b      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	d302      	bcc.n	8000de6 <__udivmoddi4+0x13e>
 8000de0:	4282      	cmp	r2, r0
 8000de2:	f200 80b7 	bhi.w	8000f54 <__udivmoddi4+0x2ac>
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb65 0303 	sbc.w	r3, r5, r3
 8000dec:	2001      	movs	r0, #1
 8000dee:	469e      	mov	lr, r3
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0aa      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000df4:	e9c6 4e00 	strd	r4, lr, [r6]
 8000df8:	e7a7      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000dfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000dfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000e02:	4097      	lsls	r7, r2
 8000e04:	fa20 f00c 	lsr.w	r0, r0, ip
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000e10:	4318      	orrs	r0, r3
 8000e12:	fbbc f1fe 	udiv	r1, ip, lr
 8000e16:	0c05      	lsrs	r5, r0, #16
 8000e18:	fb0e cc11 	mls	ip, lr, r1, ip
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000e24:	fb01 f308 	mul.w	r3, r1, r8
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	197d      	adds	r5, r7, r5
 8000e32:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000e36:	f080 808b 	bcs.w	8000f50 <__udivmoddi4+0x2a8>
 8000e3a:	42ab      	cmp	r3, r5
 8000e3c:	f240 8088 	bls.w	8000f50 <__udivmoddi4+0x2a8>
 8000e40:	3902      	subs	r1, #2
 8000e42:	443d      	add	r5, r7
 8000e44:	1aeb      	subs	r3, r5, r3
 8000e46:	b285      	uxth	r5, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	42ab      	cmp	r3, r5
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	197d      	adds	r5, r7, r5
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e62:	d271      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000e64:	42ab      	cmp	r3, r5
 8000e66:	d96f      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c1 0c20 	rsb	ip, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f70c 	lsr.w	r7, r2, ip
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 f40c 	lsr.w	r4, r0, ip
 8000e84:	fa05 f301 	lsl.w	r3, r5, r1
 8000e88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	0c23      	lsrs	r3, r4, #16
 8000e94:	fbb5 f9fe 	udiv	r9, r5, lr
 8000e98:	fa1f f887 	uxth.w	r8, r7
 8000e9c:	fb0e 5519 	mls	r5, lr, r9, r5
 8000ea0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8000ea4:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea8:	45aa      	cmp	sl, r5
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	fa00 f301 	lsl.w	r3, r0, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x21e>
 8000eb4:	197d      	adds	r5, r7, r5
 8000eb6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eba:	d247      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000ebc:	45aa      	cmp	sl, r5
 8000ebe:	d945      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000ec0:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	eba5 050a 	sub.w	r5, r5, sl
 8000eca:	b2a4      	uxth	r4, r4
 8000ecc:	fbb5 f0fe 	udiv	r0, r5, lr
 8000ed0:	fb0e 5510 	mls	r5, lr, r0, r5
 8000ed4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ed8:	fb00 f808 	mul.w	r8, r0, r8
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x248>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ee6:	d22d      	bcs.n	8000f44 <__udivmoddi4+0x29c>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	d92b      	bls.n	8000f44 <__udivmoddi4+0x29c>
 8000eec:	3802      	subs	r0, #2
 8000eee:	443c      	add	r4, r7
 8000ef0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef4:	eba4 0408 	sub.w	r4, r4, r8
 8000ef8:	fba0 8902 	umull	r8, r9, r0, r2
 8000efc:	454c      	cmp	r4, r9
 8000efe:	46c6      	mov	lr, r8
 8000f00:	464d      	mov	r5, r9
 8000f02:	d319      	bcc.n	8000f38 <__udivmoddi4+0x290>
 8000f04:	d016      	beq.n	8000f34 <__udivmoddi4+0x28c>
 8000f06:	b15e      	cbz	r6, 8000f20 <__udivmoddi4+0x278>
 8000f08:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0c:	eb64 0405 	sbc.w	r4, r4, r5
 8000f10:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f14:	40ca      	lsrs	r2, r1
 8000f16:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1a:	40cc      	lsrs	r4, r1
 8000f1c:	e9c6 2400 	strd	r2, r4, [r6]
 8000f20:	2100      	movs	r1, #0
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	4631      	mov	r1, r6
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e70e      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f2c:	46ac      	mov	ip, r5
 8000f2e:	e6ed      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e701      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e6      	bcs.n	8000f06 <__udivmoddi4+0x25e>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0507 	sbc.w	r5, r9, r7
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7e0      	b.n	8000f06 <__udivmoddi4+0x25e>
 8000f44:	4628      	mov	r0, r5
 8000f46:	e7d3      	b.n	8000ef0 <__udivmoddi4+0x248>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78f      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7ba      	b.n	8000ec6 <__udivmoddi4+0x21e>
 8000f50:	4661      	mov	r1, ip
 8000f52:	e777      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f54:	4608      	mov	r0, r1
 8000f56:	e74b      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	443d      	add	r5, r7
 8000f5e:	e715      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e726      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc4:	f001 fac2 	bl	800254c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 f858 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f000 fa3e 	bl	800144c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000fd0:	f000 f992 	bl	80012f8 <MX_SUBGHZ_Init>
  MX_LPTIM1_Init();
 8000fd4:	f000 f934 	bl	8001240 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8000fd8:	f000 f95e 	bl	8001298 <MX_RTC_Init>
  MX_ADC_Init();
 8000fdc:	f000 f8a2 	bl	8001124 <MX_ADC_Init>
  MX_I2C2_Init();
 8000fe0:	f000 f8ee 	bl	80011c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 f99a 	bl	800131c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fe8:	f000 f9e4 	bl	80013b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fec:	f007 fb74 	bl	80086d8 <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of radioBinarySem */
  radioBinarySemHandle = osSemaphoreNew(1, 1, &radioBinarySem_attributes);
 8000ff0:	4a15      	ldr	r2, [pc, #84]	; (8001048 <main+0x88>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f007 fd57 	bl	8008aa8 <osSemaphoreNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <main+0x8c>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of mainBinarySem */
  mainBinarySemHandle = osSemaphoreNew(1, 1, &mainBinarySem_attributes);
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <main+0x90>)
 8001002:	2101      	movs	r1, #1
 8001004:	2001      	movs	r0, #1
 8001006:	f007 fd4f 	bl	8008aa8 <osSemaphoreNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <main+0x94>)
 800100e:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of mainTimer */
  mainTimerHandle = osTimerNew(mainTimerCallback, osTimerPeriodic, NULL, &mainTimer_attributes);
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <main+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	2101      	movs	r1, #1
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <main+0x9c>)
 8001018:	f007 fc82 	bl	8008920 <osTimerNew>
 800101c:	4603      	mov	r3, r0
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <main+0xa0>)
 8001020:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of radioTask */
  radioTaskHandle = osThreadNew(StartRadioTask, NULL, &radioTask_attributes);
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <main+0xa4>)
 8001024:	2100      	movs	r1, #0
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0xa8>)
 8001028:	f007 fbbe 	bl	80087a8 <osThreadNew>
 800102c:	4603      	mov	r3, r0
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <main+0xac>)
 8001030:	6013      	str	r3, [r2, #0]

  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 8001032:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <main+0xb0>)
 8001034:	2100      	movs	r1, #0
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <main+0xb4>)
 8001038:	f007 fbb6 	bl	80087a8 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <main+0xb8>)
 8001040:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001042:	f007 fb7b 	bl	800873c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001046:	e7fe      	b.n	8001046 <main+0x86>
 8001048:	08010628 	.word	0x08010628
 800104c:	20002394 	.word	0x20002394
 8001050:	08010638 	.word	0x08010638
 8001054:	20002628 	.word	0x20002628
 8001058:	08010618 	.word	0x08010618
 800105c:	08001d95 	.word	0x08001d95
 8001060:	2000262c 	.word	0x2000262c
 8001064:	080105d0 	.word	0x080105d0
 8001068:	08001a4d 	.word	0x08001a4d
 800106c:	20002028 	.word	0x20002028
 8001070:	080105f4 	.word	0x080105f4
 8001074:	08001b51 	.word	0x08001b51
 8001078:	20001fec 	.word	0x20001fec

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09a      	sub	sp, #104	; 0x68
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2248      	movs	r2, #72	; 0x48
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00e fd2e 	bl	800faec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <SystemClock_Config+0xa4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010aa:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <SystemClock_Config+0xa4>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <SystemClock_Config+0xa4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010be:	2309      	movs	r3, #9
 80010c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	f107 0320 	add.w	r3, r7, #32
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fad3 	bl	8004688 <HAL_RCC_OscConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80010e8:	f000 fe8a 	bl	8001e00 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80010ec:	234f      	movs	r3, #79	; 0x4f
 80010ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010f0:	2302      	movs	r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fe57 	bl	8004dbc <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001114:	f000 fe74 	bl	8001e00 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3768      	adds	r7, #104	; 0x68
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58000400 	.word	0x58000400

08001124 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_ADC_Init+0x94>)
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <MX_ADC_Init+0x98>)
 800112c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_ADC_Init+0x94>)
 8001130:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001134:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_ADC_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_ADC_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_ADC_Init+0x94>)
 800114a:	2204      	movs	r2, #4
 800114c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_ADC_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_ADC_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_ADC_Init+0x94>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ADC_Init+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_ADC_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_ADC_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_ADC_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_ADC_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_ADC_Init+0x94>)
 800119e:	2200      	movs	r2, #0
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC_Init+0x94>)
 80011a4:	f001 fb36 	bl	8002814 <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80011ae:	f000 fe27 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20002630 	.word	0x20002630
 80011bc:	40012400 	.word	0x40012400

080011c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C2_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C2_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_I2C2_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_I2C2_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C2_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C2_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_I2C2_Init+0x74>)
 80011fc:	f002 fa57 	bl	80036ae <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001206:	f000 fdfb 	bl	8001e00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C2_Init+0x74>)
 800120e:	f002 fc24 	bl	8003a5a <HAL_I2CEx_ConfigAnalogFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001218:	f000 fdf2 	bl	8001e00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C2_Init+0x74>)
 8001220:	f002 fc65 	bl	8003aee <HAL_I2CEx_ConfigDigitalFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 fde9 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000202c 	.word	0x2000202c
 8001238:	40005800 	.word	0x40005800
 800123c:	00300f38 	.word	0x00300f38

08001240 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <MX_LPTIM1_Init+0x54>)
 8001248:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800125c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_LPTIM1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_LPTIM1_Init+0x50>)
 800127e:	f002 fcf3 	bl	8003c68 <HAL_LPTIM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f000 fdba 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20002358 	.word	0x20002358
 8001294:	40007c00 	.word	0x40007c00

08001298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_RTC_Init+0x58>)
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <MX_RTC_Init+0x5c>)
 80012a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_RTC_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_RTC_Init+0x58>)
 80012aa:	227f      	movs	r2, #127	; 0x7f
 80012ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_RTC_Init+0x58>)
 80012b0:	22ff      	movs	r2, #255	; 0xff
 80012b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_RTC_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_RTC_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_RTC_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_RTC_Init+0x58>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_RTC_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_RTC_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_RTC_Init+0x58>)
 80012dc:	f004 fa8a 	bl	80057f4 <HAL_RTC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 fd8b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20002454 	.word	0x20002454
 80012f4:	40002800 	.word	0x40002800

080012f8 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_SUBGHZ_Init+0x20>)
 80012fe:	2210      	movs	r2, #16
 8001300:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_SUBGHZ_Init+0x20>)
 8001304:	f004 fc22 	bl	8005b4c <HAL_SUBGHZ_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800130e:	f000 fd77 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20001ff0 	.word	0x20001ff0

0800131c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_USART1_UART_Init+0x94>)
 8001324:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800132c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001366:	f005 fa1b 	bl	80067a0 <HAL_UART_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001370:	f000 fd46 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_USART1_UART_Init+0x90>)
 8001378:	f007 f8df 	bl	800853a <HAL_UARTEx_SetTxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001382:	f000 fd3d 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001386:	2100      	movs	r1, #0
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800138a:	f007 f914 	bl	80085b6 <HAL_UARTEx_SetRxFifoThreshold>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001394:	f000 fd34 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_USART1_UART_Init+0x90>)
 800139a:	f007 f896 	bl	80084ca <HAL_UARTEx_DisableFifoMode>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 fd2c 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200022c8 	.word	0x200022c8
 80013b0:	40013800 	.word	0x40013800

080013b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_USART2_UART_Init+0x94>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_USART2_UART_Init+0x90>)
 80013fe:	f005 f9cf 	bl	80067a0 <HAL_UART_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fcfa 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140c:	2100      	movs	r1, #0
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001410:	f007 f893 	bl	800853a <HAL_UARTEx_SetTxFifoThreshold>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800141a:	f000 fcf1 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800141e:	2100      	movs	r1, #0
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001422:	f007 f8c8 	bl	80085b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800142c:	f000 fce8 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	; (8001444 <MX_USART2_UART_Init+0x90>)
 8001432:	f007 f84a 	bl	80084ca <HAL_UARTEx_DisableFifoMode>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800143c:	f000 fce0 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20002598 	.word	0x20002598
 8001448:	40004400 	.word	0x40004400

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	2002      	movs	r0, #2
 8001462:	f7ff fd95 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fd92 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	2004      	movs	r0, #4
 800146e:	f7ff fd8f 	bl	8000f90 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|RF_SWITCH_CTRL_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2139      	movs	r1, #57	; 0x39
 8001476:	4821      	ldr	r0, [pc, #132]	; (80014fc <MX_GPIO_Init+0xb0>)
 8001478:	f002 f8e9 	bl	800364e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_0_Pin|GPIO_3_Pin|RF_SWITCH_VDD_Pin|SPI1_NSS_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f248 0123 	movw	r1, #32803	; 0x8023
 8001482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001486:	f002 f8e2 	bl	800364e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin RF_SWITCH_CTRL_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin|RF_SWITCH_CTRL_Pin;
 800148a:	2339      	movs	r3, #57	; 0x39
 800148c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4817      	ldr	r0, [pc, #92]	; (80014fc <MX_GPIO_Init+0xb0>)
 80014a0:	f001 ff5e 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_1_Pin WKUP_Pin */
  GPIO_InitStruct.Pin = GPIO_1_Pin|WKUP_Pin;
 80014a4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80014a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_GPIO_Init+0xb0>)
 80014b8:	f001 ff52 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_0_Pin GPIO_3_Pin RF_SWITCH_VDD_Pin SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = GPIO_0_Pin|GPIO_3_Pin|RF_SWITCH_VDD_Pin|SPI1_NSS_Pin;
 80014bc:	f248 0323 	movw	r3, #32803	; 0x8023
 80014c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 ff43 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_2_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin;
 80014da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIO_2_GPIO_Port, &GPIO_InitStruct);
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_GPIO_Init+0xb4>)
 80014ee:	f001 ff37 	bl	8003360 <HAL_GPIO_Init>

}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800

08001504 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

#ifdef EXAMPLE_TX

	if (huart->Instance == huart2.Instance) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_UART_RxCpltCallback+0x60>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d120      	bne.n	800155a <HAL_UART_RxCpltCallback+0x56>

		uart_rx_buffer[uart_rx_buffer_size++] = uart_2_data;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	b2d1      	uxtb	r1, r2
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 8001522:	7011      	strb	r1, [r2, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 8001528:	7819      	ldrb	r1, [r3, #0]
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_UART_RxCpltCallback+0x6c>)
 800152c:	5499      	strb	r1, [r3, r2]

		if (uart_rx_buffer_size >= sizeof(uart_rx_buffer)) {
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	da02      	bge.n	800153e <HAL_UART_RxCpltCallback+0x3a>

			uart_rx_buffer_size = 0;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_UART_RxCpltCallback+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]

		}

		if (uart_2_data == '\n') {
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d104      	bne.n	8001550 <HAL_UART_RxCpltCallback+0x4c>

			osSemaphoreRelease(mainBinarySemHandle);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_UART_RxCpltCallback+0x70>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f007 fbae 	bl	8008cac <osSemaphoreRelease>

		}

		HAL_UART_Receive_IT(&huart2, &uart_2_data, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	4906      	ldr	r1, [pc, #24]	; (800156c <HAL_UART_RxCpltCallback+0x68>)
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <HAL_UART_RxCpltCallback+0x60>)
 8001556:	f005 fa09 	bl	800696c <HAL_UART_Receive_IT>

	}

#endif

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20002598 	.word	0x20002598
 8001568:	2000032d 	.word	0x2000032d
 800156c:	2000032c 	.word	0x2000032c
 8001570:	20000330 	.word	0x20000330
 8001574:	20002628 	.word	0x20002628

08001578 <uart_usb_in_out_data_send>:

static void uart_usb_in_out_data_send(uint8_t *data, uint16_t size) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]

	uint8_t send_data = 0x00;
 8001584:	2300      	movs	r3, #0
 8001586:	737b      	strb	r3, [r7, #13]

	for (uint16_t i = 0; i < size; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	81fb      	strh	r3, [r7, #14]
 800158c:	e00e      	b.n	80015ac <uart_usb_in_out_data_send+0x34>

		send_data = data[i];
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit(&huart2, &send_data, 1, 10);
 8001598:	f107 010d 	add.w	r1, r7, #13
 800159c:	230a      	movs	r3, #10
 800159e:	2201      	movs	r2, #1
 80015a0:	4807      	ldr	r0, [pc, #28]	; (80015c0 <uart_usb_in_out_data_send+0x48>)
 80015a2:	f005 f94d 	bl	8006840 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < size; i++) {
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	81fb      	strh	r3, [r7, #14]
 80015ac:	89fa      	ldrh	r2, [r7, #14]
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d3ec      	bcc.n	800158e <uart_usb_in_out_data_send+0x16>

	}

}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20002598 	.word	0x20002598

080015c4 <set_uart_usb_in_out_write_string>:

static void set_uart_usb_in_out_write_string(char *data) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

	uart_tx_buffer_length = 0;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <set_uart_usb_in_out_write_string+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	2100      	movs	r1, #0
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <set_uart_usb_in_out_write_string+0x44>)
 80015d8:	f00e fa88 	bl	800faec <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer, "%s\r\n", data);
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	490b      	ldr	r1, [pc, #44]	; (800160c <set_uart_usb_in_out_write_string+0x48>)
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <set_uart_usb_in_out_write_string+0x44>)
 80015e2:	f00e fb5f 	bl	800fca4 <siprintf>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <set_uart_usb_in_out_write_string+0x40>)
 80015ec:	801a      	strh	r2, [r3, #0]

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <set_uart_usb_in_out_write_string+0x40>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <set_uart_usb_in_out_write_string+0x44>)
 80015f6:	f7ff ffbf 	bl	8001578 <uart_usb_in_out_data_send>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200000a0 	.word	0x200000a0
 8001608:	200000a4 	.word	0x200000a4
 800160c:	08010464 	.word	0x08010464

08001610 <set_uart_usb_in_out_find_i2c_address>:

static void set_uart_usb_in_out_find_i2c_address(uint8_t address) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]

	uart_tx_buffer_length = 0;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <set_uart_usb_in_out_find_i2c_address+0x44>)
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	2100      	movs	r1, #0
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <set_uart_usb_in_out_find_i2c_address+0x48>)
 8001626:	f00e fa61 	bl	800faec <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	461a      	mov	r2, r3
 800162e:	490b      	ldr	r1, [pc, #44]	; (800165c <set_uart_usb_in_out_find_i2c_address+0x4c>)
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <set_uart_usb_in_out_find_i2c_address+0x48>)
 8001632:	f00e fb37 	bl	800fca4 <siprintf>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <set_uart_usb_in_out_find_i2c_address+0x44>)
 800163c:	801a      	strh	r2, [r3, #0]
			"I2C Address : %02X\r\n", address);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <set_uart_usb_in_out_find_i2c_address+0x44>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <set_uart_usb_in_out_find_i2c_address+0x48>)
 8001646:	f7ff ff97 	bl	8001578 <uart_usb_in_out_data_send>

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200000a0 	.word	0x200000a0
 8001658:	200000a4 	.word	0x200000a4
 800165c:	0801046c 	.word	0x0801046c

08001660 <set_uart_usb_in_out_mac_address>:

static void set_uart_usb_in_out_mac_address(uint8_t *mac_address) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

	uart_tx_buffer_length = 0;
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 800166e:	22ff      	movs	r2, #255	; 0xff
 8001670:	2100      	movs	r1, #0
 8001672:	4823      	ldr	r0, [pc, #140]	; (8001700 <set_uart_usb_in_out_mac_address+0xa0>)
 8001674:	f00e fa3a 	bl	800faec <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer, "MAC Address : ");
 8001678:	4922      	ldr	r1, [pc, #136]	; (8001704 <set_uart_usb_in_out_mac_address+0xa4>)
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <set_uart_usb_in_out_mac_address+0xa0>)
 800167c:	f00e fb12 	bl	800fca4 <siprintf>
 8001680:	4603      	mov	r3, r0
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 8001686:	801a      	strh	r2, [r3, #0]

	for (uint8_t i = 0; i < 8; i++) {
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e017      	b.n	80016be <set_uart_usb_in_out_mac_address+0x5e>

		uart_tx_buffer_length += sprintf(
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <set_uart_usb_in_out_mac_address+0xa0>)
 8001696:	18d0      	adds	r0, r2, r3
				(char*) uart_tx_buffer + uart_tx_buffer_length, "%02X",
				mac_address[i]);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
		uart_tx_buffer_length += sprintf(
 80016a0:	461a      	mov	r2, r3
 80016a2:	4919      	ldr	r1, [pc, #100]	; (8001708 <set_uart_usb_in_out_mac_address+0xa8>)
 80016a4:	f00e fafe 	bl	800fca4 <siprintf>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016b6:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	3301      	adds	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b07      	cmp	r3, #7
 80016c2:	d9e4      	bls.n	800168e <set_uart_usb_in_out_mac_address+0x2e>

	}

	uart_tx_buffer_length += sprintf(
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <set_uart_usb_in_out_mac_address+0xa0>)
 80016cc:	4413      	add	r3, r2
 80016ce:	490f      	ldr	r1, [pc, #60]	; (800170c <set_uart_usb_in_out_mac_address+0xac>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f00e fae7 	bl	800fca4 <siprintf>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016e4:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "\r\n");

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <set_uart_usb_in_out_mac_address+0x9c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <set_uart_usb_in_out_mac_address+0xa0>)
 80016ee:	f7ff ff43 	bl	8001578 <uart_usb_in_out_data_send>

}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000a0 	.word	0x200000a0
 8001700:	200000a4 	.word	0x200000a4
 8001704:	08010484 	.word	0x08010484
 8001708:	08010494 	.word	0x08010494
 800170c:	0801049c 	.word	0x0801049c

08001710 <set_uart_usb_in_out_voltage>:

static void set_uart_usb_in_out_voltage(int16_t voltage) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]

	uart_tx_buffer_length = 0;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <set_uart_usb_in_out_voltage+0x44>)
 800171c:	2200      	movs	r2, #0
 800171e:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 8001720:	22ff      	movs	r2, #255	; 0xff
 8001722:	2100      	movs	r1, #0
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <set_uart_usb_in_out_voltage+0x48>)
 8001726:	f00e f9e1 	bl	800faec <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 800172a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172e:	461a      	mov	r2, r3
 8001730:	490a      	ldr	r1, [pc, #40]	; (800175c <set_uart_usb_in_out_voltage+0x4c>)
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <set_uart_usb_in_out_voltage+0x48>)
 8001734:	f00e fab6 	bl	800fca4 <siprintf>
 8001738:	4603      	mov	r3, r0
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <set_uart_usb_in_out_voltage+0x44>)
 800173e:	801a      	strh	r2, [r3, #0]
			"Voltage : %d V\r\n", voltage);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <set_uart_usb_in_out_voltage+0x44>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <set_uart_usb_in_out_voltage+0x48>)
 8001748:	f7ff ff16 	bl	8001578 <uart_usb_in_out_data_send>

}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000a0 	.word	0x200000a0
 8001758:	200000a4 	.word	0x200000a4
 800175c:	080104a0 	.word	0x080104a0

08001760 <set_uart_usb_in_out_payload>:

static void set_uart_usb_in_out_payload(
		radio_packet_protocol_t receive_radio_packet, int16_t rssi, int8_t snr) {
 8001760:	b084      	sub	sp, #16
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	f107 0c10 	add.w	ip, r7, #16
 800176c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uart_tx_buffer_length = 0;
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
	memset(uart_tx_buffer, 0x00, sizeof(uart_tx_buffer));
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	2100      	movs	r1, #0
 800177a:	486e      	ldr	r0, [pc, #440]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 800177c:	f00e f9b6 	bl	800faec <memset>

	uart_tx_buffer_length = sprintf((char*) uart_tx_buffer,
 8001780:	496d      	ldr	r1, [pc, #436]	; (8001938 <set_uart_usb_in_out_payload+0x1d8>)
 8001782:	486c      	ldr	r0, [pc, #432]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 8001784:	f00e fa8e 	bl	800fca4 <siprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800178e:	801a      	strh	r2, [r3, #0]
			"\r\nPacket Receive\r\n");

	uint16_t company_id = receive_radio_packet.Packet.company_id[0] << 8;
 8001790:	7c3b      	ldrb	r3, [r7, #16]
 8001792:	b29b      	uxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	80bb      	strh	r3, [r7, #4]
	company_id |= receive_radio_packet.Packet.company_id[1];
 8001798:	7c7b      	ldrb	r3, [r7, #17]
 800179a:	b29a      	uxth	r2, r3
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	80bb      	strh	r3, [r7, #4]

	uart_tx_buffer_length += sprintf(
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b62      	ldr	r3, [pc, #392]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 80017aa:	4413      	add	r3, r2
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	4963      	ldr	r1, [pc, #396]	; (800193c <set_uart_usb_in_out_payload+0x1dc>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00e fa77 	bl	800fca4 <siprintf>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017c4:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Company ID : %d\r\n", company_id);

	uint16_t device_id = receive_radio_packet.Packet.device_id[0] << 8;
 80017c6:	7cbb      	ldrb	r3, [r7, #18]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	807b      	strh	r3, [r7, #2]
	device_id |= receive_radio_packet.Packet.device_id[1];
 80017ce:	7cfb      	ldrb	r3, [r7, #19]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	887b      	ldrh	r3, [r7, #2]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	807b      	strh	r3, [r7, #2]

	uart_tx_buffer_length += sprintf(
 80017d8:	4b55      	ldr	r3, [pc, #340]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 80017e0:	4413      	add	r3, r2
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	4956      	ldr	r1, [pc, #344]	; (8001940 <set_uart_usb_in_out_payload+0x1e0>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00e fa5c 	bl	800fca4 <siprintf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017fa:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Device ID : %d\r\n", device_id);

	uart_tx_buffer_length += sprintf(
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 8001804:	4413      	add	r3, r2
 8001806:	494f      	ldr	r1, [pc, #316]	; (8001944 <set_uart_usb_in_out_payload+0x1e4>)
 8001808:	4618      	mov	r0, r3
 800180a:	f00e fa4b 	bl	800fca4 <siprintf>
 800180e:	4603      	mov	r3, r0
 8001810:	b29a      	uxth	r2, r3
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800181c:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "MAC Address : ");

	for (uint8_t i = 0; i < 8; i++) {
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	e018      	b.n	8001856 <set_uart_usb_in_out_payload+0xf6>

		uart_tx_buffer_length += sprintf(
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 800182c:	18d0      	adds	r0, r2, r3
				(char*) uart_tx_buffer + uart_tx_buffer_length, "%02X",
				receive_radio_packet.Packet.mac_address[i]);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f107 0210 	add.w	r2, r7, #16
 8001834:	4413      	add	r3, r2
 8001836:	791b      	ldrb	r3, [r3, #4]
		uart_tx_buffer_length += sprintf(
 8001838:	461a      	mov	r2, r3
 800183a:	4943      	ldr	r1, [pc, #268]	; (8001948 <set_uart_usb_in_out_payload+0x1e8>)
 800183c:	f00e fa32 	bl	800fca4 <siprintf>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4413      	add	r3, r2
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800184e:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++) {
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	3301      	adds	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b07      	cmp	r3, #7
 800185a:	d9e3      	bls.n	8001824 <set_uart_usb_in_out_payload+0xc4>

	}

	uart_tx_buffer_length += sprintf(
 800185c:	4b34      	ldr	r3, [pc, #208]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b34      	ldr	r3, [pc, #208]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 8001864:	4413      	add	r3, r2
 8001866:	4939      	ldr	r1, [pc, #228]	; (800194c <set_uart_usb_in_out_payload+0x1ec>)
 8001868:	4618      	mov	r0, r3
 800186a:	f00e fa1b 	bl	800fca4 <siprintf>
 800186e:	4603      	mov	r3, r0
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800187c:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "\r\n");

	uart_tx_buffer_length += sprintf(
 800187e:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 8001886:	4413      	add	r3, r2
			(char*) uart_tx_buffer + uart_tx_buffer_length,
			"Control Number : %d\r\n",
			receive_radio_packet.Packet.control_number);
 8001888:	7f3a      	ldrb	r2, [r7, #28]
	uart_tx_buffer_length += sprintf(
 800188a:	4931      	ldr	r1, [pc, #196]	; (8001950 <set_uart_usb_in_out_payload+0x1f0>)
 800188c:	4618      	mov	r0, r3
 800188e:	f00e fa09 	bl	800fca4 <siprintf>
 8001892:	4603      	mov	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	b29a      	uxth	r2, r3
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018a0:	801a      	strh	r2, [r3, #0]

	uart_tx_buffer_length += sprintf(
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 80018aa:	4413      	add	r3, r2
 80018ac:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80018b0:	4928      	ldr	r1, [pc, #160]	; (8001954 <set_uart_usb_in_out_payload+0x1f4>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f00e f9f6 	bl	800fca4 <siprintf>
 80018b8:	4603      	mov	r3, r0
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018c6:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "RSSI : %d\r\n",
			rssi);

	uart_tx_buffer_length += sprintf(
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 80018d0:	4413      	add	r3, r2
 80018d2:	f997 2094 	ldrsb.w	r2, [r7, #148]	; 0x94
 80018d6:	4920      	ldr	r1, [pc, #128]	; (8001958 <set_uart_usb_in_out_payload+0x1f8>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f00e f9e3 	bl	800fca4 <siprintf>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018ec:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "SNR : %d\r\n",
			snr);

	uart_tx_buffer_length += sprintf(
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 80018f6:	4413      	add	r3, r2
 80018f8:	f107 021d 	add.w	r2, r7, #29
 80018fc:	4917      	ldr	r1, [pc, #92]	; (800195c <set_uart_usb_in_out_payload+0x1fc>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f00e f9d0 	bl	800fca4 <siprintf>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001912:	801a      	strh	r2, [r3, #0]
			(char*) uart_tx_buffer + uart_tx_buffer_length, "Payload : %s\r\n",
			receive_radio_packet.Packet.paylaod);

	uart_usb_in_out_data_send(uart_tx_buffer, uart_tx_buffer_length);
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <set_uart_usb_in_out_payload+0x1d0>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	; (8001934 <set_uart_usb_in_out_payload+0x1d4>)
 800191c:	f7ff fe2c 	bl	8001578 <uart_usb_in_out_data_send>

}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800192a:	b004      	add	sp, #16
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200000a0 	.word	0x200000a0
 8001934:	200000a4 	.word	0x200000a4
 8001938:	080104b4 	.word	0x080104b4
 800193c:	080104c8 	.word	0x080104c8
 8001940:	080104dc 	.word	0x080104dc
 8001944:	08010484 	.word	0x08010484
 8001948:	08010494 	.word	0x08010494
 800194c:	0801049c 	.word	0x0801049c
 8001950:	080104f0 	.word	0x080104f0
 8001954:	08010508 	.word	0x08010508
 8001958:	08010514 	.word	0x08010514
 800195c:	08010520 	.word	0x08010520

08001960 <get_i2c_scan_address>:

static uint8_t get_i2c_scan_address() {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0

	uint8_t count = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef result;

	for (uint8_t i = 1; i < 128; i++) {
 800196a:	2301      	movs	r3, #1
 800196c:	71bb      	strb	r3, [r7, #6]
 800196e:	e017      	b.n	80019a0 <get_i2c_scan_address+0x40>

		result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t) (i << 1), 2, 2);
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	b29b      	uxth	r3, r3
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	b299      	uxth	r1, r3
 8001978:	2302      	movs	r3, #2
 800197a:	2202      	movs	r2, #2
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <get_i2c_scan_address+0x54>)
 800197e:	f001 ff25 	bl	80037cc <HAL_I2C_IsDeviceReady>
 8001982:	4603      	mov	r3, r0
 8001984:	717b      	strb	r3, [r7, #5]

		if (result == HAL_OK) {
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d106      	bne.n	800199a <get_i2c_scan_address+0x3a>

			set_uart_usb_in_out_find_i2c_address(i);
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fe3e 	bl	8001610 <set_uart_usb_in_out_find_i2c_address>

			count++;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3301      	adds	r3, #1
 8001998:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 1; i < 128; i++) {
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	3301      	adds	r3, #1
 800199e:	71bb      	strb	r3, [r7, #6]
 80019a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dae3      	bge.n	8001970 <get_i2c_scan_address+0x10>

		}

	}

	return count;
 80019a8:	79fb      	ldrb	r3, [r7, #7]

}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000202c 	.word	0x2000202c

080019b8 <get_voltage_level>:

static void get_voltage_level() {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc);
 80019be:	4822      	ldr	r0, [pc, #136]	; (8001a48 <get_voltage_level+0x90>)
 80019c0:	f001 f8ee 	bl	8002ba0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc, 10);
 80019c4:	210a      	movs	r1, #10
 80019c6:	4820      	ldr	r0, [pc, #128]	; (8001a48 <get_voltage_level+0x90>)
 80019c8:	f001 f962 	bl	8002c90 <HAL_ADC_PollForConversion>
	float battery_adc = HAL_ADC_GetValue(&hadc);
 80019cc:	481e      	ldr	r0, [pc, #120]	; (8001a48 <get_voltage_level+0x90>)
 80019ce:	f001 f9f6 	bl	8002dbe <HAL_ADC_GetValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f8f7 	bl	8000bc8 <__aeabi_ui2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	607b      	str	r3, [r7, #4]
	battery_adc = battery_adc * 3.3 / 4095;
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fd82 	bl	80004e8 <__aeabi_f2d>
 80019e4:	a314      	add	r3, pc, #80	; (adr r3, 8001a38 <get_voltage_level+0x80>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fdd5 	bl	8000598 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	a312      	add	r3, pc, #72	; (adr r3, 8001a40 <get_voltage_level+0x88>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fef6 	bl	80007ec <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7fe ffd8 	bl	80009bc <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	607b      	str	r3, [r7, #4]
	battery_adc *= 2;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f827 	bl	8000a68 <__addsf3>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	607b      	str	r3, [r7, #4]

	HAL_ADC_Stop(&hadc);
 8001a1e:	480a      	ldr	r0, [pc, #40]	; (8001a48 <get_voltage_level+0x90>)
 8001a20:	f001 f904 	bl	8002c2c <HAL_ADC_Stop>

	set_uart_usb_in_out_voltage((int16_t) 4);
 8001a24:	2004      	movs	r0, #4
 8001a26:	f7ff fe73 	bl	8001710 <set_uart_usb_in_out_voltage>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	f3af 8000 	nop.w
 8001a38:	66666666 	.word	0x66666666
 8001a3c:	400a6666 	.word	0x400a6666
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40affe00 	.word	0x40affe00
 8001a48:	20002630 	.word	0x20002630

08001a4c <StartRadioTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRadioTask */
void StartRadioTask(void *argument)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* init code for SubGHz_Phy */
  MX_SubGHz_Phy_Init();
 8001a54:	f00d fb84 	bl	800f160 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 5 */

	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_Port, RF_SWITCH_VDD_Pin,
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f001 fdf5 	bl	800364e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_vdd_pin(RF_SWITCH_VDD_GPIO_Port,
 8001a64:	2120      	movs	r1, #32
 8001a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6a:	f000 f9cf 	bl	8001e0c <set_radio_pin_manager_rf_switch_vdd_pin>
	RF_SWITCH_VDD_Pin);

	HAL_GPIO_WritePin(RF_SWITCH_CTRL_GPIO_Port, RF_SWITCH_CTRL_Pin,
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2101      	movs	r1, #1
 8001a72:	482d      	ldr	r0, [pc, #180]	; (8001b28 <StartRadioTask+0xdc>)
 8001a74:	f001 fdeb 	bl	800364e <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	set_radio_pin_manager_rf_switch_pin(RF_SWITCH_CTRL_GPIO_Port,
 8001a78:	2101      	movs	r1, #1
 8001a7a:	482b      	ldr	r0, [pc, #172]	; (8001b28 <StartRadioTask+0xdc>)
 8001a7c:	f000 f9dc 	bl	8001e38 <set_radio_pin_manager_rf_switch_pin>
	RF_SWITCH_CTRL_Pin);

	/* Infinite loop */
	for (;;) {

		osSemaphoreAcquire(radioBinarySemHandle, osWaitForever);
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <StartRadioTask+0xe0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f007 f8a9 	bl	8008be0 <osSemaphoreAcquire>

		radio_timer_count = 0;
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <StartRadioTask+0xe4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]
		radio_state = RADIO_TX_START;
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <StartRadioTask+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
		MX_SubGhz_Phy_SendPacket(radio_tx_buffer, sizeof(radio_tx_buffer));
 8001a9a:	2180      	movs	r1, #128	; 0x80
 8001a9c:	4826      	ldr	r0, [pc, #152]	; (8001b38 <StartRadioTask+0xec>)
 8001a9e:	f00d fbbf 	bl	800f220 <MX_SubGhz_Phy_SendPacket>

		osSemaphoreAcquire(radioBinarySemHandle, RADIO_TX_TIMEOUT_COUNT);
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <StartRadioTask+0xe0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f007 f898 	bl	8008be0 <osSemaphoreAcquire>

		if (MX_SubGhz_Phy_Get_SendPacket_State() == 0x01) {
 8001ab0:	f00d fbca 	bl	800f248 <MX_SubGhz_Phy_Get_SendPacket_State>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d127      	bne.n	8001b0a <StartRadioTask+0xbe>

			radio_timer_count = 0;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <StartRadioTask+0xe4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	801a      	strh	r2, [r3, #0]
			radio_state = RADIO_RX_START;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <StartRadioTask+0xe8>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]

			radio_rx_rssi = 0;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <StartRadioTask+0xf0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	801a      	strh	r2, [r3, #0]
			radio_rx_snr = 0;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <StartRadioTask+0xf4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
			radio_rx_buffer_size = 0;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <StartRadioTask+0xf8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
			memset(radio_rx_buffer, 0x00, sizeof(radio_rx_buffer));
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	2100      	movs	r1, #0
 8001adc:	481a      	ldr	r0, [pc, #104]	; (8001b48 <StartRadioTask+0xfc>)
 8001ade:	f00e f805 	bl	800faec <memset>

			MX_SubGhz_Phy_RecvicePacket();
 8001ae2:	f00d fbbb 	bl	800f25c <MX_SubGhz_Phy_RecvicePacket>

			osSemaphoreAcquire(radioBinarySemHandle, RADIO_RX_TIMEOUT_COUNT);
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <StartRadioTask+0xe0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 f876 	bl	8008be0 <osSemaphoreAcquire>

			if (MX_SubGhz_Phy_Get_RecvicePacket_State() == 0x01) {
 8001af4:	f00d fbbe 	bl	800f274 <MX_SubGhz_Phy_Get_RecvicePacket_State>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d105      	bne.n	8001b0a <StartRadioTask+0xbe>

				MX_SubGhz_Phy_Get_RecvicePacket(&radio_rx_rssi, &radio_rx_snr,
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <StartRadioTask+0xf8>)
 8001b00:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <StartRadioTask+0xfc>)
 8001b02:	490f      	ldr	r1, [pc, #60]	; (8001b40 <StartRadioTask+0xf4>)
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <StartRadioTask+0xf0>)
 8001b06:	f00d fbbf 	bl	800f288 <MX_SubGhz_Phy_Get_RecvicePacket>

			}

		}

		radio_timer_count = 0;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <StartRadioTask+0xe4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
		radio_state = RADIO_SLEEP;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <StartRadioTask+0xe8>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	701a      	strb	r2, [r3, #0]
		MX_SubGhz_Phy_Radio_Sleep();
 8001b16:	f00d fb7d 	bl	800f214 <MX_SubGhz_Phy_Radio_Sleep>

		osSemaphoreRelease(mainBinarySemHandle);
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <StartRadioTask+0x100>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 f8c4 	bl	8008cac <osSemaphoreRelease>
		osSemaphoreAcquire(radioBinarySemHandle, osWaitForever);
 8001b24:	e7ac      	b.n	8001a80 <StartRadioTask+0x34>
 8001b26:	bf00      	nop
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	20002394 	.word	0x20002394
 8001b30:	20000224 	.word	0x20000224
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000228 	.word	0x20000228
 8001b3c:	200002a8 	.word	0x200002a8
 8001b40:	200002aa 	.word	0x200002aa
 8001b44:	200002ab 	.word	0x200002ab
 8001b48:	200002ac 	.word	0x200002ac
 8001b4c:	20002628 	.word	0x20002628

08001b50 <StartMainTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b0a5      	sub	sp, #148	; 0x94
 8001b54:	af1e      	add	r7, sp, #120	; 0x78
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */

	HAL_GPIO_WritePin(GPIO_LED_0_Port, GPIO_LED_0_Pin, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	4876      	ldr	r0, [pc, #472]	; (8001d38 <StartMainTask+0x1e8>)
 8001b5e:	f001 fd76 	bl	800364e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_LED_1_Port, GPIO_LED_1_Pin, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2108      	movs	r1, #8
 8001b66:	4874      	ldr	r0, [pc, #464]	; (8001d38 <StartMainTask+0x1e8>)
 8001b68:	f001 fd71 	bl	800364e <HAL_GPIO_WritePin>

	uint32_t ID1 = HAL_GetUIDw0();
 8001b6c:	f000 fd4e 	bl	800260c <HAL_GetUIDw0>
 8001b70:	6178      	str	r0, [r7, #20]
	uint32_t ID2 = HAL_GetUIDw1();
 8001b72:	f000 fd55 	bl	8002620 <HAL_GetUIDw1>
 8001b76:	6138      	str	r0, [r7, #16]
	uint32_t ID3 = HAL_GetUIDw2();
 8001b78:	f000 fd5c 	bl	8002634 <HAL_GetUIDw2>
 8001b7c:	60f8      	str	r0, [r7, #12]

	mac_address[7] = (ID1 + ID3) >> 24;
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	0e1b      	lsrs	r3, r3, #24
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <StartMainTask+0x1ec>)
 8001b8a:	71da      	strb	r2, [r3, #7]
	mac_address[6] = (ID1 + ID3) >> 16;
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b69      	ldr	r3, [pc, #420]	; (8001d3c <StartMainTask+0x1ec>)
 8001b98:	719a      	strb	r2, [r3, #6]
	mac_address[5] = (ID1 + ID3) >> 8;
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <StartMainTask+0x1ec>)
 8001ba6:	715a      	strb	r2, [r3, #5]
	mac_address[4] = (ID1 + ID3);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <StartMainTask+0x1ec>)
 8001bb6:	711a      	strb	r2, [r3, #4]
	mac_address[3] = ID2 >> 24;
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	0e1b      	lsrs	r3, r3, #24
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <StartMainTask+0x1ec>)
 8001bc0:	70da      	strb	r2, [r3, #3]
	mac_address[2] = ID2 >> 16;
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <StartMainTask+0x1ec>)
 8001bca:	709a      	strb	r2, [r3, #2]
	mac_address[1] = ID2 >> 8;
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <StartMainTask+0x1ec>)
 8001bd4:	705a      	strb	r2, [r3, #1]
	mac_address[0] = ID2;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <StartMainTask+0x1ec>)
 8001bdc:	701a      	strb	r2, [r3, #0]

	radio_packet_protocol.Packet.company_id[0] = COMPANY_ID >> 8;
 8001bde:	2300      	movs	r3, #0
 8001be0:	0a1b      	lsrs	r3, r3, #8
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <StartMainTask+0x1f0>)
 8001be8:	701a      	strb	r2, [r3, #0]
	radio_packet_protocol.Packet.company_id[1] = COMPANY_ID;
 8001bea:	2300      	movs	r3, #0
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b54      	ldr	r3, [pc, #336]	; (8001d40 <StartMainTask+0x1f0>)
 8001bf0:	705a      	strb	r2, [r3, #1]

	radio_packet_protocol.Packet.device_id[0] = DEVICE_ID >> 8;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b51      	ldr	r3, [pc, #324]	; (8001d40 <StartMainTask+0x1f0>)
 8001bfc:	709a      	strb	r2, [r3, #2]
	radio_packet_protocol.Packet.device_id[1] = DEVICE_ID;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <StartMainTask+0x1f0>)
 8001c04:	70da      	strb	r2, [r3, #3]

	memcpy(radio_packet_protocol.Packet.mac_address, mac_address, 8);
 8001c06:	4b4e      	ldr	r3, [pc, #312]	; (8001d40 <StartMainTask+0x1f0>)
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <StartMainTask+0x1ec>)
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	e883 0003 	stmia.w	r3, {r0, r1}

	radio_packet_protocol.Packet.control_number = 0;
 8001c14:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <StartMainTask+0x1f0>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	731a      	strb	r2, [r3, #12]

	set_uart_usb_in_out_write_string("\r\n\r\n");
 8001c1a:	484a      	ldr	r0, [pc, #296]	; (8001d44 <StartMainTask+0x1f4>)
 8001c1c:	f7ff fcd2 	bl	80015c4 <set_uart_usb_in_out_write_string>

#ifdef EXAMPLE_TX

	set_uart_usb_in_out_write_string("Start AxDen TX Example");
 8001c20:	4849      	ldr	r0, [pc, #292]	; (8001d48 <StartMainTask+0x1f8>)
 8001c22:	f7ff fccf 	bl	80015c4 <set_uart_usb_in_out_write_string>

    set_uart_usb_in_out_write_string("Start AxDen RX Example");

#endif

	set_uart_usb_in_out_mac_address(mac_address);
 8001c26:	4845      	ldr	r0, [pc, #276]	; (8001d3c <StartMainTask+0x1ec>)
 8001c28:	f7ff fd1a 	bl	8001660 <set_uart_usb_in_out_mac_address>

	set_uart_usb_in_out_write_string("Start I2C scan");
 8001c2c:	4847      	ldr	r0, [pc, #284]	; (8001d4c <StartMainTask+0x1fc>)
 8001c2e:	f7ff fcc9 	bl	80015c4 <set_uart_usb_in_out_write_string>

	get_i2c_scan_address();
 8001c32:	f7ff fe95 	bl	8001960 <get_i2c_scan_address>

	get_voltage_level();
 8001c36:	f7ff febf 	bl	80019b8 <get_voltage_level>

#ifdef EXAMPLE_TX

	HAL_UART_Receive_IT(&huart2, &uart_2_data, 1);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4944      	ldr	r1, [pc, #272]	; (8001d50 <StartMainTask+0x200>)
 8001c3e:	4845      	ldr	r0, [pc, #276]	; (8001d54 <StartMainTask+0x204>)
 8001c40:	f004 fe94 	bl	800696c <HAL_UART_Receive_IT>

#endif

	if (mainTimerHandle != NULL) {
 8001c44:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <StartMainTask+0x208>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <StartMainTask+0x108>

		osTimerStart(mainTimerHandle, 100);
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <StartMainTask+0x208>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2164      	movs	r1, #100	; 0x64
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fee8 	bl	8008a28 <osTimerStart>
	}

	/* Infinite loop */
	for (;;) {

		osSemaphoreAcquire(mainBinarySemHandle, osWaitForever);
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <StartMainTask+0x20c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 ffbd 	bl	8008be0 <osSemaphoreAcquire>

		set_uart_usb_in_out_write_string("Start TX");
 8001c66:	483e      	ldr	r0, [pc, #248]	; (8001d60 <StartMainTask+0x210>)
 8001c68:	f7ff fcac 	bl	80015c4 <set_uart_usb_in_out_write_string>

		memset(radio_packet_protocol.Packet.paylaod, 0x00,
 8001c6c:	2273      	movs	r2, #115	; 0x73
 8001c6e:	2100      	movs	r1, #0
 8001c70:	483c      	ldr	r0, [pc, #240]	; (8001d64 <StartMainTask+0x214>)
 8001c72:	f00d ff3b 	bl	800faec <memset>
				sizeof(radio_packet_protocol.Packet.paylaod));

		radio_packet_protocol_size = PACKET_HEAD_SIZE;
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <StartMainTask+0x218>)
 8001c78:	220d      	movs	r2, #13
 8001c7a:	701a      	strb	r2, [r3, #0]
		radio_packet_protocol_size += uart_rx_buffer_size;
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <StartMainTask+0x218>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <StartMainTask+0x21c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4413      	add	r3, r2
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <StartMainTask+0x218>)
 8001c8a:	701a      	strb	r2, [r3, #0]
		memcpy(radio_packet_protocol.Packet.paylaod, uart_rx_buffer,
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <StartMainTask+0x21c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4937      	ldr	r1, [pc, #220]	; (8001d70 <StartMainTask+0x220>)
 8001c94:	4833      	ldr	r0, [pc, #204]	; (8001d64 <StartMainTask+0x214>)
 8001c96:	f00d ff1b 	bl	800fad0 <memcpy>
				uart_rx_buffer_size);

		radio_tx_buffer_size = 0;
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <StartMainTask+0x224>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
		memset(radio_tx_buffer, 0x0, sizeof(radio_tx_buffer));
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4834      	ldr	r0, [pc, #208]	; (8001d78 <StartMainTask+0x228>)
 8001ca6:	f00d ff21 	bl	800faec <memset>

		radio_tx_buffer_size = radio_packet_protocol_size;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <StartMainTask+0x218>)
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <StartMainTask+0x224>)
 8001cb0:	701a      	strb	r2, [r3, #0]
		memcpy(radio_tx_buffer, radio_packet_protocol.buffer,
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <StartMainTask+0x218>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4921      	ldr	r1, [pc, #132]	; (8001d40 <StartMainTask+0x1f0>)
 8001cba:	482f      	ldr	r0, [pc, #188]	; (8001d78 <StartMainTask+0x228>)
 8001cbc:	f00d ff08 	bl	800fad0 <memcpy>
				radio_packet_protocol_size);

		//TX Data
		osSemaphoreRelease(radioBinarySemHandle);
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <StartMainTask+0x22c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 fff1 	bl	8008cac <osSemaphoreRelease>

		//Print RX data
		osSemaphoreAcquire(mainBinarySemHandle, osWaitForever);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <StartMainTask+0x20c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 ff84 	bl	8008be0 <osSemaphoreAcquire>

		if (radio_rx_buffer_size > 0) {
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <StartMainTask+0x230>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <StartMainTask+0x1d2>

			memset(&radio_packet_protocol, 0x00,
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4816      	ldr	r0, [pc, #88]	; (8001d40 <StartMainTask+0x1f0>)
 8001ce6:	f00d ff01 	bl	800faec <memset>
					sizeof(radio_packet_protocol_t));

			memcpy(radio_packet_protocol.buffer, radio_rx_buffer,
 8001cea:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <StartMainTask+0x230>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4924      	ldr	r1, [pc, #144]	; (8001d84 <StartMainTask+0x234>)
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <StartMainTask+0x1f0>)
 8001cf4:	f00d feec 	bl	800fad0 <memcpy>
					radio_rx_buffer_size);

			set_uart_usb_in_out_payload(radio_packet_protocol, radio_rx_rssi,
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <StartMainTask+0x238>)
 8001cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfe:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <StartMainTask+0x23c>)
 8001d00:	f992 2000 	ldrsb.w	r2, [r2]
 8001d04:	4c0e      	ldr	r4, [pc, #56]	; (8001d40 <StartMainTask+0x1f0>)
 8001d06:	921d      	str	r2, [sp, #116]	; 0x74
 8001d08:	931c      	str	r3, [sp, #112]	; 0x70
 8001d0a:	4668      	mov	r0, sp
 8001d0c:	f104 0310 	add.w	r3, r4, #16
 8001d10:	2270      	movs	r2, #112	; 0x70
 8001d12:	4619      	mov	r1, r3
 8001d14:	f00d fedc 	bl	800fad0 <memcpy>
 8001d18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d1c:	f7ff fd20 	bl	8001760 <set_uart_usb_in_out_payload>
 8001d20:	e002      	b.n	8001d28 <StartMainTask+0x1d8>
					radio_rx_snr);

		} else {

			set_uart_usb_in_out_write_string("RX Timeout");
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <StartMainTask+0x240>)
 8001d24:	f7ff fc4e 	bl	80015c4 <set_uart_usb_in_out_write_string>

		}

		HAL_GPIO_TogglePin(GPIO_LED_2_Port, GPIO_LED_2_Pin);
 8001d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d30:	f001 fca4 	bl	800367c <HAL_GPIO_TogglePin>
		osSemaphoreAcquire(mainBinarySemHandle, osWaitForever);
 8001d34:	e790      	b.n	8001c58 <StartMainTask+0x108>
 8001d36:	bf00      	nop
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	20000098 	.word	0x20000098
 8001d40:	200001a4 	.word	0x200001a4
 8001d44:	08010530 	.word	0x08010530
 8001d48:	08010538 	.word	0x08010538
 8001d4c:	08010550 	.word	0x08010550
 8001d50:	2000032c 	.word	0x2000032c
 8001d54:	20002598 	.word	0x20002598
 8001d58:	2000262c 	.word	0x2000262c
 8001d5c:	20002628 	.word	0x20002628
 8001d60:	08010560 	.word	0x08010560
 8001d64:	200001b1 	.word	0x200001b1
 8001d68:	200001a3 	.word	0x200001a3
 8001d6c:	2000032d 	.word	0x2000032d
 8001d70:	20000330 	.word	0x20000330
 8001d74:	20000226 	.word	0x20000226
 8001d78:	20000228 	.word	0x20000228
 8001d7c:	20002394 	.word	0x20002394
 8001d80:	200002ab 	.word	0x200002ab
 8001d84:	200002ac 	.word	0x200002ac
 8001d88:	200002a8 	.word	0x200002a8
 8001d8c:	200002aa 	.word	0x200002aa
 8001d90:	0801056c 	.word	0x0801056c

08001d94 <mainTimerCallback>:
  /* USER CODE END StartMainTask */
}

/* mainTimerCallback function */
void mainTimerCallback(void *argument)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainTimerCallback */

	if (HAL_GPIO_ReadPin(GPIO_BUTTON_0_Port, GPIO_BUTTON_0_Pin) == 0x01) {
 8001d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <mainTimerCallback+0x40>)
 8001da2:	f001 fc3d 	bl	8003620 <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d103      	bne.n	8001db4 <mainTimerCallback+0x20>

		HAL_GPIO_TogglePin(GPIO_LED_0_Port, GPIO_LED_0_Pin);
 8001dac:	2110      	movs	r1, #16
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <mainTimerCallback+0x40>)
 8001db0:	f001 fc64 	bl	800367c <HAL_GPIO_TogglePin>

	}

	if (HAL_GPIO_ReadPin(GPIO_BUTTON_1_Port, GPIO_BUTTON_1_Pin) == 0x01) {
 8001db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <mainTimerCallback+0x44>)
 8001dba:	f001 fc31 	bl	8003620 <HAL_GPIO_ReadPin>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d103      	bne.n	8001dcc <mainTimerCallback+0x38>

		HAL_GPIO_TogglePin(GPIO_LED_1_Port, GPIO_LED_1_Pin);
 8001dc4:	2108      	movs	r1, #8
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <mainTimerCallback+0x40>)
 8001dc8:	f001 fc58 	bl	800367c <HAL_GPIO_TogglePin>

	}

  /* USER CODE END mainTimerCallback */
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800

08001ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dee:	f000 fbcd 	bl	800258c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40014800 	.word	0x40014800

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e08:	e7fe      	b.n	8001e08 <Error_Handler+0x8>
	...

08001e0c <set_radio_pin_manager_rf_switch_vdd_pin>:
static uint16_t RF_SWITCH_VDD_GPIO_PIN;

static GPIO_TypeDef *RF_SWITCH_GPIO_PORT;
static uint16_t RF_SWITCH_GPIO_PIN;

void set_radio_pin_manager_rf_switch_vdd_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_VDD_GPIO_PORT = port;
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <set_radio_pin_manager_rf_switch_vdd_pin+0x24>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
	RF_SWITCH_VDD_GPIO_PIN = pin;
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <set_radio_pin_manager_rf_switch_vdd_pin+0x28>)
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	8013      	strh	r3, [r2, #0]

}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	200003b0 	.word	0x200003b0
 8001e34:	200003b4 	.word	0x200003b4

08001e38 <set_radio_pin_manager_rf_switch_pin>:
	HAL_GPIO_WritePin(RF_SWITCH_VDD_GPIO_PORT, RF_SWITCH_VDD_GPIO_PIN,
			GPIO_PIN_RESET);

}

void set_radio_pin_manager_rf_switch_pin(GPIO_TypeDef *port, uint16_t pin) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]

	RF_SWITCH_GPIO_PORT = port;
 8001e44:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <set_radio_pin_manager_rf_switch_pin+0x24>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
	RF_SWITCH_GPIO_PIN = pin;
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <set_radio_pin_manager_rf_switch_pin+0x28>)
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	8013      	strh	r3, [r2, #0]

}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200003b8 	.word	0x200003b8
 8001e60:	200003bc 	.word	0x200003bc

08001e64 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <LL_AHB2_GRP1_EnableClock>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f08:	68fb      	ldr	r3, [r7, #12]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f38:	68fb      	ldr	r3, [r7, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f06f 0001 	mvn.w	r0, #1
 8001f50:	f001 f921 	bl	8003196 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <HAL_ADC_MspInit+0x74>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d123      	bne.n	8001fc2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f7e:	f7ff ffb1 	bl	8001ee4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2002      	movs	r0, #2
 8001f84:	f7ff ff7e 	bl	8001e84 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff ff7b 	bl	8001e84 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    PA10     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = ADC_0_Pin;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f92:	2303      	movs	r3, #3
 8001f94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_0_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <HAL_ADC_MspInit+0x78>)
 8001fa2:	f001 f9dd 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin;
 8001fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fac:	2303      	movs	r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbe:	f001 f9cf 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40012400 	.word	0x40012400
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b096      	sub	sp, #88	; 0x58
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	2238      	movs	r2, #56	; 0x38
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00d fd79 	bl	800faec <memset>
  if(hi2c->Instance==I2C2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_I2C_MspInit+0x88>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d127      	bne.n	8002054 <HAL_I2C_MspInit+0x80>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002008:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fad4 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800201e:	f7ff feef 	bl	8001e00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff ff2e 	bl	8001e84 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA11     ------> I2C2_SDA
    PA12     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002028:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800202c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800203a:	2304      	movs	r3, #4
 800203c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002048:	f001 f98a 	bl	8003360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800204c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002050:	f7ff ff30 	bl	8001eb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3758      	adds	r7, #88	; 0x58
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40005800 	.word	0x40005800

08002060 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b090      	sub	sp, #64	; 0x40
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	2238      	movs	r2, #56	; 0x38
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f00d fd3b 	bl	800faec <memset>
  if(hlptim->Instance==LPTIM1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <HAL_LPTIM_MspInit+0x50>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d113      	bne.n	80020a8 <HAL_LPTIM_MspInit+0x48>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8002086:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fa95 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 800209c:	f7ff feb0 	bl	8001e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80020a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80020a4:	f7ff ff06 	bl	8001eb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3740      	adds	r7, #64	; 0x40
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40007c00 	.word	0x40007c00

080020b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b090      	sub	sp, #64	; 0x40
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	2238      	movs	r2, #56	; 0x38
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00d fd11 	bl	800faec <memset>
  if(hrtc->Instance==RTC)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_RTC_MspInit+0x54>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d115      	bne.n	8002100 <HAL_RTC_MspInit+0x4c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fa6b 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020f0:	f7ff fe86 	bl	8001e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020f4:	f7ff feb6 	bl	8001e64 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80020f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020fc:	f7ff feda 	bl	8001eb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3740      	adds	r7, #64	; 0x40
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40002800 	.word	0x40002800

0800210c <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002114:	2001      	movs	r0, #1
 8002116:	f7ff fefd 	bl	8001f14 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b096      	sub	sp, #88	; 0x58
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2238      	movs	r2, #56	; 0x38
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00d fcd1 	bl	800faec <memset>
  if(huart->Instance==USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a35      	ldr	r2, [pc, #212]	; (8002224 <HAL_UART_MspInit+0x100>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d12e      	bne.n	80021b2 <HAL_UART_MspInit+0x8e>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002154:	2301      	movs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002158:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800215c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4618      	mov	r0, r3
 8002164:	f003 fa2c 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800216e:	f7ff fe47 	bl	8001e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002172:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002176:	f7ff feb5 	bl	8001ee4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2002      	movs	r0, #2
 800217c:	f7ff fe82 	bl	8001e84 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002180:	23c0      	movs	r3, #192	; 0xc0
 8002182:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002190:	2307      	movs	r3, #7
 8002192:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002198:	4619      	mov	r1, r3
 800219a:	4823      	ldr	r0, [pc, #140]	; (8002228 <HAL_UART_MspInit+0x104>)
 800219c:	f001 f8e0 	bl	8003360 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2105      	movs	r1, #5
 80021a4:	2024      	movs	r0, #36	; 0x24
 80021a6:	f000 fff6 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021aa:	2024      	movs	r0, #36	; 0x24
 80021ac:	f001 f80d 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b0:	e033      	b.n	800221a <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_UART_MspInit+0x108>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d12e      	bne.n	800221a <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021bc:	2302      	movs	r3, #2
 80021be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021c0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80021c4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f9f8 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_UART_MspInit+0xb6>
      Error_Handler();
 80021d6:	f7ff fe13 	bl	8001e00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021de:	f7ff fe69 	bl	8001eb4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff fe4e 	bl	8001e84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021e8:	230c      	movs	r3, #12
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021f8:	2307      	movs	r3, #7
 80021fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f001 f8ab 	bl	8003360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2105      	movs	r1, #5
 800220e:	2025      	movs	r0, #37	; 0x25
 8002210:	f000 ffc1 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002214:	2025      	movs	r0, #37	; 0x25
 8002216:	f000 ffd8 	bl	80031ca <HAL_NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3758      	adds	r7, #88	; 0x58
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40013800 	.word	0x40013800
 8002228:	48000400 	.word	0x48000400
 800222c:	40004400 	.word	0x40004400

08002230 <LL_APB2_GRP1_EnableClock>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800223e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4013      	ands	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002276:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800227a:	f7ff ffd9 	bl	8002230 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800227e:	f107 020c 	add.w	r2, r7, #12
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f002 ffb1 	bl	80051f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800228e:	f002 ff9d 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 8002292:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_InitTick+0xbc>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	3b01      	subs	r3, #1
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80022a2:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <HAL_InitTick+0xc0>)
 80022a4:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_InitTick+0xc4>)
 80022a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_InitTick+0xc0>)
 80022aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ae:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_InitTick+0xc0>)
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_InitTick+0xc0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_InitTick+0xc0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80022c2:	4817      	ldr	r0, [pc, #92]	; (8002320 <HAL_InitTick+0xc0>)
 80022c4:	f003 ffde 	bl	8006284 <HAL_TIM_Base_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 80022ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d11b      	bne.n	800230e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80022d6:	4812      	ldr	r0, [pc, #72]	; (8002320 <HAL_InitTick+0xc0>)
 80022d8:	f004 f834 	bl	8006344 <HAL_TIM_Base_Start_IT>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 80022e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d111      	bne.n	800230e <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80022ea:	201d      	movs	r0, #29
 80022ec:	f000 ff6d 	bl	80031ca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b0f      	cmp	r3, #15
 80022f4:	d808      	bhi.n	8002308 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80022f6:	2200      	movs	r2, #0
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	201d      	movs	r0, #29
 80022fc:	f000 ff4b 	bl	8003196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_InitTick+0xc8>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e002      	b.n	800230e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }
 /* Return function status */
  return status;
 800230e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002312:	4618      	mov	r0, r3
 8002314:	3738      	adds	r7, #56	; 0x38
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	431bde83 	.word	0x431bde83
 8002320:	20002894 	.word	0x20002894
 8002324:	40014800 	.word	0x40014800
 8002328:	20000008 	.word	0x20000008

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <NMI_Handler+0x4>

08002332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	e7fe      	b.n	800233c <MemManage_Handler+0x4>

0800233e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002342:	e7fe      	b.n	8002342 <BusFault_Handler+0x4>

08002344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <UsageFault_Handler+0x4>

0800234a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
	...

08002358 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <TIM17_IRQHandler+0x10>)
 800235e:	f004 f83d 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20002894 	.word	0x20002894

0800236c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <USART1_IRQHandler+0x10>)
 8002372:	f004 fb51 	bl	8006a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200022c8 	.word	0x200022c8

08002380 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <USART2_IRQHandler+0x10>)
 8002386:	f004 fb47 	bl	8006a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20002598 	.word	0x20002598

08002394 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d0:	f00d fb52 	bl	800fa78 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	220c      	movs	r2, #12
 80023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20010000 	.word	0x20010000
 8002400:	00000400 	.word	0x00000400
 8002404:	200003c0 	.word	0x200003c0
 8002408:	200029c0 	.word	0x200029c0

0800240c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002422:	79fb      	ldrb	r3, [r7, #7]
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002450:	79fb      	ldrb	r3, [r7, #7]
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <TIMER_IF_SetTimerContext+0x10>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	200003c4 	.word	0x200003c4

08002470 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <TIMER_IF_GetTimerContext+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	200003c4 	.word	0x200003c4

08002484 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80024a4:	687b      	ldr	r3, [r7, #4]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80024ba:	687b      	ldr	r3, [r7, #4]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024fc:	f7ff ff86 	bl	800240c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <LoopForever+0x6>)
  ldr r1, =_edata
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <LoopForever+0xe>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002518:	4c0a      	ldr	r4, [pc, #40]	; (8002544 <LoopForever+0x16>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002526:	f00d faad 	bl	800fa84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252a:	f7fe fd49 	bl	8000fc0 <main>

0800252e <LoopForever>:

LoopForever:
    b LoopForever
 800252e:	e7fe      	b.n	800252e <LoopForever>
  ldr   r0, =_estack
 8002530:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800253c:	08010918 	.word	0x08010918
  ldr r2, =_sbss
 8002540:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002544:	200029bc 	.word	0x200029bc

08002548 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>
	...

0800254c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002556:	2003      	movs	r0, #3
 8002558:	f000 fe12 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800255c:	f002 fe10 	bl	8005180 <HAL_RCC_GetHCLKFreq>
 8002560:	4603      	mov	r3, r0
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_Init+0x3c>)
 8002564:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002566:	200f      	movs	r0, #15
 8002568:	f7ff fe7a 	bl	8002260 <HAL_InitTick>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	e001      	b.n	800257c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002578:	f7ff fce4 	bl	8001f44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800257c:	79fb      	ldrb	r3, [r7, #7]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_IncTick+0x1c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_IncTick+0x20>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a03      	ldr	r2, [pc, #12]	; (80025ac <HAL_IncTick+0x20>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	2000000c 	.word	0x2000000c
 80025ac:	200028e0 	.word	0x200028e0

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_GetTick+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	200028e0 	.word	0x200028e0

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_Delay+0x44>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffe0 	bl	80025b0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c

0800260c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetUIDw0+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	1fff7590 	.word	0x1fff7590

08002620 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002624:	4b02      	ldr	r3, [pc, #8]	; (8002630 <HAL_GetUIDw1+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	1fff7594 	.word	0x1fff7594

08002634 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <HAL_GetUIDw2+0x10>)
 800263a:	681b      	ldr	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	1fff7598 	.word	0x1fff7598

08002648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2107      	movs	r1, #7
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026d2:	f023 0317 	bic.w	r3, r3, #23
 80026d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026fc:	d101      	bne.n	8002702 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800271e:	f023 0317 	bic.w	r3, r3, #23
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002744:	f023 0317 	bic.w	r3, r3, #23
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsEnabled+0x18>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsEnabled+0x1a>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsDisableOngoing+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsDisableOngoing+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027b2:	f023 0317 	bic.w	r3, r3, #23
 80027b6:	f043 0204 	orr.w	r2, r3, #4
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027d8:	f023 0317 	bic.w	r3, r3, #23
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d101      	bne.n	8002806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1ae      	b.n	8002b94 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fb87 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff43 	bl	80026e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d115      	bne.n	8002894 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff28 	bl	80026c2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002872:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <HAL_ADC_Init+0x2cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	4a9a      	ldr	r2, [pc, #616]	; (8002ae4 <HAL_ADC_Init+0x2d0>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	3301      	adds	r3, #1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002886:	e002      	b.n	800288e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff25 	bl	80026e8 <LL_ADC_IsInternalRegulatorEnabled>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff92 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 80028ca:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f040 8154 	bne.w	8002b82 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 8150 	bne.w	8002b82 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff2f 	bl	800275a <LL_ADC_IsEnabled>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d14f      	bne.n	80029a2 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f023 0118 	bic.w	r1, r3, #24
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002924:	4313      	orrs	r3, r2
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d111      	bne.n	800295a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002942:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002948:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800294e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	4b61      	ldr	r3, [pc, #388]	; (8002ae8 <HAL_ADC_Init+0x2d4>)
 8002962:	4013      	ands	r3, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	6979      	ldr	r1, [r7, #20]
 800296a:	430b      	orrs	r3, r1
 800296c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002976:	d014      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d00f      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800298a:	d00a      	beq.n	80029a2 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800298c:	4b57      	ldr	r3, [pc, #348]	; (8002aec <HAL_ADC_Init+0x2d8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800299c:	4953      	ldr	r1, [pc, #332]	; (8002aec <HAL_ADC_Init+0x2d8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7e1b      	ldrb	r3, [r3, #24]
 80029a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e5b      	ldrb	r3, [r3, #25]
 80029ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e9b      	ldrb	r3, [r3, #26]
 80029b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80029b6:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_Init+0x1b2>
 80029c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_Init+0x1b4>
 80029c6:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80029c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80029ce:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da04      	bge.n	80029e2 <HAL_ADC_Init+0x1ce>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e0:	e001      	b.n	80029e6 <HAL_ADC_Init+0x1d2>
 80029e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 80029e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80029ee:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029f0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d114      	bne.n	8002a2c <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7e9b      	ldrb	r3, [r3, #26]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e00b      	b.n	8002a2c <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	f043 0201 	orr.w	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a40:	4313      	orrs	r3, r2
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002a52:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	69b9      	ldr	r1, [r7, #24]
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_ADC_Init+0x2dc>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6979      	ldr	r1, [r7, #20]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	f7ff fdef 	bl	8002662 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4919      	ldr	r1, [pc, #100]	; (8002af4 <HAL_ADC_Init+0x2e0>)
 8002a90:	f7ff fde7 	bl	8002662 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f062 020f 	orn	r2, r2, #15
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8002aac:	e044      	b.n	8002b38 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ab6:	d13f      	bne.n	8002b38 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e00c      	b.n	8002ad8 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	d012      	beq.n	8002af8 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b07      	cmp	r3, #7
 8002adc:	d9ef      	bls.n	8002abe <HAL_ADC_Init+0x2aa>
 8002ade:	e00c      	b.n	8002afa <HAL_ADC_Init+0x2e6>
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	053e2d63 	.word	0x053e2d63
 8002ae8:	1ffffc02 	.word	0x1ffffc02
 8002aec:	40012708 	.word	0x40012708
 8002af0:	dffffc02 	.word	0xdffffc02
 8002af4:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002af8:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f062 020f 	orn	r2, r2, #15
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b10:	e012      	b.n	8002b38 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f003 031c 	and.w	r3, r3, #28
 8002b24:	f06f 020f 	mvn.w	r2, #15
 8002b28:	fa02 f103 	lsl.w	r1, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_ADC_Init+0x388>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10b      	bne.n	8002b60 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b5e:	e018      	b.n	8002b92 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f023 0312 	bic.w	r3, r3, #18
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b80:	e007      	b.n	8002b92 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	833fffe7 	.word	0x833fffe7

08002ba0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe1e 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d132      	bne.n	8002c1e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_Start+0x26>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e02e      	b.n	8002c24 <HAL_ADC_Start+0x84>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f946 	bl	8002e60 <ADC_Enable>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d11a      	bne.n	8002c14 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	221c      	movs	r2, #28
 8002bfe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fdc8 	bl	80027a2 <LL_ADC_REG_StartConversion>
 8002c12:	e006      	b.n	8002c22 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002c1c:	e001      	b.n	8002c22 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Stop+0x16>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e022      	b.n	8002c88 <HAL_ADC_Stop+0x5c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8c3 	bl	8002dd6 <ADC_ConversionStop>
 8002c50:	4603      	mov	r3, r0
 8002c52:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d111      	bne.n	8002c7e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f986 	bl	8002f6c <ADC_Disable>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d102      	bne.n	8002ca8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e010      	b.n	8002cca <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e077      	b.n	8002db6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cca:	f7ff fc71 	bl	80025b0 <HAL_GetTick>
 8002cce:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cd0:	e021      	b.n	8002d16 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd8:	d01d      	beq.n	8002d16 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cda:	f7ff fc69 	bl	80025b0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d302      	bcc.n	8002cf0 <HAL_ADC_PollForConversion+0x60>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d112      	bne.n	8002d16 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f043 0204 	orr.w	r2, r3, #4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04f      	b.n	8002db6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0d6      	beq.n	8002cd2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fcb2 	bl	800269e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d031      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e9b      	ldrb	r3, [r3, #26]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d12d      	bne.n	8002da4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d126      	bne.n	8002da4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd47 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d112      	bne.n	8002d8c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 020c 	bic.w	r2, r2, #12
 8002d74:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	f043 0201 	orr.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58
 8002d8a:	e00b      	b.n	8002da4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	f043 0201 	orr.w	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	220c      	movs	r2, #12
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd03 	bl	80027ee <LL_ADC_REG_IsConversionOngoing>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d033      	beq.n	8002e56 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fcc3 	bl	800277e <LL_ADC_IsDisableOngoing>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fce0 	bl	80027c8 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e08:	f7ff fbd2 	bl	80025b0 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e0e:	e01b      	b.n	8002e48 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e10:	f7ff fbce 	bl	80025b0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d914      	bls.n	8002e48 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1dc      	bne.n	8002e10 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fc72 	bl	800275a <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d169      	bne.n	8002f50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <ADC_Enable+0xfc>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e055      	b.n	8002f52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fc2f 	bl	800270e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002eb0:	482b      	ldr	r0, [pc, #172]	; (8002f60 <ADC_Enable+0x100>)
 8002eb2:	f7ff fbc9 	bl	8002648 <LL_ADC_GetCommonPathInternalCh>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00f      	beq.n	8002ee0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <ADC_Enable+0x104>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <ADC_Enable+0x108>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ed2:	e002      	b.n	8002eda <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f9      	bne.n	8002ed4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	7e5b      	ldrb	r3, [r3, #25]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d033      	beq.n	8002f50 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ee8:	f7ff fb62 	bl	80025b0 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eee:	e028      	b.n	8002f42 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fc30 	bl	800275a <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fc02 	bl	800270e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f0a:	f7ff fb51 	bl	80025b0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d914      	bls.n	8002f42 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d00d      	beq.n	8002f42 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e007      	b.n	8002f52 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d1cf      	bne.n	8002ef0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	80000017 	.word	0x80000017
 8002f60:	40012708 	.word	0x40012708
 8002f64:	20000004 	.word	0x20000004
 8002f68:	053e2d63 	.word	0x053e2d63

08002f6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fc00 	bl	800277e <LL_ADC_IsDisableOngoing>
 8002f7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fbe8 	bl	800275a <LL_ADC_IsEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d047      	beq.n	8003020 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d144      	bne.n	8003020 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0305 	and.w	r3, r3, #5
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fbc3 	bl	8002734 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb6:	f7ff fafb 	bl	80025b0 <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fbc:	e029      	b.n	8003012 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc2:	f043 0210 	orr.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e023      	b.n	8003022 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fda:	f7ff fae9 	bl	80025b0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d914      	bls.n	8003012 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e007      	b.n	8003022 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1dc      	bne.n	8002fda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4906      	ldr	r1, [pc, #24]	; (80030c4 <__NVIC_EnableIRQ+0x34>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff4f 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff66 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ffb4 	bl	800311c <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff83 	bl	80030c8 <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff59 	bl	8003090 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04f      	b.n	8003298 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d008      	beq.n	8003216 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2204      	movs	r2, #4
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e040      	b.n	8003298 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 020e 	bic.w	r2, r2, #14
 8003224:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003234:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 021c 	and.w	r2, r3, #28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003262:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003284:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d005      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e047      	b.n	8003356 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 020e 	bic.w	r2, r2, #14
 80032d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f003 021c 	and.w	r2, r3, #28
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2101      	movs	r1, #1
 8003304:	fa01 f202 	lsl.w	r2, r1, r2
 8003308:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003312:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003334:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
    }
  }
  return status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336e:	e140      	b.n	80035f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8132 	beq.w	80035ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d005      	beq.n	80033a0 <HAL_GPIO_Init+0x40>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d130      	bne.n	8003402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d6:	2201      	movs	r2, #1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0201 	and.w	r2, r3, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d017      	beq.n	800343e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d123      	bne.n	8003492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	6939      	ldr	r1, [r7, #16]
 800348e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	2203      	movs	r2, #3
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0203 	and.w	r2, r3, #3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 808c 	beq.w	80035ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80034d4:	4a4e      	ldr	r2, [pc, #312]	; (8003610 <HAL_GPIO_Init+0x2b0>)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	089b      	lsrs	r3, r3, #2
 80034da:	3302      	adds	r3, #2
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	2207      	movs	r2, #7
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034fe:	d00d      	beq.n	800351c <HAL_GPIO_Init+0x1bc>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a44      	ldr	r2, [pc, #272]	; (8003614 <HAL_GPIO_Init+0x2b4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <HAL_GPIO_Init+0x1b8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_GPIO_Init+0x2b8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_GPIO_Init+0x1b4>
 8003510:	2302      	movs	r3, #2
 8003512:	e004      	b.n	800351e <HAL_GPIO_Init+0x1be>
 8003514:	2307      	movs	r3, #7
 8003516:	e002      	b.n	800351e <HAL_GPIO_Init+0x1be>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_GPIO_Init+0x1be>
 800351c:	2300      	movs	r3, #0
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	f002 0203 	and.w	r2, r2, #3
 8003524:	0092      	lsls	r2, r2, #2
 8003526:	4093      	lsls	r3, r2
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800352e:	4938      	ldr	r1, [pc, #224]	; (8003610 <HAL_GPIO_Init+0x2b0>)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800353c:	4b37      	ldr	r3, [pc, #220]	; (800361c <HAL_GPIO_Init+0x2bc>)
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003562:	4a2e      	ldr	r2, [pc, #184]	; (800361c <HAL_GPIO_Init+0x2bc>)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_GPIO_Init+0x2bc>)
 800356c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003570:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_GPIO_Init+0x2bc>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003598:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_GPIO_Init+0x2bc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_GPIO_Init+0x2bc>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_GPIO_Init+0x2bc>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_GPIO_Init+0x2bc>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f aeb7 	bne.w	8003370 <HAL_GPIO_Init+0x10>
  }
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	48000400 	.word	0x48000400
 8003618:	48000800 	.word	0x48000800
 800361c:	58000800 	.word	0x58000800

08003620 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	887b      	ldrh	r3, [r7, #2]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e001      	b.n	8003642 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
 800365a:	4613      	mov	r3, r2
 800365c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800365e:	787b      	ldrb	r3, [r7, #1]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003664:	887a      	ldrh	r2, [r7, #2]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800366a:	e002      	b.n	8003672 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	041a      	lsls	r2, r3, #16
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	43d9      	mvns	r1, r3
 800369a:	887b      	ldrh	r3, [r7, #2]
 800369c:	400b      	ands	r3, r1
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	619a      	str	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e081      	b.n	80037c4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d106      	bne.n	80036da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fe fc7d 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2224      	movs	r2, #36	; 0x24
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800370e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d107      	bne.n	8003728 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	e006      	b.n	8003736 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003734:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d104      	bne.n	8003748 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003746:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800376a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69d9      	ldr	r1, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	f040 80f1 	bne.w	80039d0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fc:	d101      	bne.n	8003802 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	e0e7      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_I2C_IsDeviceReady+0x44>
 800380c:	2302      	movs	r3, #2
 800380e:	e0e0      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_I2C_IsDeviceReady+0x72>
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003838:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800383c:	e004      	b.n	8003848 <HAL_I2C_IsDeviceReady+0x7c>
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003844:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800384e:	f7fe feaf 	bl	80025b0 <HAL_GetTick>
 8003852:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b20      	cmp	r3, #32
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003880:	e034      	b.n	80038ec <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003888:	d01a      	beq.n	80038c0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fe91 	bl	80025b0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <HAL_I2C_IsDeviceReady+0xd4>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10f      	bne.n	80038c0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e088      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_I2C_IsDeviceReady+0x12c>
 80038f2:	7fbb      	ldrb	r3, [r7, #30]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0c4      	beq.n	8003882 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b10      	cmp	r3, #16
 8003904:	d01a      	beq.n	800393c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	2120      	movs	r1, #32
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f862 	bl	80039da <I2C_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e058      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	e04a      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	2120      	movs	r1, #32
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f847 	bl	80039da <I2C_WaitOnFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e03d      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2210      	movs	r2, #16
 800395c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d118      	bne.n	80039a0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	2120      	movs	r1, #32
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f826 	bl	80039da <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e01c      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2220      	movs	r2, #32
 800399e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3301      	adds	r3, #1
 80039a4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	f63f af3b 	bhi.w	8003826 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ea:	e022      	b.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f2:	d01e      	beq.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fe fddc 	bl	80025b0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e00f      	b.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d0cd      	beq.n	80039ec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d138      	bne.n	8003ae2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e032      	b.n	8003ae4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2224      	movs	r2, #36	; 0x24
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0201 	bic.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e000      	b.n	8003ae4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d139      	bne.n	8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e033      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2224      	movs	r2, #36	; 0x24
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <LL_RCC_SetLPTIMClockSource>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	041b      	lsls	r3, r3, #16
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <LL_RCC_GetLPTIMClockSource>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0c1a      	lsrs	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4313      	orrs	r3, r2
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <LL_APB1_GRP1_ForceReset>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <LL_APB1_GRP2_ForceReset>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <LL_APB1_GRP1_ReleaseReset>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c34:	4013      	ands	r3, r2
 8003c36:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <LL_APB1_GRP2_ReleaseReset>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c58:	4013      	ands	r3, r2
 8003c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0b6      	b.n	8003de8 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fe f9e3 	bl	8002060 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cba:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8003cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8a2 	bl	8003e14 <LPTIM_WaitForFlag>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d101      	bne.n	8003cda <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e086      	b.n	8003de8 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8ca 	bl	8003e74 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f889 	bl	8003df8 <HAL_LPTIM_GetState>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d101      	bne.n	8003cf0 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e07b      	b.n	8003de8 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d004      	beq.n	8003d0a <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d08:	d103      	bne.n	8003d12 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 031e 	bic.w	r3, r3, #30
 8003d10:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d005      	beq.n	8003d2a <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_LPTIM_Init+0x188>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d3a:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003d40:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003d46:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003d4c:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d107      	bne.n	8003d6c <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003d64:	4313      	orrs	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d004      	beq.n	8003d7e <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d7c:	d107      	bne.n	8003d8e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003d86:	4313      	orrs	r3, r2
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00a      	beq.n	8003db0 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003da2:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003da8:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <HAL_LPTIM_Init+0x18c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d108      	bne.n	8003dd4 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	621a      	str	r2, [r3, #32]
 8003dd2:	e004      	b.n	8003dde <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ddc:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	ff19f1fe 	.word	0xff19f1fe
 8003df4:	40007c00 	.word	0x40007c00

08003df8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e06:	b2db      	uxtb	r3, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
	...

08003e14 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003e22:	4b12      	ldr	r3, [pc, #72]	; (8003e6c <LPTIM_WaitForFlag+0x58>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <LPTIM_WaitForFlag+0x5c>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	0b9b      	lsrs	r3, r3, #14
 8003e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	4013      	ands	r3, r2
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d002      	beq.n	8003e5e <LPTIM_WaitForFlag+0x4a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ec      	bne.n	8003e38 <LPTIM_WaitForFlag+0x24>

  return result;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000004 	.word	0x20000004
 8003e70:	d1b71759 	.word	0xd1b71759

08003e74 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003e80:	b672      	cpsid	i
}
 8003e82:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a8d      	ldr	r2, [pc, #564]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d015      	beq.n	8003eba <LPTIM_Disable+0x46>
 8003e8e:	4a8c      	ldr	r2, [pc, #560]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d818      	bhi.n	8003ec6 <LPTIM_Disable+0x52>
 8003e94:	4a8b      	ldr	r2, [pc, #556]	; (80040c4 <LPTIM_Disable+0x250>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <LPTIM_Disable+0x2e>
 8003e9a:	4a8b      	ldr	r2, [pc, #556]	; (80040c8 <LPTIM_Disable+0x254>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d006      	beq.n	8003eae <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8003ea0:	e011      	b.n	8003ec6 <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003ea2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003ea6:	f7ff fe86 	bl	8003bb6 <LL_RCC_GetLPTIMClockSource>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003eac:	e00c      	b.n	8003ec8 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003eae:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003eb2:	f7ff fe80 	bl	8003bb6 <LL_RCC_GetLPTIMClockSource>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003eb8:	e006      	b.n	8003ec8 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8003eba:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8003ebe:	f7ff fe7a 	bl	8003bb6 <LL_RCC_GetLPTIMClockSource>
 8003ec2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8003ec4:	e000      	b.n	8003ec8 <LPTIM_Disable+0x54>
      break;
 8003ec6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a70      	ldr	r2, [pc, #448]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <LPTIM_Disable+0xc2>
 8003f02:	4a6f      	ldr	r2, [pc, #444]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d81d      	bhi.n	8003f44 <LPTIM_Disable+0xd0>
 8003f08:	4a6e      	ldr	r2, [pc, #440]	; (80040c4 <LPTIM_Disable+0x250>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <LPTIM_Disable+0xa2>
 8003f0e:	4a6e      	ldr	r2, [pc, #440]	; (80040c8 <LPTIM_Disable+0x254>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8003f14:	e016      	b.n	8003f44 <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003f16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003f1a:	f7ff fe5e 	bl	8003bda <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003f1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8003f22:	f7ff fe7c 	bl	8003c1e <LL_APB1_GRP1_ReleaseReset>
      break;
 8003f26:	e00e      	b.n	8003f46 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003f28:	2020      	movs	r0, #32
 8003f2a:	f7ff fe67 	bl	8003bfc <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003f2e:	2020      	movs	r0, #32
 8003f30:	f7ff fe87 	bl	8003c42 <LL_APB1_GRP2_ReleaseReset>
      break;
 8003f34:	e007      	b.n	8003f46 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8003f36:	2040      	movs	r0, #64	; 0x40
 8003f38:	f7ff fe60 	bl	8003bfc <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8003f3c:	2040      	movs	r0, #64	; 0x40
 8003f3e:	f7ff fe80 	bl	8003c42 <LL_APB1_GRP2_ReleaseReset>
      break;
 8003f42:	e000      	b.n	8003f46 <LPTIM_Disable+0xd2>
      break;
 8003f44:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d106      	bne.n	8003f5a <LPTIM_Disable+0xe6>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d103      	bne.n	8003f5a <LPTIM_Disable+0xe6>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8096 	beq.w	8004086 <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <LPTIM_Disable+0x118>
 8003f64:	4a56      	ldr	r2, [pc, #344]	; (80040c0 <LPTIM_Disable+0x24c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d815      	bhi.n	8003f96 <LPTIM_Disable+0x122>
 8003f6a:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <LPTIM_Disable+0x250>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <LPTIM_Disable+0x104>
 8003f70:	4a55      	ldr	r2, [pc, #340]	; (80040c8 <LPTIM_Disable+0x254>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d005      	beq.n	8003f82 <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8003f76:	e00e      	b.n	8003f96 <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003f78:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8003f7c:	f7ff fe02 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 8003f80:	e00a      	b.n	8003f98 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003f82:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003f86:	f7ff fdfd 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 8003f8a:	e005      	b.n	8003f98 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8003f8c:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8003f90:	f7ff fdf8 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 8003f94:	e000      	b.n	8003f98 <LPTIM_Disable+0x124>
        break;
 8003f96:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01a      	beq.n	8003fd4 <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003fb6:	2108      	movs	r1, #8
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ff2b 	bl	8003e14 <LPTIM_WaitForFlag>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b03      	cmp	r3, #3
 8003fc2:	d103      	bne.n	8003fcc <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01a      	beq.n	8004010 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff ff0d 	bl	8003e14 <LPTIM_WaitForFlag>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d103      	bne.n	8004008 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2203      	movs	r2, #3
 8004004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800402e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff feee 	bl	8003e14 <LPTIM_WaitForFlag>
 8004038:	4603      	mov	r3, r0
 800403a:	2b03      	cmp	r3, #3
 800403c:	d103      	bne.n	8004046 <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2203      	movs	r2, #3
 8004042:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800404e:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <LPTIM_Disable+0x24c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d011      	beq.n	800407e <LPTIM_Disable+0x20a>
 800405a:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <LPTIM_Disable+0x24c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d814      	bhi.n	800408a <LPTIM_Disable+0x216>
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <LPTIM_Disable+0x250>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <LPTIM_Disable+0x1fa>
 8004066:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <LPTIM_Disable+0x254>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 800406c:	e00d      	b.n	800408a <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800406e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004070:	f7ff fd88 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 8004074:	e00a      	b.n	800408c <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004078:	f7ff fd84 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 800407c:	e006      	b.n	800408c <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800407e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004080:	f7ff fd80 	bl	8003b84 <LL_RCC_SetLPTIMClockSource>
        break;
 8004084:	e002      	b.n	800408c <LPTIM_Disable+0x218>
    }
  }
 8004086:	bf00      	nop
 8004088:	e000      	b.n	800408c <LPTIM_Disable+0x218>
        break;
 800408a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80040b4:	b662      	cpsie	i
}
 80040b6:	bf00      	nop

  __enable_irq();
}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40009800 	.word	0x40009800
 80040c4:	40007c00 	.word	0x40007c00
 80040c8:	40009400 	.word	0x40009400

080040cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a03      	ldr	r2, [pc, #12]	; (80040e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	58000400 	.word	0x58000400

080040e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_PWREx_GetVoltageRange+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr
 80040fc:	58000400 	.word	0x58000400

08004100 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004110:	d101      	bne.n	8004116 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	58000400 	.word	0x58000400

08004124 <LL_RCC_HSE_EnableTcxo>:
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004132:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <LL_RCC_HSE_DisableTcxo>:
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416e:	d101      	bne.n	8004174 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <LL_RCC_HSE_Enable>:
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
}
 8004192:	bf00      	nop
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <LL_RCC_HSE_Disable>:
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
}
 80041ae:	bf00      	nop
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_HSE_IsReady>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c8:	d101      	bne.n	80041ce <LL_RCC_HSE_IsReady+0x18>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <LL_RCC_HSE_IsReady+0x1a>
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_HSI_Enable>:
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_HSI_Disable>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <LL_RCC_HSI_IsReady>:
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d101      	bne.n	8004228 <LL_RCC_HSI_IsReady+0x18>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <LL_RCC_HSI_IsReady+0x1a>
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr

0800425a <LL_RCC_LSE_IsReady>:
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b02      	cmp	r3, #2
 800426c:	d101      	bne.n	8004272 <LL_RCC_LSE_IsReady+0x18>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <LL_RCC_LSE_IsReady+0x1a>
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <LL_RCC_LSI_Enable>:
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <LL_RCC_LSI_Disable>:
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <LL_RCC_LSI_IsReady>:
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d101      	bne.n	80042d4 <LL_RCC_LSI_IsReady+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_RCC_LSI_IsReady+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_RCC_MSI_Enable>:
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6013      	str	r3, [r2, #0]
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_MSI_Disable>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6013      	str	r3, [r2, #0]
}
 800430e:	bf00      	nop
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <LL_RCC_MSI_IsReady>:
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d101      	bne.n	800432c <LL_RCC_MSI_IsReady+0x16>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <LL_RCC_MSI_IsReady+0x18>
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b08      	cmp	r3, #8
 8004346:	d101      	bne.n	800434c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <LL_RCC_MSI_GetRange>:
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004378:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <LL_RCC_SetSysClkSource>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <LL_RCC_GetSysClkSource>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_SetAHBPrescaler>:
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <LL_C2_RCC_SetAHBPrescaler>:
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800441e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <LL_RCC_SetAHB3Prescaler>:
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004448:	f023 020f 	bic.w	r2, r3, #15
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <LL_RCC_SetAPB1Prescaler>:
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <LL_RCC_SetAPB2Prescaler>:
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800449c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
}
 80044a6:	bf00      	nop
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <LL_RCC_GetAHBPrescaler>:
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80044b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <LL_C2_RCC_GetAHBPrescaler>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <LL_RCC_GetAHB3Prescaler>:
{
 80044de:	b480      	push	{r7}
 80044e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80044e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <LL_RCC_GetAPB1Prescaler>:
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80044fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <LL_RCC_GetAPB2Prescaler>:
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr

0800455c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456e:	d101      	bne.n	8004574 <LL_RCC_PLL_IsReady+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_RCC_PLL_IsReady+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	0a1b      	lsrs	r3, r3, #8
 800458a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800458e:	4618      	mov	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0303 	and.w	r3, r3, #3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d101      	bne.n	80045f0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004602:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460e:	d101      	bne.n	8004614 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004626:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800462a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004632:	d101      	bne.n	8004638 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004654:	d101      	bne.n	800465a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004676:	d101      	bne.n	800467c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr
	...

08004688 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e38a      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	f7ff fe9a 	bl	80043d2 <LL_RCC_GetSysClkSource>
 800469e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046a0:	f7ff ff8f 	bl	80045c2 <LL_RCC_PLL_GetMainSource>
 80046a4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80c9 	beq.w	8004846 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x3e>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d17b      	bne.n	80047b8 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d178      	bne.n	80047b8 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046c6:	f7ff fe26 	bl	8004316 <LL_RCC_MSI_IsReady>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_OscConfig+0x54>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e369      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_RCC_OscConfig+0x72>
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f8:	e006      	b.n	8004708 <HAL_RCC_OscConfig+0x80>
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004708:	4293      	cmp	r3, r2
 800470a:	d222      	bcs.n	8004752 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fdab 	bl	800526c <RCC_SetFlashLatencyFromMSIRange>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e347      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472a:	f043 0308 	orr.w	r3, r3, #8
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004742:	4313      	orrs	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fe1a 	bl	8004384 <LL_RCC_MSI_SetCalibTrimming>
 8004750:	e021      	b.n	8004796 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004774:	4313      	orrs	r3, r2
 8004776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fe01 	bl	8004384 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fd70 	bl	800526c <RCC_SetFlashLatencyFromMSIRange>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e30c      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004796:	f000 fcf3 	bl	8005180 <HAL_RCC_GetHCLKFreq>
 800479a:	4603      	mov	r3, r0
 800479c:	4ab4      	ldr	r2, [pc, #720]	; (8004a70 <HAL_RCC_OscConfig+0x3e8>)
 800479e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047a0:	4bb4      	ldr	r3, [pc, #720]	; (8004a74 <HAL_RCC_OscConfig+0x3ec>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd fd5b 	bl	8002260 <HAL_InitTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d047      	beq.n	8004844 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	e2fb      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02c      	beq.n	800481a <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047c0:	f7ff fd8d 	bl	80042de <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047c4:	f7fd fef4 	bl	80025b0 <HAL_GetTick>
 80047c8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047cc:	f7fd fef0 	bl	80025b0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e2e8      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80047de:	f7ff fd9a 	bl	8004316 <LL_RCC_MSI_IsReady>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f1      	beq.n	80047cc <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f2:	f043 0308 	orr.w	r3, r3, #8
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fdb6 	bl	8004384 <LL_RCC_MSI_SetCalibTrimming>
 8004818:	e015      	b.n	8004846 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800481a:	f7ff fd6e 	bl	80042fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800481e:	f7fd fec7 	bl	80025b0 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004826:	f7fd fec3 	bl	80025b0 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e2bb      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004838:	f7ff fd6d 	bl	8004316 <LL_RCC_MSI_IsReady>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f1      	bne.n	8004826 <HAL_RCC_OscConfig+0x19e>
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004844:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d05f      	beq.n	8004912 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2b08      	cmp	r3, #8
 8004856:	d005      	beq.n	8004864 <HAL_RCC_OscConfig+0x1dc>
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d10d      	bne.n	800487a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d10a      	bne.n	800487a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	f7ff fca7 	bl	80041b6 <LL_RCC_HSE_IsReady>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d050      	beq.n	8004910 <HAL_RCC_OscConfig+0x288>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d14c      	bne.n	8004910 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e29a      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d102      	bne.n	80048a0 <HAL_RCC_OscConfig+0x218>
 800489a:	f7ff fc70 	bl	800417e <LL_RCC_HSE_Enable>
 800489e:	e00d      	b.n	80048bc <HAL_RCC_OscConfig+0x234>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80048a8:	d104      	bne.n	80048b4 <HAL_RCC_OscConfig+0x22c>
 80048aa:	f7ff fc3b 	bl	8004124 <LL_RCC_HSE_EnableTcxo>
 80048ae:	f7ff fc66 	bl	800417e <LL_RCC_HSE_Enable>
 80048b2:	e003      	b.n	80048bc <HAL_RCC_OscConfig+0x234>
 80048b4:	f7ff fc71 	bl	800419a <LL_RCC_HSE_Disable>
 80048b8:	f7ff fc42 	bl	8004140 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d012      	beq.n	80048ea <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fe74 	bl	80025b0 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fd fe70 	bl	80025b0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e268      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80048de:	f7ff fc6a 	bl	80041b6 <LL_RCC_HSE_IsReady>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f1      	beq.n	80048cc <HAL_RCC_OscConfig+0x244>
 80048e8:	e013      	b.n	8004912 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fe61 	bl	80025b0 <HAL_GetTick>
 80048ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f2:	f7fd fe5d 	bl	80025b0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b64      	cmp	r3, #100	; 0x64
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e255      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004904:	f7ff fc57 	bl	80041b6 <LL_RCC_HSE_IsReady>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f1      	bne.n	80048f2 <HAL_RCC_OscConfig+0x26a>
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004910:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04b      	beq.n	80049b6 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b04      	cmp	r3, #4
 8004922:	d005      	beq.n	8004930 <HAL_RCC_OscConfig+0x2a8>
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d113      	bne.n	8004952 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d110      	bne.n	8004952 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004930:	f7ff fc6e 	bl	8004210 <LL_RCC_HSI_IsReady>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x2be>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e234      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fc71 	bl	8004232 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004950:	e031      	b.n	80049b6 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d019      	beq.n	800498e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800495a:	f7ff fc3d 	bl	80041d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495e:	f7fd fe27 	bl	80025b0 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004966:	f7fd fe23 	bl	80025b0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e21b      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004978:	f7ff fc4a 	bl	8004210 <LL_RCC_HSI_IsReady>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f1      	beq.n	8004966 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fc53 	bl	8004232 <LL_RCC_HSI_SetCalibTrimming>
 800498c:	e013      	b.n	80049b6 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800498e:	f7ff fc31 	bl	80041f4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fd fe0d 	bl	80025b0 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499a:	f7fd fe09 	bl	80025b0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e201      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049ac:	f7ff fc30 	bl	8004210 <LL_RCC_HSI_IsReady>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f1      	bne.n	800499a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d06e      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d056      	beq.n	8004a78 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	429a      	cmp	r2, r3
 80049e0:	d031      	beq.n	8004a46 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e1da      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a04:	f7ff fc4a 	bl	800429c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a08:	f7fd fdd2 	bl	80025b0 <HAL_GetTick>
 8004a0c:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fd fdce 	bl	80025b0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b11      	cmp	r3, #17
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1c6      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a22:	f7ff fc4b 	bl	80042bc <LL_RCC_LSI_IsReady>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f1      	bne.n	8004a10 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a34:	f023 0210 	bic.w	r2, r3, #16
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a46:	f7ff fc19 	bl	800427c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fdb1 	bl	80025b0 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a52:	f7fd fdad 	bl	80025b0 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b11      	cmp	r3, #17
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1a5      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a64:	f7ff fc2a 	bl	80042bc <LL_RCC_LSI_IsReady>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f1      	beq.n	8004a52 <HAL_RCC_OscConfig+0x3ca>
 8004a6e:	e017      	b.n	8004aa0 <HAL_RCC_OscConfig+0x418>
 8004a70:	20000004 	.word	0x20000004
 8004a74:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a78:	f7ff fc10 	bl	800429c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fd fd98 	bl	80025b0 <HAL_GetTick>
 8004a80:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fd fd94 	bl	80025b0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b11      	cmp	r3, #17
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e18c      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004a96:	f7ff fc11 	bl	80042bc <LL_RCC_LSI_IsReady>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f1      	bne.n	8004a84 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80d8 	beq.w	8004c5e <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004aae:	f7ff fb27 	bl	8004100 <LL_PWR_IsEnabledBkUpAccess>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ab8:	f7ff fb08 	bl	80040cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abc:	f7fd fd78 	bl	80025b0 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac4:	f7fd fd74 	bl	80025b0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e16c      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ad6:	f7ff fb13 	bl	8004100 <LL_PWR_IsEnabledBkUpAccess>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f1      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d07b      	beq.n	8004be0 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b85      	cmp	r3, #133	; 0x85
 8004aee:	d003      	beq.n	8004af8 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b05      	cmp	r3, #5
 8004af6:	d109      	bne.n	8004b0c <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7fd fd50 	bl	80025b0 <HAL_GetTick>
 8004b10:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd fd42 	bl	80025b0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e138      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b3e:	f7ff fb8c 	bl	800425a <LL_RCC_LSE_IsReady>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ef      	beq.n	8004b28 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b81      	cmp	r3, #129	; 0x81
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b85      	cmp	r3, #133	; 0x85
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fd fd2a 	bl	80025b0 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b74:	f7fd fd1c 	bl	80025b0 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e112      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ec      	beq.n	8004b74 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b9a:	e060      	b.n	8004c5e <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fd08 	bl	80025b0 <HAL_GetTick>
 8004ba0:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fcfa 	bl	80025b0 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e0f0      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1ec      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x530>
 8004bde:	e03e      	b.n	8004c5e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd fce6 	bl	80025b0 <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fcd8 	bl	80025b0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0ce      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ec      	bne.n	8004bfc <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fd fcc5 	bl	80025b0 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd fcb7 	bl	80025b0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0ad      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c54:	f7ff fb01 	bl	800425a <LL_RCC_LSE_IsReady>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ef      	bne.n	8004c3e <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80a3 	beq.w	8004dae <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d076      	beq.n	8004d5c <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d14b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	f7ff fc63 	bl	8004540 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fc99 	bl	80025b0 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fd fc95 	bl	80025b0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b0a      	cmp	r3, #10
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e08d      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c94:	f7ff fc62 	bl	800455c <LL_RCC_PLL_IsReady>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f1      	bne.n	8004c82 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <HAL_RCC_OscConfig+0x730>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb6:	0212      	lsls	r2, r2, #8
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cbe:	4311      	orrs	r1, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd4:	f7ff fc26 	bl	8004524 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fc62 	bl	80025b0 <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fc5e 	bl	80025b0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b0a      	cmp	r3, #10
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e056      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d02:	f7ff fc2b 	bl	800455c <LL_RCC_PLL_IsReady>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f1      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x668>
 8004d0c:	e04f      	b.n	8004dae <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0e:	f7ff fc17 	bl	8004540 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1c:	f023 0303 	bic.w	r3, r3, #3
 8004d20:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d2c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d34:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd fc3b 	bl	80025b0 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3e:	f7fd fc37 	bl	80025b0 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b0a      	cmp	r3, #10
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e02f      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d50:	f7ff fc04 	bl	800455c <LL_RCC_PLL_IsReady>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f1      	bne.n	8004d3e <HAL_RCC_OscConfig+0x6b6>
 8004d5a:	e028      	b.n	8004dae <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e023      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d115      	bne.n	8004daa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d10e      	bne.n	8004daa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	11c1808c 	.word	0x11c1808c

08004dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e12c      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b98      	ldr	r3, [pc, #608]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d91b      	bls.n	8004e16 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b95      	ldr	r3, [pc, #596]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4993      	ldr	r1, [pc, #588]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fd fbdf 	bl	80025b0 <HAL_GetTick>
 8004df2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004df6:	f7fd fbdb 	bl	80025b0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e110      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e08:	4b8a      	ldr	r3, [pc, #552]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d1ef      	bne.n	8004df6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fade 	bl	80043e8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e2c:	f7fd fbc0 	bl	80025b0 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e34:	f7fd fbbc 	bl	80025b0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0f1      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e46:	f7ff fbc7 	bl	80045d8 <LL_RCC_IsActiveFlag_HPRE>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f1      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d016      	beq.n	8004e8a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fad4 	bl	800440e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e66:	f7fd fba3 	bl	80025b0 <HAL_GetTick>
 8004e6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e6e:	f7fd fb9f 	bl	80025b0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0d4      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e80:	f7ff fbbb 	bl	80045fa <LL_RCC_IsActiveFlag_C2HPRE>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f1      	beq.n	8004e6e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff facc 	bl	8004438 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fb86 	bl	80025b0 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ea8:	f7fd fb82 	bl	80025b0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e0b7      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004eba:	f7ff fbb0 	bl	800461e <LL_RCC_IsActiveFlag_SHDHPRE>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f1      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d016      	beq.n	8004efe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fac5 	bl	8004464 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004eda:	f7fd fb69 	bl	80025b0 <HAL_GetTick>
 8004ede:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ee2:	f7fd fb65 	bl	80025b0 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e09a      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ef4:	f7ff fba5 	bl	8004642 <LL_RCC_IsActiveFlag_PPRE1>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f1      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d017      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff faba 	bl	800448a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f16:	f7fd fb4b 	bl	80025b0 <HAL_GetTick>
 8004f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f1e:	f7fd fb47 	bl	80025b0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e07c      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f30:	f7ff fb98 	bl	8004664 <LL_RCC_IsActiveFlag_PPRE2>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f1      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d043      	beq.n	8004fce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d106      	bne.n	8004f5c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f4e:	f7ff f932 	bl	80041b6 <LL_RCC_HSE_IsReady>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11e      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e066      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d106      	bne.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f64:	f7ff fafa 	bl	800455c <LL_RCC_PLL_IsReady>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d113      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e05b      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f7a:	f7ff f9cc 	bl	8004316 <LL_RCC_MSI_IsReady>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d108      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e050      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f88:	f7ff f942 	bl	8004210 <LL_RCC_HSI_IsReady>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e049      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fa06 	bl	80043ac <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fb06 	bl	80025b0 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd fb02 	bl	80025b0 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e035      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	f7ff fa08 	bl	80043d2 <LL_RCC_GetSysClkSource>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d1ec      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fce:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d21b      	bcs.n	8005014 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fdc:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 0207 	bic.w	r2, r3, #7
 8004fe4:	4913      	ldr	r1, [pc, #76]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fec:	f7fd fae0 	bl	80025b0 <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ff4:	f7fd fadc 	bl	80025b0 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e011      	b.n	800502a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_ClockConfig+0x278>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d1ef      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005014:	f000 f8b4 	bl	8005180 <HAL_RCC_GetHCLKFreq>
 8005018:	4603      	mov	r3, r0
 800501a:	4a07      	ldr	r2, [pc, #28]	; (8005038 <HAL_RCC_ClockConfig+0x27c>)
 800501c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <HAL_RCC_ClockConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd f91c 	bl	8002260 <HAL_InitTick>
 8005028:	4603      	mov	r3, r0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58004000 	.word	0x58004000
 8005038:	20000004 	.word	0x20000004
 800503c:	20000008 	.word	0x20000008

08005040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504e:	f7ff f9c0 	bl	80043d2 <LL_RCC_GetSysClkSource>
 8005052:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005054:	f7ff fab5 	bl	80045c2 <LL_RCC_PLL_GetMainSource>
 8005058:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0x2c>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b0c      	cmp	r3, #12
 8005064:	d139      	bne.n	80050da <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d136      	bne.n	80050da <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800506c:	f7ff f963 	bl	8004336 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d115      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x62>
 8005076:	f7ff f95e 	bl	8004336 <LL_RCC_MSI_IsEnabledRangeSelect>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <HAL_RCC_GetSysClockFreq+0x4e>
 8005080:	f7ff f969 	bl	8004356 <LL_RCC_MSI_GetRange>
 8005084:	4603      	mov	r3, r0
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	e005      	b.n	800509a <HAL_RCC_GetSysClockFreq+0x5a>
 800508e:	f7ff f96d 	bl	800436c <LL_RCC_MSI_GetRangeAfterStandby>
 8005092:	4603      	mov	r3, r0
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	4a36      	ldr	r2, [pc, #216]	; (8005174 <HAL_RCC_GetSysClockFreq+0x134>)
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	e014      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x8c>
 80050a2:	f7ff f948 	bl	8004336 <LL_RCC_MSI_IsEnabledRangeSelect>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d106      	bne.n	80050ba <HAL_RCC_GetSysClockFreq+0x7a>
 80050ac:	f7ff f953 	bl	8004356 <LL_RCC_MSI_GetRange>
 80050b0:	4603      	mov	r3, r0
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	e005      	b.n	80050c6 <HAL_RCC_GetSysClockFreq+0x86>
 80050ba:	f7ff f957 	bl	800436c <LL_RCC_MSI_GetRangeAfterStandby>
 80050be:	4603      	mov	r3, r0
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <HAL_RCC_GetSysClockFreq+0x134>)
 80050c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050cc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d8:	e012      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d102      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050e0:	4b25      	ldr	r3, [pc, #148]	; (8005178 <HAL_RCC_GetSysClockFreq+0x138>)
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e00c      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d109      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050ec:	f7ff f836 	bl	800415c <LL_RCC_HSE_IsEnabledDiv2>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d102      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80050f6:	4b20      	ldr	r3, [pc, #128]	; (8005178 <HAL_RCC_GetSysClockFreq+0x138>)
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	e001      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <HAL_RCC_GetSysClockFreq+0x13c>)
 80050fe:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005100:	f7ff f967 	bl	80043d2 <LL_RCC_GetSysClkSource>
 8005104:	4603      	mov	r3, r0
 8005106:	2b0c      	cmp	r3, #12
 8005108:	d12f      	bne.n	800516a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800510a:	f7ff fa5a 	bl	80045c2 <LL_RCC_PLL_GetMainSource>
 800510e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0xde>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0xe4>
 800511c:	e00d      	b.n	800513a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <HAL_RCC_GetSysClockFreq+0x138>)
 8005120:	60fb      	str	r3, [r7, #12]
        break;
 8005122:	e00d      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005124:	f7ff f81a 	bl	800415c <LL_RCC_HSE_IsEnabledDiv2>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d102      	bne.n	8005134 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_GetSysClockFreq+0x138>)
 8005130:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005132:	e005      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005136:	60fb      	str	r3, [r7, #12]
        break;
 8005138:	e002      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	60fb      	str	r3, [r7, #12]
        break;
 800513e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005140:	f7ff fa1d 	bl	800457e <LL_RCC_PLL_GetN>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	fb03 f402 	mul.w	r4, r3, r2
 800514c:	f7ff fa2e 	bl	80045ac <LL_RCC_PLL_GetDivider>
 8005150:	4603      	mov	r3, r0
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	3301      	adds	r3, #1
 8005156:	fbb4 f4f3 	udiv	r4, r4, r3
 800515a:	f7ff fa1c 	bl	8004596 <LL_RCC_PLL_GetR>
 800515e:	4603      	mov	r3, r0
 8005160:	0f5b      	lsrs	r3, r3, #29
 8005162:	3301      	adds	r3, #1
 8005164:	fbb4 f3f3 	udiv	r3, r4, r3
 8005168:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800516a:	697b      	ldr	r3, [r7, #20]
}
 800516c:	4618      	mov	r0, r3
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	bd90      	pop	{r4, r7, pc}
 8005174:	080106a8 	.word	0x080106a8
 8005178:	00f42400 	.word	0x00f42400
 800517c:	01e84800 	.word	0x01e84800

08005180 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005180:	b598      	push	{r3, r4, r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005184:	f7ff ff5c 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8005188:	4604      	mov	r4, r0
 800518a:	f7ff f991 	bl	80044b0 <LL_RCC_GetAHBPrescaler>
 800518e:	4603      	mov	r3, r0
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	4a03      	ldr	r2, [pc, #12]	; (80051a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd98      	pop	{r3, r4, r7, pc}
 80051a4:	08010648 	.word	0x08010648

080051a8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a8:	b598      	push	{r3, r4, r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051ac:	f7ff ffe8 	bl	8005180 <HAL_RCC_GetHCLKFreq>
 80051b0:	4604      	mov	r4, r0
 80051b2:	f7ff f9a1 	bl	80044f8 <LL_RCC_GetAPB1Prescaler>
 80051b6:	4603      	mov	r3, r0
 80051b8:	0a1b      	lsrs	r3, r3, #8
 80051ba:	4a03      	ldr	r2, [pc, #12]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd98      	pop	{r3, r4, r7, pc}
 80051c8:	08010688 	.word	0x08010688

080051cc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051cc:	b598      	push	{r3, r4, r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80051d0:	f7ff ffd6 	bl	8005180 <HAL_RCC_GetHCLKFreq>
 80051d4:	4604      	mov	r4, r0
 80051d6:	f7ff f99a 	bl	800450e <LL_RCC_GetAPB2Prescaler>
 80051da:	4603      	mov	r3, r0
 80051dc:	0adb      	lsrs	r3, r3, #11
 80051de:	4a03      	ldr	r2, [pc, #12]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd98      	pop	{r3, r4, r7, pc}
 80051ec:	08010688 	.word	0x08010688

080051f0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d02f      	beq.n	8005260 <HAL_RCC_GetClockConfig+0x70>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02c      	beq.n	8005260 <HAL_RCC_GetClockConfig+0x70>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	224f      	movs	r2, #79	; 0x4f
 800520a:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8005218:	f7ff f8db 	bl	80043d2 <LL_RCC_GetSysClkSource>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8005222:	f7ff f945 	bl	80044b0 <LL_RCC_GetAHBPrescaler>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800522c:	f7ff f964 	bl	80044f8 <LL_RCC_GetAPB1Prescaler>
 8005230:	4602      	mov	r2, r0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8005236:	f7ff f96a 	bl	800450e <LL_RCC_GetAPB2Prescaler>
 800523a:	4602      	mov	r2, r0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	611a      	str	r2, [r3, #16]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8005240:	f7ff f941 	bl	80044c6 <LL_C2_RCC_GetAHBPrescaler>
 8005244:	4602      	mov	r2, r0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = LL_RCC_GetAHB3Prescaler();
 800524a:	f7ff f948 	bl	80044de <LL_RCC_GetAHB3Prescaler>
 800524e:	4602      	mov	r2, r0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_RCC_GetClockConfig+0x78>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0207 	and.w	r2, r3, #7
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	601a      	str	r2, [r3, #0]
  }
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	58004000 	.word	0x58004000

0800526c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005284:	f7ff f92b 	bl	80044de <LL_RCC_GetAHB3Prescaler>
 8005288:	4603      	mov	r3, r0
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	4a0c      	ldr	r2, [pc, #48]	; (80052c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0c9c      	lsrs	r4, r3, #18
 80052a8:	f7fe ff1e 	bl	80040e8 <HAL_PWREx_GetVoltageRange>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4619      	mov	r1, r3
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 f80b 	bl	80052cc <RCC_SetFlashLatency>
 80052b6:	4603      	mov	r3, r0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}
 80052c0:	080106a8 	.word	0x080106a8
 80052c4:	08010648 	.word	0x08010648
 80052c8:	431bde83 	.word	0x431bde83

080052cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08e      	sub	sp, #56	; 0x38
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80052d6:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <RCC_SetFlashLatency+0xfc>)
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052e0:	6018      	str	r0, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80052e6:	4a39      	ldr	r2, [pc, #228]	; (80053cc <RCC_SetFlashLatency+0x100>)
 80052e8:	f107 0318 	add.w	r3, r7, #24
 80052ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052f0:	6018      	str	r0, [r3, #0]
 80052f2:	3304      	adds	r3, #4
 80052f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80052f6:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <RCC_SetFlashLatency+0x104>)
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005302:	2300      	movs	r3, #0
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530c:	d11d      	bne.n	800534a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800530e:	2300      	movs	r3, #0
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
 8005312:	e016      	b.n	8005342 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800531c:	4413      	add	r3, r2
 800531e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4293      	cmp	r3, r2
 8005328:	d808      	bhi.n	800533c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005332:	4413      	add	r3, r2
 8005334:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800533a:	e023      	b.n	8005384 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	3301      	adds	r3, #1
 8005340:	633b      	str	r3, [r7, #48]	; 0x30
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2b02      	cmp	r3, #2
 8005346:	d9e5      	bls.n	8005314 <RCC_SetFlashLatency+0x48>
 8005348:	e01c      	b.n	8005384 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800534a:	2300      	movs	r3, #0
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534e:	e016      	b.n	800537e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005358:	4413      	add	r3, r2
 800535a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4293      	cmp	r3, r2
 8005364:	d808      	bhi.n	8005378 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800536e:	4413      	add	r3, r2
 8005370:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005376:	e005      	b.n	8005384 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537a:	3301      	adds	r3, #1
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005380:	2b02      	cmp	r3, #2
 8005382:	d9e5      	bls.n	8005350 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <RCC_SetFlashLatency+0x108>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f023 0207 	bic.w	r2, r3, #7
 800538c:	4911      	ldr	r1, [pc, #68]	; (80053d4 <RCC_SetFlashLatency+0x108>)
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005394:	f7fd f90c 	bl	80025b0 <HAL_GetTick>
 8005398:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800539a:	e008      	b.n	80053ae <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800539c:	f7fd f908 	bl	80025b0 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e007      	b.n	80053be <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <RCC_SetFlashLatency+0x108>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1ef      	bne.n	800539c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3738      	adds	r7, #56	; 0x38
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	08010578 	.word	0x08010578
 80053cc:	08010580 	.word	0x08010580
 80053d0:	08010588 	.word	0x08010588
 80053d4:	58004000 	.word	0x58004000

080053d8 <LL_RCC_LSE_IsReady>:
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d101      	bne.n	80053f0 <LL_RCC_LSE_IsReady+0x18>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <LL_RCC_LSE_IsReady+0x1a>
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <LL_RCC_SetUSARTClockSource>:
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005406:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0c1b      	lsrs	r3, r3, #16
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <LL_RCC_SetI2SClockSource>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800543e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <LL_RCC_SetLPUARTClockSource>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <LL_RCC_SetI2CClockSource>:
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005496:	43db      	mvns	r3, r3
 8005498:	401a      	ands	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80054a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <LL_RCC_SetLPTIMClockSource>:
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	43db      	mvns	r3, r3
 80054ce:	401a      	ands	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	041b      	lsls	r3, r3, #16
 80054d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_SetRNGClockSource>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80054f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80054fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <LL_RCC_SetADCClockSource>:
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <LL_RCC_SetRTCClockSource>:
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <LL_RCC_GetRTCClockSource>:
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <LL_RCC_ForceBackupDomainReset>:
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800558e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <LL_RCC_ReleaseBackupDomainReset>:
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055b6:	bf00      	nop
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr
	...

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80055cc:	2300      	movs	r3, #0
 80055ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80055d0:	2300      	movs	r3, #0
 80055d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d058      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80055e0:	f7fe fd74 	bl	80040cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e4:	f7fc ffe4 	bl	80025b0 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055ea:	e009      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fc ffe0 	bl	80025b0 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	74fb      	strb	r3, [r7, #19]
        break;
 80055fe:	e006      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005600:	4b7b      	ldr	r3, [pc, #492]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d1ee      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d13c      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005614:	f7ff ffa7 	bl	8005566 <LL_RCC_GetRTCClockSource>
 8005618:	4602      	mov	r2, r0
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	429a      	cmp	r2, r3
 8005620:	d00f      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005630:	f7ff ffa5 	bl	800557e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005634:	f7ff ffb3 	bl	800559e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d014      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fc ffb0 	bl	80025b0 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005652:	e00b      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fc ffac 	bl	80025b0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d902      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	74fb      	strb	r3, [r7, #19]
            break;
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800566c:	f7ff feb4 	bl	80053d8 <LL_RCC_LSE_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d1ee      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005676:	7cfb      	ldrb	r3, [r7, #19]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff ff5b 	bl	800553c <LL_RCC_SetRTCClockSource>
 8005686:	e004      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005688:	7cfb      	ldrb	r3, [r7, #19]
 800568a:	74bb      	strb	r3, [r7, #18]
 800568c:	e001      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fea9 	bl	80053fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fe9e 	bl	80053fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fec0 	bl	8005454 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fee6 	bl	80054b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fedb 	bl	80054b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fed0 	bl	80054b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fea9 	bl	800547e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005734:	2b00      	cmp	r3, #0
 8005736:	d004      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fe9e 	bl	800547e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fe93 	bl	800547e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d011      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fe5e 	bl	800542a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005776:	d107      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d010      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fea5 	bl	80054e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d011      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fea3 	bl	8005512 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d107      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80057e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	58000400 	.word	0x58000400

080057f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d068      	beq.n	80058d8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc fc4a 	bl	80020b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005828:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <HAL_RTC_Init+0xf0>)
 800582a:	22ca      	movs	r2, #202	; 0xca
 800582c:	625a      	str	r2, [r3, #36]	; 0x24
 800582e:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_RTC_Init+0xf0>)
 8005830:	2253      	movs	r2, #83	; 0x53
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f87d 	bl	8005934 <RTC_EnterInitMode>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d13f      	bne.n	80058c4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005844:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <HAL_RTC_Init+0xf0>)
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <HAL_RTC_Init+0xf0>)
 800584a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800584e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005852:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <HAL_RTC_Init+0xf0>)
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4319      	orrs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	430b      	orrs	r3, r1
 8005868:	491e      	ldr	r1, [pc, #120]	; (80058e4 <HAL_RTC_Init+0xf0>)
 800586a:	4313      	orrs	r3, r2
 800586c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	491a      	ldr	r1, [pc, #104]	; (80058e4 <HAL_RTC_Init+0xf0>)
 800587a:	4313      	orrs	r3, r2
 800587c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800587e:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_RTC_Init+0xf0>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588e:	430b      	orrs	r3, r1
 8005890:	4914      	ldr	r1, [pc, #80]	; (80058e4 <HAL_RTC_Init+0xf0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f880 	bl	800599c <RTC_ExitInitMode>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10e      	bne.n	80058c4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_RTC_Init+0xf0>)
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a19      	ldr	r1, [r3, #32]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4319      	orrs	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	430b      	orrs	r3, r1
 80058be:	4909      	ldr	r1, [pc, #36]	; (80058e4 <HAL_RTC_Init+0xf0>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c4:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <HAL_RTC_Init+0xf0>)
 80058c6:	22ff      	movs	r2, #255	; 0xff
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40002800 	.word	0x40002800

080058e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <HAL_RTC_WaitForSynchro+0x48>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <HAL_RTC_WaitForSynchro+0x48>)
 80058f6:	f023 0320 	bic.w	r3, r3, #32
 80058fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80058fc:	f7fc fe58 	bl	80025b0 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005902:	e009      	b.n	8005918 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005904:	f7fc fe54 	bl	80025b0 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005912:	d901      	bls.n	8005918 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e006      	b.n	8005926 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RTC_WaitForSynchro+0x48>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ef      	beq.n	8005904 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40002800 	.word	0x40002800

08005934 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <RTC_EnterInitMode+0x64>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d120      	bne.n	800598e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800594c:	4b12      	ldr	r3, [pc, #72]	; (8005998 <RTC_EnterInitMode+0x64>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a11      	ldr	r2, [pc, #68]	; (8005998 <RTC_EnterInitMode+0x64>)
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005958:	f7fc fe2a 	bl	80025b0 <HAL_GetTick>
 800595c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800595e:	e00d      	b.n	800597c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005960:	f7fc fe26 	bl	80025b0 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800596e:	d905      	bls.n	800597c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <RTC_EnterInitMode+0x64>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <RTC_EnterInitMode+0x5a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d1e8      	bne.n	8005960 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40002800 	.word	0x40002800

0800599c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80059a8:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <RTC_ExitInitMode+0x78>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <RTC_ExitInitMode+0x78>)
 80059ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80059b4:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <RTC_ExitInitMode+0x78>)
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10c      	bne.n	80059da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ff91 	bl	80058e8 <HAL_RTC_WaitForSynchro>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01e      	beq.n	8005a0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2203      	movs	r2, #3
 80059d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e017      	b.n	8005a0a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059da:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <RTC_ExitInitMode+0x78>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	4a0d      	ldr	r2, [pc, #52]	; (8005a14 <RTC_ExitInitMode+0x78>)
 80059e0:	f023 0320 	bic.w	r3, r3, #32
 80059e4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ff7e 	bl	80058e8 <HAL_RTC_WaitForSynchro>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2203      	movs	r2, #3
 80059f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059fe:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <RTC_ExitInitMode+0x78>)
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <RTC_ExitInitMode+0x78>)
 8005a04:	f043 0320 	orr.w	r3, r3, #32
 8005a08:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40002800 	.word	0x40002800

08005a18 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a28:	4904      	ldr	r1, [pc, #16]	; (8005a3c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	608b      	str	r3, [r1, #8]
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	58000400 	.word	0x58000400

08005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr
 8005a5c:	58000400 	.word	0x58000400

08005a60 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	4a04      	ldr	r2, [pc, #16]	; (8005a7c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	58000400 	.word	0x58000400

08005a80 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005a84:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005a86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a8a:	619a      	str	r2, [r3, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	58000400 	.word	0x58000400

08005a98 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d101      	bne.n	8005aac <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e000      	b.n	8005aae <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	58000400 	.word	0x58000400

08005abc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d101      	bne.n	8005ad0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	58000400 	.word	0x58000400

08005ae0 <LL_RCC_RF_DisableReset>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <LL_RCC_IsRFUnderReset>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b14:	d101      	bne.n	8005b1a <LL_RCC_IsRFUnderReset+0x1a>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <LL_RCC_IsRFUnderReset+0x1c>
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <LL_EXTI_EnableIT_32_63+0x24>)
 8005b2e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b32:	4905      	ldr	r1, [pc, #20]	; (8005b48 <LL_EXTI_EnableIT_32_63+0x24>)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	58000800 	.word	0x58000800

08005b4c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
    return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	e04b      	b.n	8005bfa <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	799b      	ldrb	r3, [r3, #6]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fc fac8 	bl	800210c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8005b82:	f7ff ffad 	bl	8005ae0 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b86:	4b1f      	ldr	r3, [pc, #124]	; (8005c04 <HAL_SUBGHZ_Init+0xb8>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	0cdb      	lsrs	r3, r3, #19
 8005b94:	2264      	movs	r2, #100	; 0x64
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d105      	bne.n	8005bae <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e007      	b.n	8005bbe <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005bb4:	f7ff ffa4 	bl	8005b00 <LL_RCC_IsRFUnderReset>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ee      	bne.n	8005b9c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8005bbe:	f7ff ff3f 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005bc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005bc6:	f7ff ffad 	bl	8005b24 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005bca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005bce:	f7ff ff23 	bl	8005a18 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005bd2:	f7ff ff55 	bl	8005a80 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fa2f 	bl	8006044 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	719a      	strb	r2, [r3, #6]

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000004 	.word	0x20000004

08005c08 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	817b      	strh	r3, [r7, #10]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	799b      	ldrb	r3, [r3, #6]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d14a      	bne.n	8005cbc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	795b      	ldrb	r3, [r3, #5]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e045      	b.n	8005cbe <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 face 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c44:	f7ff ff0c 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005c48:	210d      	movs	r1, #13
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fa1a 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fa12 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005c60:	897b      	ldrh	r3, [r7, #10]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4619      	mov	r1, r3
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fa0c 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	82bb      	strh	r3, [r7, #20]
 8005c70:	e00a      	b.n	8005c88 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005c72:	8abb      	ldrh	r3, [r7, #20]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fa01 	bl	8006084 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c82:	8abb      	ldrh	r3, [r7, #20]
 8005c84:	3301      	adds	r3, #1
 8005c86:	82bb      	strh	r3, [r7, #20]
 8005c88:	8aba      	ldrh	r2, [r7, #20]
 8005c8a:	893b      	ldrh	r3, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d3f0      	bcc.n	8005c72 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c90:	f7ff fed6 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 fac7 	bl	8006228 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
 8005ca6:	e001      	b.n	8005cac <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	715a      	strb	r2, [r3, #5]

    return status;
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	e000      	b.n	8005cbe <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b088      	sub	sp, #32
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	817b      	strh	r3, [r7, #10]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	799b      	ldrb	r3, [r3, #6]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d14a      	bne.n	8005d7e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	795b      	ldrb	r3, [r3, #5]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e045      	b.n	8005d80 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa70 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d00:	f7ff feae 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005d04:	211d      	movs	r1, #29
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f9bc 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005d0c:	897b      	ldrh	r3, [r7, #10]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	4619      	mov	r1, r3
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 f9b4 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005d1c:	897b      	ldrh	r3, [r7, #10]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4619      	mov	r1, r3
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f9ae 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f9aa 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	82fb      	strh	r3, [r7, #22]
 8005d34:	e009      	b.n	8005d4a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f9f9 	bl	8006130 <SUBGHZSPI_Receive>
      pData++;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005d44:	8afb      	ldrh	r3, [r7, #22]
 8005d46:	3301      	adds	r3, #1
 8005d48:	82fb      	strh	r3, [r7, #22]
 8005d4a:	8afa      	ldrh	r2, [r7, #22]
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d3f1      	bcc.n	8005d36 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d52:	f7ff fe75 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fa66 	bl	8006228 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e001      	b.n	8005d6e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	715a      	strb	r2, [r3, #5]

    return status;
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
 8005d7c:	e000      	b.n	8005d80 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	461a      	mov	r2, r3
 8005d94:	460b      	mov	r3, r1
 8005d96:	72fb      	strb	r3, [r7, #11]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	799b      	ldrb	r3, [r3, #6]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d14a      	bne.n	8005e3c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	795b      	ldrb	r3, [r3, #5]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e045      	b.n	8005e3e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fa11 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	2b84      	cmp	r3, #132	; 0x84
 8005dc2:	d002      	beq.n	8005dca <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005dc4:	7afb      	ldrb	r3, [r7, #11]
 8005dc6:	2b94      	cmp	r3, #148	; 0x94
 8005dc8:	d103      	bne.n	8005dd2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	711a      	strb	r2, [r3, #4]
 8005dd0:	e002      	b.n	8005dd8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005dd8:	f7ff fe42 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	4619      	mov	r1, r3
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f94f 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	82bb      	strh	r3, [r7, #20]
 8005dea:	e00a      	b.n	8005e02 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005dec:	8abb      	ldrh	r3, [r7, #20]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 f944 	bl	8006084 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005dfc:	8abb      	ldrh	r3, [r7, #20]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	82bb      	strh	r3, [r7, #20]
 8005e02:	8aba      	ldrh	r2, [r7, #20]
 8005e04:	893b      	ldrh	r3, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3f0      	bcc.n	8005dec <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005e0a:	f7ff fe19 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	2b84      	cmp	r3, #132	; 0x84
 8005e12:	d002      	beq.n	8005e1a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fa07 	bl	8006228 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75fb      	strb	r3, [r7, #23]
 8005e26:	e001      	b.n	8005e2c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	715a      	strb	r2, [r3, #5]

    return status;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	e000      	b.n	8005e3e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b088      	sub	sp, #32
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	461a      	mov	r2, r3
 8005e52:	460b      	mov	r3, r1
 8005e54:	72fb      	strb	r3, [r7, #11]
 8005e56:	4613      	mov	r3, r2
 8005e58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	799b      	ldrb	r3, [r3, #6]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d13d      	bne.n	8005ee4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	795b      	ldrb	r3, [r3, #5]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e038      	b.n	8005ee6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f9b0 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e80:	f7ff fdee 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	4619      	mov	r1, r3
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f8fb 	bl	8006084 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005e8e:	2100      	movs	r1, #0
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f8f7 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	82fb      	strh	r3, [r7, #22]
 8005e9a:	e009      	b.n	8005eb0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e9c:	69b9      	ldr	r1, [r7, #24]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f946 	bl	8006130 <SUBGHZSPI_Receive>
      pData++;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005eaa:	8afb      	ldrh	r3, [r7, #22]
 8005eac:	3301      	adds	r3, #1
 8005eae:	82fb      	strh	r3, [r7, #22]
 8005eb0:	8afa      	ldrh	r2, [r7, #22]
 8005eb2:	893b      	ldrh	r3, [r7, #8]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d3f1      	bcc.n	8005e9c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005eb8:	f7ff fdc2 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f9b3 	bl	8006228 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e001      	b.n	8005ed4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	715a      	strb	r2, [r3, #5]

    return status;
 8005ee0:	7ffb      	ldrb	r3, [r7, #31]
 8005ee2:	e000      	b.n	8005ee6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	460b      	mov	r3, r1
 8005efc:	72fb      	strb	r3, [r7, #11]
 8005efe:	4613      	mov	r3, r2
 8005f00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	799b      	ldrb	r3, [r3, #6]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d13e      	bne.n	8005f8a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	795b      	ldrb	r3, [r3, #5]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e039      	b.n	8005f8c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f95e 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005f24:	f7ff fd9c 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005f28:	210e      	movs	r1, #14
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 f8aa 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f8a5 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	82bb      	strh	r3, [r7, #20]
 8005f3e:	e00a      	b.n	8005f56 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005f40:	8abb      	ldrh	r3, [r7, #20]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f89a 	bl	8006084 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f50:	8abb      	ldrh	r3, [r7, #20]
 8005f52:	3301      	adds	r3, #1
 8005f54:	82bb      	strh	r3, [r7, #20]
 8005f56:	8aba      	ldrh	r2, [r7, #20]
 8005f58:	893b      	ldrh	r3, [r7, #8]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3f0      	bcc.n	8005f40 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f5e:	f7ff fd6f 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f960 	bl	8006228 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
 8005f74:	e001      	b.n	8005f7a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	715a      	strb	r2, [r3, #5]

    return status;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	e000      	b.n	8005f8c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	607a      	str	r2, [r7, #4]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	72fb      	strb	r3, [r7, #11]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	799b      	ldrb	r3, [r3, #6]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d141      	bne.n	800603a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	795b      	ldrb	r3, [r3, #5]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e03c      	b.n	800603c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f909 	bl	80061e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005fce:	f7ff fd47 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005fd2:	211e      	movs	r1, #30
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f855 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f850 	bl	8006084 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f84c 	bl	8006084 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	82fb      	strh	r3, [r7, #22]
 8005ff0:	e009      	b.n	8006006 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ff2:	69b9      	ldr	r1, [r7, #24]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f89b 	bl	8006130 <SUBGHZSPI_Receive>
      pData++;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006000:	8afb      	ldrh	r3, [r7, #22]
 8006002:	3301      	adds	r3, #1
 8006004:	82fb      	strh	r3, [r7, #22]
 8006006:	8afa      	ldrh	r2, [r7, #22]
 8006008:	893b      	ldrh	r3, [r7, #8]
 800600a:	429a      	cmp	r2, r3
 800600c:	d3f1      	bcc.n	8005ff2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800600e:	f7ff fd17 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f908 	bl	8006228 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e001      	b.n	800602a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	715a      	strb	r2, [r3, #5]

    return status;
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	e000      	b.n	800603c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 8006052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006056:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006060:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 8006064:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006068:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a04      	ldr	r2, [pc, #16]	; (8006080 <SUBGHZSPI_Init+0x3c>)
 8006070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006074:	6013      	str	r3, [r2, #0]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	58010000 	.word	0x58010000

08006084 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <SUBGHZSPI_Transmit+0xa0>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	0cdb      	lsrs	r3, r3, #19
 80060a2:	2264      	movs	r2, #100	; 0x64
 80060a4:	fb02 f303 	mul.w	r3, r2, r3
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	609a      	str	r2, [r3, #8]
      break;
 80060ba:	e008      	b.n	80060ce <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b01      	subs	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <SUBGHZSPI_Transmit+0xa4>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d1ed      	bne.n	80060aa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80060ce:	4b17      	ldr	r3, [pc, #92]	; (800612c <SUBGHZSPI_Transmit+0xa8>)
 80060d0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <SUBGHZSPI_Transmit+0xa0>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	0cdb      	lsrs	r3, r3, #19
 80060e6:	2264      	movs	r2, #100	; 0x64
 80060e8:	fb02 f303 	mul.w	r3, r2, r3
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	609a      	str	r2, [r3, #8]
      break;
 80060fe:	e008      	b.n	8006112 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3b01      	subs	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006106:	4b08      	ldr	r3, [pc, #32]	; (8006128 <SUBGHZSPI_Transmit+0xa4>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d1ed      	bne.n	80060ee <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006112:	4b05      	ldr	r3, [pc, #20]	; (8006128 <SUBGHZSPI_Transmit+0xa4>)
 8006114:	68db      	ldr	r3, [r3, #12]

  return status;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
}
 8006118:	4618      	mov	r0, r3
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000004 	.word	0x20000004
 8006128:	58010000 	.word	0x58010000
 800612c:	5801000c 	.word	0x5801000c

08006130 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800613e:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <SUBGHZSPI_Receive+0xa4>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	0cdb      	lsrs	r3, r3, #19
 800614c:	2264      	movs	r2, #100	; 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d105      	bne.n	8006166 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	609a      	str	r2, [r3, #8]
      break;
 8006164:	e008      	b.n	8006178 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b01      	subs	r3, #1
 800616a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <SUBGHZSPI_Receive+0xa8>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d1ed      	bne.n	8006154 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006178:	4b18      	ldr	r3, [pc, #96]	; (80061dc <SUBGHZSPI_Receive+0xac>)
 800617a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	22ff      	movs	r2, #255	; 0xff
 8006180:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006182:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <SUBGHZSPI_Receive+0xa4>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	0cdb      	lsrs	r3, r3, #19
 8006190:	2264      	movs	r2, #100	; 0x64
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d105      	bne.n	80061aa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	609a      	str	r2, [r3, #8]
      break;
 80061a8:	e008      	b.n	80061bc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <SUBGHZSPI_Receive+0xa8>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d1ed      	bne.n	8006198 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <SUBGHZSPI_Receive+0xa8>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	701a      	strb	r2, [r3, #0]

  return status;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000004 	.word	0x20000004
 80061d8:	58010000 	.word	0x58010000
 80061dc:	5801000c 	.word	0x5801000c

080061e0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d111      	bne.n	8006214 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80061f0:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <SUBGHZ_CheckDeviceReady+0x44>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006200:	f7ff fc2e 	bl	8005a60 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f9      	bne.n	8006204 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006210:	f7ff fc16 	bl	8005a40 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f807 	bl	8006228 <SUBGHZ_WaitOnBusy>
 800621a:	4603      	mov	r3, r0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20000004 	.word	0x20000004

08006228 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <SUBGHZ_WaitOnBusy+0x58>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	0d1b      	lsrs	r3, r3, #20
 8006242:	2264      	movs	r2, #100	; 0x64
 8006244:	fb02 f303 	mul.w	r3, r2, r3
 8006248:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800624a:	f7ff fc37 	bl	8005abc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800624e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	609a      	str	r2, [r3, #8]
      break;
 8006260:	e009      	b.n	8006276 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3b01      	subs	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006268:	f7ff fc16 	bl	8005a98 <LL_PWR_IsActiveFlag_RFBUSYS>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	2b01      	cmp	r3, #1
 8006274:	d0e9      	beq.n	800624a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000004 	.word	0x20000004

08006284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e049      	b.n	800632a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f841 	bl	8006332 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 f9ce 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d001      	beq.n	800635c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e036      	b.n	80063ca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0201 	orr.w	r2, r2, #1
 8006372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIM_Base_Start_IT+0x90>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_TIM_Base_Start_IT+0x44>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006386:	d115      	bne.n	80063b4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <HAL_TIM_Base_Start_IT+0x94>)
 8006390:	4013      	ands	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b06      	cmp	r3, #6
 8006398:	d015      	beq.n	80063c6 <HAL_TIM_Base_Start_IT+0x82>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a0:	d011      	beq.n	80063c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b2:	e008      	b.n	80063c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0201 	orr.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e000      	b.n	80063c8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bc80      	pop	{r7}
 80063d2:	4770      	bx	lr
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	00010007 	.word	0x00010007

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f904 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f8f7 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f906 	bl	800663e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8da 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8cd 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f8dc 	bl	800663e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b0 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8a3 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8b2 	bl	800663e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f886 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f879 	bl	800661a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f888 	bl	800663e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb fc3e 	bl	8001ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8d7 	bl	800673a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d10e      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d107      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f8c9 	bl	800674c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d10e      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f835 	bl	8006650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0220 	mvn.w	r2, #32
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f88b 	bl	8006728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr

0800663e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
	...

08006664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a29      	ldr	r2, [pc, #164]	; (800671c <TIM_Base_SetConfig+0xb8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_Base_SetConfig+0x20>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d108      	bne.n	8006696 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a20      	ldr	r2, [pc, #128]	; (800671c <TIM_Base_SetConfig+0xb8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_Base_SetConfig+0x52>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a4:	d007      	beq.n	80066b6 <TIM_Base_SetConfig+0x52>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <TIM_Base_SetConfig+0xbc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_Base_SetConfig+0x52>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1c      	ldr	r2, [pc, #112]	; (8006724 <TIM_Base_SetConfig+0xc0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d108      	bne.n	80066c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0b      	ldr	r2, [pc, #44]	; (800671c <TIM_Base_SetConfig+0xb8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d007      	beq.n	8006704 <TIM_Base_SetConfig+0xa0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0a      	ldr	r2, [pc, #40]	; (8006720 <TIM_Base_SetConfig+0xbc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_Base_SetConfig+0xa0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <TIM_Base_SetConfig+0xc0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d103      	bne.n	800670c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	615a      	str	r2, [r3, #20]
}
 8006712:	bf00      	nop
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800

08006728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <LL_RCC_GetUSARTClockSource>:
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	401a      	ands	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4313      	orrs	r3, r2
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr

08006782 <LL_RCC_GetLPUARTClockSource>:
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800678a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4013      	ands	r3, r2
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e042      	b.n	8006838 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d106      	bne.n	80067ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fb fcad 	bl	8002124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2224      	movs	r2, #36	; 0x24
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0201 	bic.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fc4e 	bl	8007084 <UART_SetConfig>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e022      	b.n	8006838 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fe92 	bl	8007524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800680e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800681e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 ff18 	bl	8007666 <UART_CheckIdleState>
 8006836:	4603      	mov	r3, r0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006856:	2b20      	cmp	r3, #32
 8006858:	f040 8083 	bne.w	8006962 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Transmit+0x28>
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e07b      	b.n	8006964 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_UART_Transmit+0x3a>
 8006876:	2302      	movs	r3, #2
 8006878:	e074      	b.n	8006964 <HAL_UART_Transmit+0x124>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2221      	movs	r2, #33	; 0x21
 800688e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006892:	f7fb fe8d 	bl	80025b0 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	88fa      	ldrh	r2, [r7, #6]
 800689c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d108      	bne.n	80068c4 <HAL_UART_Transmit+0x84>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e003      	b.n	80068cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068d4:	e02c      	b.n	8006930 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2200      	movs	r2, #0
 80068de:	2180      	movs	r1, #128	; 0x80
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 ff0b 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e039      	b.n	8006964 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006904:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3302      	adds	r3, #2
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	e007      	b.n	800691e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	3301      	adds	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006936:	b29b      	uxth	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1cc      	bne.n	80068d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2200      	movs	r2, #0
 8006944:	2140      	movs	r1, #64	; 0x40
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fed8 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e006      	b.n	8006964 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	e000      	b.n	8006964 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006962:	2302      	movs	r3, #2
  }
}
 8006964:	4618      	mov	r0, r3
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006980:	2b20      	cmp	r3, #32
 8006982:	d142      	bne.n	8006a0a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_UART_Receive_IT+0x24>
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e03b      	b.n	8006a0c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Receive_IT+0x36>
 800699e:	2302      	movs	r3, #2
 80069a0:	e034      	b.n	8006a0c <HAL_UART_Receive_IT+0xa0>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <HAL_UART_Receive_IT+0xa8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d01f      	beq.n	80069fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d018      	beq.n	80069fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	613b      	str	r3, [r7, #16]
   return(result);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	69f9      	ldr	r1, [r7, #28]
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e6      	bne.n	80069c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	461a      	mov	r2, r3
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 ff43 	bl	800788c <UART_Start_Receive_IT>
 8006a06:	4603      	mov	r3, r0
 8006a08:	e000      	b.n	8006a0c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
  }
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3728      	adds	r7, #40	; 0x28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40008000 	.word	0x40008000

08006a18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b0ba      	sub	sp, #232	; 0xe8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a46:	4013      	ands	r3, r2
 8006a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11b      	bne.n	8006a8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d015      	beq.n	8006a8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 82d6 	beq.w	800702e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	4798      	blx	r3
      }
      return;
 8006a8a:	e2d0      	b.n	800702e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 811f 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a9a:	4b8b      	ldr	r3, [pc, #556]	; (8006cc8 <HAL_UART_IRQHandler+0x2b0>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006aa6:	4b89      	ldr	r3, [pc, #548]	; (8006ccc <HAL_UART_IRQHandler+0x2b4>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8112 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d011      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xc8>
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2201      	movs	r2, #1
 8006ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad6:	f043 0201 	orr.w	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <HAL_UART_IRQHandler+0xf8>
 8006aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2202      	movs	r2, #2
 8006afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b06:	f043 0204 	orr.w	r2, r3, #4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d011      	beq.n	8006b40 <HAL_UART_IRQHandler+0x128>
 8006b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b36:	f043 0202 	orr.w	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d017      	beq.n	8006b7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d105      	bne.n	8006b64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b5c:	4b5a      	ldr	r3, [pc, #360]	; (8006cc8 <HAL_UART_IRQHandler+0x2b0>)
 8006b5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00b      	beq.n	8006b7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <HAL_UART_IRQHandler+0x196>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 823c 	beq.w	8007032 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d013      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d105      	bne.n	8006bde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d007      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04f      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff3c 	bl	8007a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c22:	2b40      	cmp	r3, #64	; 0x40
 8006c24:	d141      	bne.n	8006caa <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1d9      	bne.n	8006c26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7e:	4a14      	ldr	r2, [pc, #80]	; (8006cd0 <HAL_UART_IRQHandler+0x2b8>)
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fc fb0b 	bl	80032a2 <HAL_DMA_Abort_IT>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d017      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca0:	e00f      	b.n	8006cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f9d9 	bl	800705a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca8:	e00b      	b.n	8006cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f9d5 	bl	800705a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb0:	e007      	b.n	8006cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f9d1 	bl	800705a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006cc0:	e1b7      	b.n	8007032 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc2:	bf00      	nop
    return;
 8006cc4:	e1b5      	b.n	8007032 <HAL_UART_IRQHandler+0x61a>
 8006cc6:	bf00      	nop
 8006cc8:	10000001 	.word	0x10000001
 8006ccc:	04000120 	.word	0x04000120
 8006cd0:	08007b5b 	.word	0x08007b5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f040 814a 	bne.w	8006f72 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 0310 	and.w	r3, r3, #16
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8143 	beq.w	8006f72 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 813c 	beq.w	8006f72 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	f040 80b5 	bne.w	8006e7c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8006d1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8187 	beq.w	8007036 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d32:	429a      	cmp	r2, r3
 8006d34:	f080 817f 	bcs.w	8007036 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 8086 	bne.w	8006e60 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1da      	bne.n	8006d54 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db0:	f023 0301 	bic.w	r3, r3, #1
 8006db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e1      	bne.n	8006d9e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3308      	adds	r3, #8
 8006dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e3      	bne.n	8006dda <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	f023 0310 	bic.w	r3, r3, #16
 8006e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e4      	bne.n	8006e20 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fc f9c3 	bl	80031e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8f9 	bl	800706c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e7a:	e0dc      	b.n	8007036 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80ce 	beq.w	800703a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80c9 	beq.w	800703a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
 8006ecc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed2:	e841 2300 	strex	r3, r2, [r1]
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1e4      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	e853 3f00 	ldrex	r3, [r3]
 8006eec:	623b      	str	r3, [r7, #32]
   return(result);
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f06:	633a      	str	r2, [r7, #48]	; 0x30
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e1      	bne.n	8006ede <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69b9      	ldr	r1, [r7, #24]
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f87e 	bl	800706c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f70:	e063      	b.n	800703a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <HAL_UART_IRQHandler+0x584>
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fa7d 	bl	8008494 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f9a:	e051      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d014      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d03a      	beq.n	800703e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
    }
    return;
 8006fd0:	e035      	b.n	800703e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x5da>
 8006fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fdcb 	bl	8007b86 <UART_EndTransmit_IT>
    return;
 8006ff0:	e026      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_UART_IRQHandler+0x5fa>
 8006ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007002:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 fa54 	bl	80084b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007010:	e016      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d010      	beq.n	8007040 <HAL_UART_IRQHandler+0x628>
 800701e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007022:	2b00      	cmp	r3, #0
 8007024:	da0c      	bge.n	8007040 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 fa3d 	bl	80084a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800702c:	e008      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
      return;
 800702e:	bf00      	nop
 8007030:	e006      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
    return;
 8007032:	bf00      	nop
 8007034:	e004      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
      return;
 8007036:	bf00      	nop
 8007038:	e002      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
      return;
 800703a:	bf00      	nop
 800703c:	e000      	b.n	8007040 <HAL_UART_IRQHandler+0x628>
    return;
 800703e:	bf00      	nop
  }
}
 8007040:	37e8      	adds	r7, #232	; 0xe8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop

08007048 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr

0800705a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
	...

08007084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007084:	b5b0      	push	{r4, r5, r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4bab      	ldr	r3, [pc, #684]	; (800735c <UART_SetConfig+0x2d8>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	69f9      	ldr	r1, [r7, #28]
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4aa0      	ldr	r2, [pc, #640]	; (8007360 <UART_SetConfig+0x2dc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d004      	beq.n	80070ec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80070f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	69f9      	ldr	r1, [r7, #28]
 8007100:	430b      	orrs	r3, r1
 8007102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	f023 010f 	bic.w	r1, r3, #15
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a91      	ldr	r2, [pc, #580]	; (8007364 <UART_SetConfig+0x2e0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d122      	bne.n	800716a <UART_SetConfig+0xe6>
 8007124:	2003      	movs	r0, #3
 8007126:	f7ff fb1a 	bl	800675e <LL_RCC_GetUSARTClockSource>
 800712a:	4603      	mov	r3, r0
 800712c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007130:	2b03      	cmp	r3, #3
 8007132:	d817      	bhi.n	8007164 <UART_SetConfig+0xe0>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0xb8>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800714d 	.word	0x0800714d
 8007140:	08007159 	.word	0x08007159
 8007144:	08007153 	.word	0x08007153
 8007148:	0800715f 	.word	0x0800715f
 800714c:	2301      	movs	r3, #1
 800714e:	76fb      	strb	r3, [r7, #27]
 8007150:	e072      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007152:	2302      	movs	r3, #2
 8007154:	76fb      	strb	r3, [r7, #27]
 8007156:	e06f      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007158:	2304      	movs	r3, #4
 800715a:	76fb      	strb	r3, [r7, #27]
 800715c:	e06c      	b.n	8007238 <UART_SetConfig+0x1b4>
 800715e:	2308      	movs	r3, #8
 8007160:	76fb      	strb	r3, [r7, #27]
 8007162:	e069      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007164:	2310      	movs	r3, #16
 8007166:	76fb      	strb	r3, [r7, #27]
 8007168:	e066      	b.n	8007238 <UART_SetConfig+0x1b4>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a7e      	ldr	r2, [pc, #504]	; (8007368 <UART_SetConfig+0x2e4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d134      	bne.n	80071de <UART_SetConfig+0x15a>
 8007174:	200c      	movs	r0, #12
 8007176:	f7ff faf2 	bl	800675e <LL_RCC_GetUSARTClockSource>
 800717a:	4603      	mov	r3, r0
 800717c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007180:	2b0c      	cmp	r3, #12
 8007182:	d829      	bhi.n	80071d8 <UART_SetConfig+0x154>
 8007184:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x108>)
 8007186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718a:	bf00      	nop
 800718c:	080071c1 	.word	0x080071c1
 8007190:	080071d9 	.word	0x080071d9
 8007194:	080071d9 	.word	0x080071d9
 8007198:	080071d9 	.word	0x080071d9
 800719c:	080071cd 	.word	0x080071cd
 80071a0:	080071d9 	.word	0x080071d9
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071d9 	.word	0x080071d9
 80071ac:	080071c7 	.word	0x080071c7
 80071b0:	080071d9 	.word	0x080071d9
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071d9 	.word	0x080071d9
 80071bc:	080071d3 	.word	0x080071d3
 80071c0:	2300      	movs	r3, #0
 80071c2:	76fb      	strb	r3, [r7, #27]
 80071c4:	e038      	b.n	8007238 <UART_SetConfig+0x1b4>
 80071c6:	2302      	movs	r3, #2
 80071c8:	76fb      	strb	r3, [r7, #27]
 80071ca:	e035      	b.n	8007238 <UART_SetConfig+0x1b4>
 80071cc:	2304      	movs	r3, #4
 80071ce:	76fb      	strb	r3, [r7, #27]
 80071d0:	e032      	b.n	8007238 <UART_SetConfig+0x1b4>
 80071d2:	2308      	movs	r3, #8
 80071d4:	76fb      	strb	r3, [r7, #27]
 80071d6:	e02f      	b.n	8007238 <UART_SetConfig+0x1b4>
 80071d8:	2310      	movs	r3, #16
 80071da:	76fb      	strb	r3, [r7, #27]
 80071dc:	e02c      	b.n	8007238 <UART_SetConfig+0x1b4>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a5f      	ldr	r2, [pc, #380]	; (8007360 <UART_SetConfig+0x2dc>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d125      	bne.n	8007234 <UART_SetConfig+0x1b0>
 80071e8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80071ec:	f7ff fac9 	bl	8006782 <LL_RCC_GetLPUARTClockSource>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f6:	d017      	beq.n	8007228 <UART_SetConfig+0x1a4>
 80071f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071fc:	d817      	bhi.n	800722e <UART_SetConfig+0x1aa>
 80071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007202:	d00b      	beq.n	800721c <UART_SetConfig+0x198>
 8007204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007208:	d811      	bhi.n	800722e <UART_SetConfig+0x1aa>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <UART_SetConfig+0x192>
 800720e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007212:	d006      	beq.n	8007222 <UART_SetConfig+0x19e>
 8007214:	e00b      	b.n	800722e <UART_SetConfig+0x1aa>
 8007216:	2300      	movs	r3, #0
 8007218:	76fb      	strb	r3, [r7, #27]
 800721a:	e00d      	b.n	8007238 <UART_SetConfig+0x1b4>
 800721c:	2302      	movs	r3, #2
 800721e:	76fb      	strb	r3, [r7, #27]
 8007220:	e00a      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007222:	2304      	movs	r3, #4
 8007224:	76fb      	strb	r3, [r7, #27]
 8007226:	e007      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007228:	2308      	movs	r3, #8
 800722a:	76fb      	strb	r3, [r7, #27]
 800722c:	e004      	b.n	8007238 <UART_SetConfig+0x1b4>
 800722e:	2310      	movs	r3, #16
 8007230:	76fb      	strb	r3, [r7, #27]
 8007232:	e001      	b.n	8007238 <UART_SetConfig+0x1b4>
 8007234:	2310      	movs	r3, #16
 8007236:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a48      	ldr	r2, [pc, #288]	; (8007360 <UART_SetConfig+0x2dc>)
 800723e:	4293      	cmp	r3, r2
 8007240:	f040 8098 	bne.w	8007374 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007244:	7efb      	ldrb	r3, [r7, #27]
 8007246:	2b08      	cmp	r3, #8
 8007248:	d823      	bhi.n	8007292 <UART_SetConfig+0x20e>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x1cc>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007275 	.word	0x08007275
 8007254:	08007293 	.word	0x08007293
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007293 	.word	0x08007293
 8007260:	08007283 	.word	0x08007283
 8007264:	08007293 	.word	0x08007293
 8007268:	08007293 	.word	0x08007293
 800726c:	08007293 	.word	0x08007293
 8007270:	0800728b 	.word	0x0800728b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7fd ff98 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8007278:	6178      	str	r0, [r7, #20]
        break;
 800727a:	e00f      	b.n	800729c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800727c:	4b3b      	ldr	r3, [pc, #236]	; (800736c <UART_SetConfig+0x2e8>)
 800727e:	617b      	str	r3, [r7, #20]
        break;
 8007280:	e00c      	b.n	800729c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007282:	f7fd fedd 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8007286:	6178      	str	r0, [r7, #20]
        break;
 8007288:	e008      	b.n	800729c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800728e:	617b      	str	r3, [r7, #20]
        break;
 8007290:	e004      	b.n	800729c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	76bb      	strb	r3, [r7, #26]
        break;
 800729a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8128 	beq.w	80074f4 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	4a31      	ldr	r2, [pc, #196]	; (8007370 <UART_SetConfig+0x2ec>)
 80072aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ae:	461a      	mov	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	4413      	add	r3, r2
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d305      	bcc.n	80072d4 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d902      	bls.n	80072da <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	76bb      	strb	r3, [r7, #26]
 80072d8:	e10c      	b.n	80074f4 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4618      	mov	r0, r3
 80072de:	f04f 0100 	mov.w	r1, #0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	4a22      	ldr	r2, [pc, #136]	; (8007370 <UART_SetConfig+0x2ec>)
 80072e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	f7f9 fcc1 	bl	8000c78 <__aeabi_uldivmod>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	020b      	lsls	r3, r1, #8
 8007308:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800730c:	0202      	lsls	r2, r0, #8
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	6849      	ldr	r1, [r1, #4]
 8007312:	0849      	lsrs	r1, r1, #1
 8007314:	4608      	mov	r0, r1
 8007316:	f04f 0100 	mov.w	r1, #0
 800731a:	1814      	adds	r4, r2, r0
 800731c:	eb43 0501 	adc.w	r5, r3, r1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	461a      	mov	r2, r3
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f9 fca3 	bl	8000c78 <__aeabi_uldivmod>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4613      	mov	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007340:	d308      	bcc.n	8007354 <UART_SetConfig+0x2d0>
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007348:	d204      	bcs.n	8007354 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	e0cf      	b.n	80074f4 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	76bb      	strb	r3, [r7, #26]
 8007358:	e0cc      	b.n	80074f4 <UART_SetConfig+0x470>
 800735a:	bf00      	nop
 800735c:	cfff69f3 	.word	0xcfff69f3
 8007360:	40008000 	.word	0x40008000
 8007364:	40013800 	.word	0x40013800
 8007368:	40004400 	.word	0x40004400
 800736c:	00f42400 	.word	0x00f42400
 8007370:	08010714 	.word	0x08010714
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737c:	d165      	bne.n	800744a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800737e:	7efb      	ldrb	r3, [r7, #27]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d828      	bhi.n	80073d6 <UART_SetConfig+0x352>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x308>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fd fefa 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 80073b4:	6178      	str	r0, [r7, #20]
        break;
 80073b6:	e013      	b.n	80073e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fd ff08 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 80073bc:	6178      	str	r0, [r7, #20]
        break;
 80073be:	e00f      	b.n	80073e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b56      	ldr	r3, [pc, #344]	; (800751c <UART_SetConfig+0x498>)
 80073c2:	617b      	str	r3, [r7, #20]
        break;
 80073c4:	e00c      	b.n	80073e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fd fe3b 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 80073ca:	6178      	str	r0, [r7, #20]
        break;
 80073cc:	e008      	b.n	80073e0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	617b      	str	r3, [r7, #20]
        break;
 80073d4:	e004      	b.n	80073e0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	76bb      	strb	r3, [r7, #26]
        break;
 80073de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8086 	beq.w	80074f4 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	4a4c      	ldr	r2, [pc, #304]	; (8007520 <UART_SetConfig+0x49c>)
 80073ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f2:	461a      	mov	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80073fa:	005a      	lsls	r2, r3, #1
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	441a      	add	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	b29b      	uxth	r3, r3
 800740e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b0f      	cmp	r3, #15
 8007414:	d916      	bls.n	8007444 <UART_SetConfig+0x3c0>
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741c:	d212      	bcs.n	8007444 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f023 030f 	bic.w	r3, r3, #15
 8007426:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	b29b      	uxth	r3, r3
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	b29a      	uxth	r2, r3
 8007434:	89fb      	ldrh	r3, [r7, #14]
 8007436:	4313      	orrs	r3, r2
 8007438:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	89fa      	ldrh	r2, [r7, #14]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	e057      	b.n	80074f4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	76bb      	strb	r3, [r7, #26]
 8007448:	e054      	b.n	80074f4 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800744a:	7efb      	ldrb	r3, [r7, #27]
 800744c:	2b08      	cmp	r3, #8
 800744e:	d828      	bhi.n	80074a2 <UART_SetConfig+0x41e>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x3d4>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	0800747d 	.word	0x0800747d
 800745c:	08007485 	.word	0x08007485
 8007460:	0800748d 	.word	0x0800748d
 8007464:	080074a3 	.word	0x080074a3
 8007468:	08007493 	.word	0x08007493
 800746c:	080074a3 	.word	0x080074a3
 8007470:	080074a3 	.word	0x080074a3
 8007474:	080074a3 	.word	0x080074a3
 8007478:	0800749b 	.word	0x0800749b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800747c:	f7fd fe94 	bl	80051a8 <HAL_RCC_GetPCLK1Freq>
 8007480:	6178      	str	r0, [r7, #20]
        break;
 8007482:	e013      	b.n	80074ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007484:	f7fd fea2 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 8007488:	6178      	str	r0, [r7, #20]
        break;
 800748a:	e00f      	b.n	80074ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800748c:	4b23      	ldr	r3, [pc, #140]	; (800751c <UART_SetConfig+0x498>)
 800748e:	617b      	str	r3, [r7, #20]
        break;
 8007490:	e00c      	b.n	80074ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007492:	f7fd fdd5 	bl	8005040 <HAL_RCC_GetSysClockFreq>
 8007496:	6178      	str	r0, [r7, #20]
        break;
 8007498:	e008      	b.n	80074ac <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749e:	617b      	str	r3, [r7, #20]
        break;
 80074a0:	e004      	b.n	80074ac <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	76bb      	strb	r3, [r7, #26]
        break;
 80074aa:	bf00      	nop
    }

    if (pclk != 0U)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d020      	beq.n	80074f4 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	4a1a      	ldr	r2, [pc, #104]	; (8007520 <UART_SetConfig+0x49c>)
 80074b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074bc:	461a      	mov	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	441a      	add	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d908      	bls.n	80074f0 <UART_SetConfig+0x46c>
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e4:	d204      	bcs.n	80074f0 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	60da      	str	r2, [r3, #12]
 80074ee:	e001      	b.n	80074f4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007510:	7ebb      	ldrb	r3, [r7, #26]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bdb0      	pop	{r4, r5, r7, pc}
 800751a:	bf00      	nop
 800751c:	00f42400 	.word	0x00f42400
 8007520:	08010714 	.word	0x08010714

08007524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01a      	beq.n	800763a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007622:	d10a      	bne.n	800763a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	430a      	orrs	r2, r1
 8007638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	605a      	str	r2, [r3, #4]
  }
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af02      	add	r7, sp, #8
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007676:	f7fa ff9b 	bl	80025b0 <HAL_GetTick>
 800767a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b08      	cmp	r3, #8
 8007688:	d10e      	bne.n	80076a8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800768a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f82f 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e025      	b.n	80076f4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d10e      	bne.n	80076d4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f819 	bl	80076fc <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e00f      	b.n	80076f4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b09c      	sub	sp, #112	; 0x70
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800770c:	e0a9      	b.n	8007862 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007714:	f000 80a5 	beq.w	8007862 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007718:	f7fa ff4a 	bl	80025b0 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007724:	429a      	cmp	r2, r3
 8007726:	d302      	bcc.n	800772e <UART_WaitOnFlagUntilTimeout+0x32>
 8007728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800772a:	2b00      	cmp	r3, #0
 800772c:	d140      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007742:	667b      	str	r3, [r7, #100]	; 0x64
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007752:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	663b      	str	r3, [r7, #96]	; 0x60
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007780:	64ba      	str	r2, [r7, #72]	; 0x48
 8007782:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800778e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e069      	b.n	8007884 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d051      	beq.n	8007862 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077cc:	d149      	bne.n	8007862 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
 80077f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	613b      	str	r3, [r7, #16]
   return(result);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	66bb      	str	r3, [r7, #104]	; 0x68
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800782a:	623a      	str	r2, [r7, #32]
 800782c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	69f9      	ldr	r1, [r7, #28]
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	61bb      	str	r3, [r7, #24]
   return(result);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2220      	movs	r2, #32
 8007852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e010      	b.n	8007884 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69da      	ldr	r2, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4013      	ands	r3, r2
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	bf0c      	ite	eq
 8007872:	2301      	moveq	r3, #1
 8007874:	2300      	movne	r3, #0
 8007876:	b2db      	uxtb	r3, r3
 8007878:	461a      	mov	r2, r3
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	429a      	cmp	r2, r3
 800787e:	f43f af46 	beq.w	800770e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3770      	adds	r7, #112	; 0x70
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800788c:	b480      	push	{r7}
 800788e:	b09d      	sub	sp, #116	; 0x74
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	88fa      	ldrh	r2, [r7, #6]
 80078a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078be:	d10e      	bne.n	80078de <UART_Start_Receive_IT+0x52>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d105      	bne.n	80078d4 <UART_Start_Receive_IT+0x48>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80078ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078d2:	e02d      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	22ff      	movs	r2, #255	; 0xff
 80078d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078dc:	e028      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <UART_Start_Receive_IT+0x76>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <UART_Start_Receive_IT+0x6c>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	22ff      	movs	r2, #255	; 0xff
 80078f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80078f6:	e01b      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	227f      	movs	r2, #127	; 0x7f
 80078fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007900:	e016      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800790a:	d10d      	bne.n	8007928 <UART_Start_Receive_IT+0x9c>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <UART_Start_Receive_IT+0x92>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	227f      	movs	r2, #127	; 0x7f
 8007918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800791c:	e008      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	223f      	movs	r2, #63	; 0x3f
 8007922:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007926:	e003      	b.n	8007930 <UART_Start_Receive_IT+0xa4>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2222      	movs	r2, #34	; 0x22
 800793c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007960:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007962:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007966:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800796e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e5      	bne.n	8007940 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797c:	d14d      	bne.n	8007a1a <UART_Start_Receive_IT+0x18e>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	429a      	cmp	r2, r3
 8007988:	d347      	bcc.n	8007a1a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	d107      	bne.n	80079a4 <UART_Start_Receive_IT+0x118>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4a38      	ldr	r2, [pc, #224]	; (8007a80 <UART_Start_Receive_IT+0x1f4>)
 80079a0:	671a      	str	r2, [r3, #112]	; 0x70
 80079a2:	e002      	b.n	80079aa <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a37      	ldr	r2, [pc, #220]	; (8007a84 <UART_Start_Receive_IT+0x1f8>)
 80079a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	461a      	mov	r2, r3
 80079ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e6      	bne.n	80079b2 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079fa:	667b      	str	r3, [r7, #100]	; 0x64
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3308      	adds	r3, #8
 8007a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a04:	637a      	str	r2, [r7, #52]	; 0x34
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e5      	bne.n	80079e4 <UART_Start_Receive_IT+0x158>
 8007a18:	e02c      	b.n	8007a74 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d107      	bne.n	8007a34 <UART_Start_Receive_IT+0x1a8>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a16      	ldr	r2, [pc, #88]	; (8007a88 <UART_Start_Receive_IT+0x1fc>)
 8007a30:	671a      	str	r2, [r3, #112]	; 0x70
 8007a32:	e002      	b.n	8007a3a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4a15      	ldr	r2, [pc, #84]	; (8007a8c <UART_Start_Receive_IT+0x200>)
 8007a38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a56:	663b      	str	r3, [r7, #96]	; 0x60
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a60:	623b      	str	r3, [r7, #32]
 8007a62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3774      	adds	r7, #116	; 0x74
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr
 8007a80:	08008195 	.word	0x08008195
 8007a84:	08007e9d 	.word	0x08007e9d
 8007a88:	08007d3d 	.word	0x08007d3d
 8007a8c:	08007bdd 	.word	0x08007bdd

08007a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b095      	sub	sp, #84	; 0x54
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e6      	bne.n	8007a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3308      	adds	r3, #8
 8007ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae0:	f023 0301 	bic.w	r3, r3, #1
 8007ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e3      	bne.n	8007aca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d118      	bne.n	8007b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f023 0310 	bic.w	r3, r3, #16
 8007b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6979      	ldr	r1, [r7, #20]
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	613b      	str	r3, [r7, #16]
   return(result);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e6      	bne.n	8007b0a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007b50:	bf00      	nop
 8007b52:	3754      	adds	r7, #84	; 0x54
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr

08007b5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff fa6e 	bl	800705a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b088      	sub	sp, #32
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6979      	ldr	r1, [r7, #20]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fa3a 	bl	8007048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bd4:	bf00      	nop
 8007bd6:	3720      	adds	r7, #32
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b096      	sub	sp, #88	; 0x58
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	2b22      	cmp	r3, #34	; 0x22
 8007bf6:	f040 8095 	bne.w	8007d24 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c04:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007c08:	b2d9      	uxtb	r1, r3
 8007c0a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	400a      	ands	r2, r1
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d178      	bne.n	8007d34 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c56:	653b      	str	r3, [r7, #80]	; 0x50
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c60:	647b      	str	r3, [r7, #68]	; 0x44
 8007c62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e6      	bne.n	8007c42 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	623b      	str	r3, [r7, #32]
   return(result);
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c94:	633a      	str	r2, [r7, #48]	; 0x30
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d12e      	bne.n	8007d1c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f023 0310 	bic.w	r3, r3, #16
 8007cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d103      	bne.n	8007d0c <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2210      	movs	r2, #16
 8007d0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff f9a9 	bl	800706c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d1a:	e00b      	b.n	8007d34 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7f9 fbf1 	bl	8001504 <HAL_UART_RxCpltCallback>
}
 8007d22:	e007      	b.n	8007d34 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0208 	orr.w	r2, r2, #8
 8007d32:	619a      	str	r2, [r3, #24]
}
 8007d34:	bf00      	nop
 8007d36:	3758      	adds	r7, #88	; 0x58
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b096      	sub	sp, #88	; 0x58
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d54:	2b22      	cmp	r3, #34	; 0x22
 8007d56:	f040 8095 	bne.w	8007e84 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d68:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d6a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d72:	4013      	ands	r3, r2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d7e:	1c9a      	adds	r2, r3, #2
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d178      	bne.n	8007e94 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8007dc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d12e      	bne.n	8007e7c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f023 0310 	bic.w	r3, r3, #16
 8007e38:	647b      	str	r3, [r7, #68]	; 0x44
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6979      	ldr	r1, [r7, #20]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e6      	bne.n	8007e24 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d103      	bne.n	8007e6c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2210      	movs	r2, #16
 8007e6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff f8f9 	bl	800706c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e7a:	e00b      	b.n	8007e94 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7f9 fb41 	bl	8001504 <HAL_UART_RxCpltCallback>
}
 8007e82:	e007      	b.n	8007e94 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	619a      	str	r2, [r3, #24]
}
 8007e94:	bf00      	nop
 8007e96:	3758      	adds	r7, #88	; 0x58
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0a6      	sub	sp, #152	; 0x98
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007eaa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed2:	2b22      	cmp	r3, #34	; 0x22
 8007ed4:	f040 814f 	bne.w	8008176 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ede:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007ee2:	e0f6      	b.n	80080d2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007eee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007ef2:	b2d9      	uxtb	r1, r3
 8007ef4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efe:	400a      	ands	r2, r1
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d053      	beq.n	8007fde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00b      	beq.n	8007f66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2201      	movs	r2, #1
 8007f54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5c:	f043 0201 	orr.w	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d011      	beq.n	8007f96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00b      	beq.n	8007f96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2202      	movs	r2, #2
 8007f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8c:	f043 0204 	orr.w	r2, r3, #4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d011      	beq.n	8007fc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007fa2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fbc:	f043 0202 	orr.w	r2, r3, #2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d006      	beq.n	8007fde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff f842 	bl	800705a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d173      	bne.n	80080d2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007ff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800800c:	66bb      	str	r3, [r7, #104]	; 0x68
 800800e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800801a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e4      	bne.n	8007fea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3308      	adds	r3, #8
 8008026:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008036:	f023 0301 	bic.w	r3, r3, #1
 800803a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008044:	657a      	str	r2, [r7, #84]	; 0x54
 8008046:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800804a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e3      	bne.n	8008020 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806a:	2b01      	cmp	r3, #1
 800806c:	d12e      	bne.n	80080cc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	f023 0310 	bic.w	r3, r3, #16
 8008088:	67bb      	str	r3, [r7, #120]	; 0x78
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008092:	643b      	str	r3, [r7, #64]	; 0x40
 8008094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b10      	cmp	r3, #16
 80080b2:	d103      	bne.n	80080bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2210      	movs	r2, #16
 80080ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fe ffd1 	bl	800706c <HAL_UARTEx_RxEventCallback>
 80080ca:	e002      	b.n	80080d2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7f9 fa19 	bl	8001504 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80080da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f47f aefe 	bne.w	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d045      	beq.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008100:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008104:	429a      	cmp	r2, r3
 8008106:	d23e      	bcs.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	3308      	adds	r3, #8
 800810e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	e853 3f00 	ldrex	r3, [r3]
 8008116:	61fb      	str	r3, [r7, #28]
   return(result);
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811e:	673b      	str	r3, [r7, #112]	; 0x70
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800812e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e5      	bne.n	8008108 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a14      	ldr	r2, [pc, #80]	; (8008190 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008140:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	e853 3f00 	ldrex	r3, [r3]
 800814e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f043 0320 	orr.w	r3, r3, #32
 8008156:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008164:	6979      	ldr	r1, [r7, #20]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	e841 2300 	strex	r3, r2, [r1]
 800816c:	613b      	str	r3, [r7, #16]
   return(result);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e6      	bne.n	8008142 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008174:	e007      	b.n	8008186 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	699a      	ldr	r2, [r3, #24]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f042 0208 	orr.w	r2, r2, #8
 8008184:	619a      	str	r2, [r3, #24]
}
 8008186:	bf00      	nop
 8008188:	3798      	adds	r7, #152	; 0x98
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	08007bdd 	.word	0x08007bdd

08008194 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b0a8      	sub	sp, #160	; 0xa0
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081a2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ca:	2b22      	cmp	r3, #34	; 0x22
 80081cc:	f040 8153 	bne.w	8008476 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081da:	e0fa      	b.n	80083d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80081ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80081f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80081f6:	4013      	ands	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	1c9a      	adds	r2, r3, #2
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b00      	cmp	r3, #0
 8008230:	d053      	beq.n	80082da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <UART_RxISR_16BIT_FIFOEN+0xce>
 800823e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2201      	movs	r2, #1
 8008250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008258:	f043 0201 	orr.w	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008262:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	2b00      	cmp	r3, #0
 800826c:	d011      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800826e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2202      	movs	r2, #2
 8008280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008288:	f043 0204 	orr.w	r2, r3, #4
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d011      	beq.n	80082c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800829e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00b      	beq.n	80082c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2204      	movs	r2, #4
 80082b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b8:	f043 0202 	orr.w	r2, r3, #2
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d006      	beq.n	80082da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fe fec4 	bl	800705a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d175      	bne.n	80083d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800830a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800830e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e4      	bne.n	80082e6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008326:	e853 3f00 	ldrex	r3, [r3]
 800832a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800832c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800832e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008332:	f023 0301 	bic.w	r3, r3, #1
 8008336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008344:	65ba      	str	r2, [r7, #88]	; 0x58
 8008346:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800834a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800834c:	e841 2300 	strex	r3, r2, [r1]
 8008350:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e1      	bne.n	800831c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d12e      	bne.n	80083cc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008384:	f023 0310 	bic.w	r3, r3, #16
 8008388:	67fb      	str	r3, [r7, #124]	; 0x7c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008392:	647b      	str	r3, [r7, #68]	; 0x44
 8008394:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008398:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e6      	bne.n	8008374 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d103      	bne.n	80083bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2210      	movs	r2, #16
 80083ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7fe fe51 	bl	800706c <HAL_UARTEx_RxEventCallback>
 80083ca:	e002      	b.n	80083d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7f9 f899 	bl	8001504 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80083da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083de:	f003 0320 	and.w	r3, r3, #32
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f47f aefa 	bne.w	80081dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d045      	beq.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008400:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008404:	429a      	cmp	r2, r3
 8008406:	d23e      	bcs.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	623b      	str	r3, [r7, #32]
   return(result);
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800841e:	677b      	str	r3, [r7, #116]	; 0x74
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008428:	633a      	str	r2, [r7, #48]	; 0x30
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800842e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e5      	bne.n	8008408 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a14      	ldr	r2, [pc, #80]	; (8008490 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008440:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f043 0320 	orr.w	r3, r3, #32
 8008456:	673b      	str	r3, [r7, #112]	; 0x70
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	69b9      	ldr	r1, [r7, #24]
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	617b      	str	r3, [r7, #20]
   return(result);
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e6      	bne.n	8008442 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008474:	e007      	b.n	8008486 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699a      	ldr	r2, [r3, #24]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0208 	orr.w	r2, r2, #8
 8008484:	619a      	str	r2, [r3, #24]
}
 8008486:	bf00      	nop
 8008488:	37a0      	adds	r7, #160	; 0xa0
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	08007d3d 	.word	0x08007d3d

08008494 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr

080084a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80084dc:	2302      	movs	r3, #2
 80084de:	e027      	b.n	8008530 <HAL_UARTEx_DisableFifoMode+0x66>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2224      	movs	r2, #36	; 0x24
 80084ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f022 0201 	bic.w	r2, r2, #1
 8008506:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800850e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr

0800853a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800854a:	2b01      	cmp	r3, #1
 800854c:	d101      	bne.n	8008552 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800854e:	2302      	movs	r3, #2
 8008550:	e02d      	b.n	80085ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2224      	movs	r2, #36	; 0x24
 800855e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f850 	bl	8008634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2220      	movs	r2, #32
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d101      	bne.n	80085ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085ca:	2302      	movs	r3, #2
 80085cc:	e02d      	b.n	800862a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2224      	movs	r2, #36	; 0x24
 80085da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 0201 	bic.w	r2, r2, #1
 80085f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f812 	bl	8008634 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008640:	2b00      	cmp	r3, #0
 8008642:	d108      	bne.n	8008656 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008654:	e031      	b.n	80086ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008656:	2308      	movs	r3, #8
 8008658:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800865a:	2308      	movs	r3, #8
 800865c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	0e5b      	lsrs	r3, r3, #25
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	0f5b      	lsrs	r3, r3, #29
 8008676:	b2db      	uxtb	r3, r3
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	7b3a      	ldrb	r2, [r7, #12]
 8008682:	4910      	ldr	r1, [pc, #64]	; (80086c4 <UARTEx_SetNbDataToProcess+0x90>)
 8008684:	5c8a      	ldrb	r2, [r1, r2]
 8008686:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800868a:	7b3a      	ldrb	r2, [r7, #12]
 800868c:	490e      	ldr	r1, [pc, #56]	; (80086c8 <UARTEx_SetNbDataToProcess+0x94>)
 800868e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008690:	fb93 f3f2 	sdiv	r3, r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	7b7a      	ldrb	r2, [r7, #13]
 80086a0:	4908      	ldr	r1, [pc, #32]	; (80086c4 <UARTEx_SetNbDataToProcess+0x90>)
 80086a2:	5c8a      	ldrb	r2, [r1, r2]
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086a8:	7b7a      	ldrb	r2, [r7, #13]
 80086aa:	4907      	ldr	r1, [pc, #28]	; (80086c8 <UARTEx_SetNbDataToProcess+0x94>)
 80086ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr
 80086c4:	0801072c 	.word	0x0801072c
 80086c8:	08010734 	.word	0x08010734

080086cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80086d0:	bf00      	nop
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr

080086d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086de:	f3ef 8305 	mrs	r3, IPSR
 80086e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80086e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10f      	bne.n	800870a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ea:	f3ef 8310 	mrs	r3, PRIMASK
 80086ee:	607b      	str	r3, [r7, #4]
  return(result);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d105      	bne.n	8008702 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086f6:	f3ef 8311 	mrs	r3, BASEPRI
 80086fa:	603b      	str	r3, [r7, #0]
  return(result);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <osKernelInitialize+0x3a>
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <osKernelInitialize+0x60>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d103      	bne.n	8008712 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800870a:	f06f 0305 	mvn.w	r3, #5
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e00c      	b.n	800872c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <osKernelInitialize+0x60>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <osKernelInitialize+0x60>)
 800871c:	2201      	movs	r2, #1
 800871e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	e002      	b.n	800872c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800872c:	68fb      	ldr	r3, [r7, #12]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr
 8008738:	200003c8 	.word	0x200003c8

0800873c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008742:	f3ef 8305 	mrs	r3, IPSR
 8008746:	60bb      	str	r3, [r7, #8]
  return(result);
 8008748:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10f      	bne.n	800876e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800874e:	f3ef 8310 	mrs	r3, PRIMASK
 8008752:	607b      	str	r3, [r7, #4]
  return(result);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800875a:	f3ef 8311 	mrs	r3, BASEPRI
 800875e:	603b      	str	r3, [r7, #0]
  return(result);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d007      	beq.n	8008776 <osKernelStart+0x3a>
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <osKernelStart+0x68>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d103      	bne.n	8008776 <osKernelStart+0x3a>
    stat = osErrorISR;
 800876e:	f06f 0305 	mvn.w	r3, #5
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e010      	b.n	8008798 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008776:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <osKernelStart+0x68>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d109      	bne.n	8008792 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800877e:	f7ff ffa5 	bl	80086cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <osKernelStart+0x68>)
 8008784:	2202      	movs	r2, #2
 8008786:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008788:	f001 fd90 	bl	800a2ac <vTaskStartScheduler>
      stat = osOK;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e002      	b.n	8008798 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008796:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008798:	68fb      	ldr	r3, [r7, #12]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	200003c8 	.word	0x200003c8

080087a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b090      	sub	sp, #64	; 0x40
 80087ac:	af04      	add	r7, sp, #16
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80087b4:	2300      	movs	r3, #0
 80087b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b8:	f3ef 8305 	mrs	r3, IPSR
 80087bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80087be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 808f 	bne.w	80088e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087c6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d105      	bne.n	80087de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087d2:	f3ef 8311 	mrs	r3, BASEPRI
 80087d6:	617b      	str	r3, [r7, #20]
  return(result);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <osThreadNew+0x3e>
 80087de:	4b44      	ldr	r3, [pc, #272]	; (80088f0 <osThreadNew+0x148>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d07e      	beq.n	80088e4 <osThreadNew+0x13c>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d07b      	beq.n	80088e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80087f0:	2318      	movs	r3, #24
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80087f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d045      	beq.n	8008890 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d002      	beq.n	8008812 <osThreadNew+0x6a>
        name = attr->name;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <osThreadNew+0x90>
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	2b38      	cmp	r3, #56	; 0x38
 800882a:	d805      	bhi.n	8008838 <osThreadNew+0x90>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <osThreadNew+0x94>
        return (NULL);
 8008838:	2300      	movs	r3, #0
 800883a:	e054      	b.n	80088e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	089b      	lsrs	r3, r3, #2
 800884a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00e      	beq.n	8008872 <osThreadNew+0xca>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2bbb      	cmp	r3, #187	; 0xbb
 800885a:	d90a      	bls.n	8008872 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008860:	2b00      	cmp	r3, #0
 8008862:	d006      	beq.n	8008872 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <osThreadNew+0xca>
        mem = 1;
 800886c:	2301      	movs	r3, #1
 800886e:	623b      	str	r3, [r7, #32]
 8008870:	e010      	b.n	8008894 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10c      	bne.n	8008894 <osThreadNew+0xec>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <osThreadNew+0xec>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <osThreadNew+0xec>
          mem = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	e001      	b.n	8008894 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d110      	bne.n	80088bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80088a2:	9202      	str	r2, [sp, #8]
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f001 fb43 	bl	8009f3c <xTaskCreateStatic>
 80088b6:	4603      	mov	r3, r0
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	e013      	b.n	80088e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d110      	bne.n	80088e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	f107 0310 	add.w	r3, r7, #16
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fb8e 	bl	8009ff6 <xTaskCreate>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d001      	beq.n	80088e4 <osThreadNew+0x13c>
          hTask = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088e4:	693b      	ldr	r3, [r7, #16]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3730      	adds	r7, #48	; 0x30
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200003c8 	.word	0x200003c8

080088f4 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f002 ffa7 	bl	800b850 <pvTimerGetTimerID>
 8008902:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <TimerCallback+0x22>
    callb->func (callb->arg);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	6852      	ldr	r2, [r2, #4]
 8008912:	4610      	mov	r0, r2
 8008914:	4798      	blx	r3
  }
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	; 0x38
 8008924:	af02      	add	r7, sp, #8
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	607a      	str	r2, [r7, #4]
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	460b      	mov	r3, r1
 800892e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008934:	f3ef 8305 	mrs	r3, IPSR
 8008938:	61bb      	str	r3, [r7, #24]
  return(result);
 800893a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800893c:	2b00      	cmp	r3, #0
 800893e:	d16a      	bne.n	8008a16 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008940:	f3ef 8310 	mrs	r3, PRIMASK
 8008944:	617b      	str	r3, [r7, #20]
  return(result);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d105      	bne.n	8008958 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800894c:	f3ef 8311 	mrs	r3, BASEPRI
 8008950:	613b      	str	r3, [r7, #16]
  return(result);
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <osTimerNew+0x40>
 8008958:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <osTimerNew+0x100>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d05a      	beq.n	8008a16 <osTimerNew+0xf6>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d057      	beq.n	8008a16 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008966:	2008      	movs	r0, #8
 8008968:	f003 fa66 	bl	800be38 <pvPortMalloc>
 800896c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d050      	beq.n	8008a16 <osTimerNew+0xf6>
      callb->func = func;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <osTimerNew+0x6c>
        reload = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
 800898a:	e001      	b.n	8008990 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8008990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008994:	623b      	str	r3, [r7, #32]
      name = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01c      	beq.n	80089da <osTimerNew+0xba>
        if (attr->name != NULL) {
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d002      	beq.n	80089ae <osTimerNew+0x8e>
          name = attr->name;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <osTimerNew+0xa4>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2b2b      	cmp	r3, #43	; 0x2b
 80089bc:	d902      	bls.n	80089c4 <osTimerNew+0xa4>
          mem = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	623b      	str	r3, [r7, #32]
 80089c2:	e00c      	b.n	80089de <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d108      	bne.n	80089de <osTimerNew+0xbe>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <osTimerNew+0xbe>
            mem = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	623b      	str	r3, [r7, #32]
 80089d8:	e001      	b.n	80089de <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d10c      	bne.n	80089fe <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	4b0e      	ldr	r3, [pc, #56]	; (8008a24 <osTimerNew+0x104>)
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	2101      	movs	r1, #1
 80089f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f6:	f002 fbae 	bl	800b156 <xTimerCreateStatic>
 80089fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80089fc:	e00b      	b.n	8008a16 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d108      	bne.n	8008a16 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008a04:	4b07      	ldr	r3, [pc, #28]	; (8008a24 <osTimerNew+0x104>)
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a10:	f002 fb80 	bl	800b114 <xTimerCreate>
 8008a14:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3730      	adds	r7, #48	; 0x30
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	200003c8 	.word	0x200003c8
 8008a24:	080088f5 	.word	0x080088f5

08008a28 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08a      	sub	sp, #40	; 0x28
 8008a2c:	af02      	add	r7, sp, #8
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a36:	f3ef 8305 	mrs	r3, IPSR
 8008a3a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a3c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10f      	bne.n	8008a62 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a42:	f3ef 8310 	mrs	r3, PRIMASK
 8008a46:	613b      	str	r3, [r7, #16]
  return(result);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d105      	bne.n	8008a5a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a52:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <osTimerStart+0x42>
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <osTimerStart+0x7c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d103      	bne.n	8008a6a <osTimerStart+0x42>
    stat = osErrorISR;
 8008a62:	f06f 0305 	mvn.w	r3, #5
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	e017      	b.n	8008a9a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <osTimerStart+0x50>
    stat = osErrorParameter;
 8008a70:	f06f 0303 	mvn.w	r3, #3
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e010      	b.n	8008a9a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	2104      	movs	r1, #4
 8008a82:	69b8      	ldr	r0, [r7, #24]
 8008a84:	f002 fbe0 	bl	800b248 <xTimerGenericCommand>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d102      	bne.n	8008a94 <osTimerStart+0x6c>
      stat = osOK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]
 8008a92:	e002      	b.n	8008a9a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8008a94:	f06f 0302 	mvn.w	r3, #2
 8008a98:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008a9a:	69fb      	ldr	r3, [r7, #28]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200003c8 	.word	0x200003c8

08008aa8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08c      	sub	sp, #48	; 0x30
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab8:	f3ef 8305 	mrs	r3, IPSR
 8008abc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008abe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f040 8086 	bne.w	8008bd2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aca:	617b      	str	r3, [r7, #20]
  return(result);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d105      	bne.n	8008ade <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ad6:	613b      	str	r3, [r7, #16]
  return(result);
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <osSemaphoreNew+0x3e>
 8008ade:	4b3f      	ldr	r3, [pc, #252]	; (8008bdc <osSemaphoreNew+0x134>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d075      	beq.n	8008bd2 <osSemaphoreNew+0x12a>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d072      	beq.n	8008bd2 <osSemaphoreNew+0x12a>
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d86e      	bhi.n	8008bd2 <osSemaphoreNew+0x12a>
    mem = -1;
 8008af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d015      	beq.n	8008b2c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d006      	beq.n	8008b16 <osSemaphoreNew+0x6e>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8008b0e:	d902      	bls.n	8008b16 <osSemaphoreNew+0x6e>
        mem = 1;
 8008b10:	2301      	movs	r3, #1
 8008b12:	623b      	str	r3, [r7, #32]
 8008b14:	e00c      	b.n	8008b30 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d108      	bne.n	8008b30 <osSemaphoreNew+0x88>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d104      	bne.n	8008b30 <osSemaphoreNew+0x88>
          mem = 0;
 8008b26:	2300      	movs	r3, #0
 8008b28:	623b      	str	r3, [r7, #32]
 8008b2a:	e001      	b.n	8008b30 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b36:	d04c      	beq.n	8008bd2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d128      	bne.n	8008b90 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d10a      	bne.n	8008b5a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2203      	movs	r2, #3
 8008b4a:	9200      	str	r2, [sp, #0]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2100      	movs	r1, #0
 8008b50:	2001      	movs	r0, #1
 8008b52:	f000 fa4d 	bl	8008ff0 <xQueueGenericCreateStatic>
 8008b56:	6278      	str	r0, [r7, #36]	; 0x24
 8008b58:	e005      	b.n	8008b66 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008b5a:	2203      	movs	r2, #3
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f000 fabe 	bl	80090e0 <xQueueGenericCreate>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d022      	beq.n	8008bb2 <osSemaphoreNew+0x10a>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01f      	beq.n	8008bb2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b72:	2300      	movs	r3, #0
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b7a:	f000 fb7f 	bl	800927c <xQueueGenericSend>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d016      	beq.n	8008bb2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b86:	f001 f809 	bl	8009b9c <vQueueDelete>
            hSemaphore = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b8e:	e010      	b.n	8008bb2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d108      	bne.n	8008ba8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fb01 	bl	80091a6 <xQueueCreateCountingSemaphoreStatic>
 8008ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8008ba6:	e004      	b.n	8008bb2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 fb32 	bl	8009214 <xQueueCreateCountingSemaphore>
 8008bb0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00c      	beq.n	8008bd2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <osSemaphoreNew+0x11e>
          name = attr->name;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	e001      	b.n	8008bca <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008bca:	69f9      	ldr	r1, [r7, #28]
 8008bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bce:	f001 f92f 	bl	8009e30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3728      	adds	r7, #40	; 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	200003c8 	.word	0x200003c8

08008be0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d103      	bne.n	8008c00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008bf8:	f06f 0303 	mvn.w	r3, #3
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	e04b      	b.n	8008c98 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c00:	f3ef 8305 	mrs	r3, IPSR
 8008c04:	617b      	str	r3, [r7, #20]
  return(result);
 8008c06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10f      	bne.n	8008c2c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c10:	613b      	str	r3, [r7, #16]
  return(result);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c18:	f3ef 8311 	mrs	r3, BASEPRI
 8008c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d026      	beq.n	8008c72 <osSemaphoreAcquire+0x92>
 8008c24:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <osSemaphoreAcquire+0xc4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d122      	bne.n	8008c72 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008c32:	f06f 0303 	mvn.w	r3, #3
 8008c36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008c38:	e02d      	b.n	8008c96 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	461a      	mov	r2, r3
 8008c44:	2100      	movs	r1, #0
 8008c46:	69b8      	ldr	r0, [r7, #24]
 8008c48:	f000 ff28 	bl	8009a9c <xQueueReceiveFromISR>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d003      	beq.n	8008c5a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008c52:	f06f 0302 	mvn.w	r3, #2
 8008c56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008c58:	e01d      	b.n	8008c96 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d01a      	beq.n	8008c96 <osSemaphoreAcquire+0xb6>
 8008c60:	4b11      	ldr	r3, [pc, #68]	; (8008ca8 <osSemaphoreAcquire+0xc8>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008c70:	e011      	b.n	8008c96 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	69b8      	ldr	r0, [r7, #24]
 8008c76:	f000 fe05 	bl	8009884 <xQueueSemaphoreTake>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d00b      	beq.n	8008c98 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008c86:	f06f 0301 	mvn.w	r3, #1
 8008c8a:	61fb      	str	r3, [r7, #28]
 8008c8c:	e004      	b.n	8008c98 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008c8e:	f06f 0302 	mvn.w	r3, #2
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e000      	b.n	8008c98 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008c96:	bf00      	nop
      }
    }
  }

  return (stat);
 8008c98:	69fb      	ldr	r3, [r7, #28]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3720      	adds	r7, #32
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200003c8 	.word	0x200003c8
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d103      	bne.n	8008cca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008cc2:	f06f 0303 	mvn.w	r3, #3
 8008cc6:	61fb      	str	r3, [r7, #28]
 8008cc8:	e03e      	b.n	8008d48 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cca:	f3ef 8305 	mrs	r3, IPSR
 8008cce:	617b      	str	r3, [r7, #20]
  return(result);
 8008cd0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10f      	bne.n	8008cf6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8008cda:	613b      	str	r3, [r7, #16]
  return(result);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ce6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01e      	beq.n	8008d2c <osSemaphoreRelease+0x80>
 8008cee:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <osSemaphoreRelease+0xa8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d11a      	bne.n	8008d2c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008cfa:	f107 0308 	add.w	r3, r7, #8
 8008cfe:	4619      	mov	r1, r3
 8008d00:	69b8      	ldr	r0, [r7, #24]
 8008d02:	f000 fc51 	bl	80095a8 <xQueueGiveFromISR>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d003      	beq.n	8008d14 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008d0c:	f06f 0302 	mvn.w	r3, #2
 8008d10:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d12:	e018      	b.n	8008d46 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d015      	beq.n	8008d46 <osSemaphoreRelease+0x9a>
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <osSemaphoreRelease+0xac>)
 8008d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d2a:	e00c      	b.n	8008d46 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	69b8      	ldr	r0, [r7, #24]
 8008d34:	f000 faa2 	bl	800927c <xQueueGenericSend>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d004      	beq.n	8008d48 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008d3e:	f06f 0302 	mvn.w	r3, #2
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	e000      	b.n	8008d48 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d46:	bf00      	nop
    }
  }

  return (stat);
 8008d48:	69fb      	ldr	r3, [r7, #28]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3720      	adds	r7, #32
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200003c8 	.word	0x200003c8
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4a06      	ldr	r2, [pc, #24]	; (8008d84 <vApplicationGetIdleTaskMemory+0x28>)
 8008d6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <vApplicationGetIdleTaskMemory+0x2c>)
 8008d72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2280      	movs	r2, #128	; 0x80
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr
 8008d84:	200003cc 	.word	0x200003cc
 8008d88:	20000488 	.word	0x20000488

08008d8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4a07      	ldr	r2, [pc, #28]	; (8008db8 <vApplicationGetTimerTaskMemory+0x2c>)
 8008d9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4a06      	ldr	r2, [pc, #24]	; (8008dbc <vApplicationGetTimerTaskMemory+0x30>)
 8008da2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008daa:	601a      	str	r2, [r3, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000688 	.word	0x20000688
 8008dbc:	20000744 	.word	0x20000744

08008dc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0208 	add.w	r2, r3, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f103 0208 	add.w	r2, r3, #8
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f103 0208 	add.w	r2, r3, #8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr

08008dfe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bc80      	pop	{r7}
 8008e14:	4770      	bx	lr

08008e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	601a      	str	r2, [r3, #0]
}
 8008e52:	bf00      	nop
 8008e54:	3714      	adds	r7, #20
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e72:	d103      	bne.n	8008e7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e00c      	b.n	8008e96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3308      	adds	r3, #8
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e002      	b.n	8008e8a <vListInsert+0x2e>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d2f6      	bcs.n	8008e84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bc80      	pop	{r7}
 8008eca:	4770      	bx	lr

08008ecc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6892      	ldr	r2, [r2, #8]
 8008ee2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6852      	ldr	r2, [r2, #4]
 8008eec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d103      	bne.n	8008f00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689a      	ldr	r2, [r3, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	1e5a      	subs	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bc80      	pop	{r7}
 8008f1c:	4770      	bx	lr
	...

08008f20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f4a:	f002 fd8f 	bl	800ba6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f5a:	fb01 f303 	mul.w	r3, r1, r3
 8008f5e:	441a      	add	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	68f9      	ldr	r1, [r7, #12]
 8008f7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	441a      	add	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	22ff      	movs	r2, #255	; 0xff
 8008f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	22ff      	movs	r2, #255	; 0xff
 8008f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d114      	bne.n	8008fca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01a      	beq.n	8008fde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3310      	adds	r3, #16
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 fc71 	bl	800a894 <xTaskRemoveFromEventList>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d012      	beq.n	8008fde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fb8:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <xQueueGenericReset+0xcc>)
 8008fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fbe:	601a      	str	r2, [r3, #0]
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	e009      	b.n	8008fde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3310      	adds	r3, #16
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fef6 	bl	8008dc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3324      	adds	r3, #36	; 0x24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fef1 	bl	8008dc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fde:	f002 fd75 	bl	800bacc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fe2:	2301      	movs	r3, #1
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	e000ed04 	.word	0xe000ed04

08008ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08e      	sub	sp, #56	; 0x38
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10a      	bne.n	8009036 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <xQueueGenericCreateStatic+0x52>
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <xQueueGenericCreateStatic+0x56>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <xQueueGenericCreateStatic+0x58>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	623b      	str	r3, [r7, #32]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <xQueueGenericCreateStatic+0x7e>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <xQueueGenericCreateStatic+0x82>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <xQueueGenericCreateStatic+0x84>
 8009072:	2300      	movs	r3, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10a      	bne.n	800908e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	61fb      	str	r3, [r7, #28]
}
 800908a:	bf00      	nop
 800908c:	e7fe      	b.n	800908c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800908e:	2350      	movs	r3, #80	; 0x50
 8009090:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2b50      	cmp	r3, #80	; 0x50
 8009096:	d00a      	beq.n	80090ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	61bb      	str	r3, [r7, #24]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80090ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00d      	beq.n	80090d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	4613      	mov	r3, r2
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 f845 	bl	8009160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80090d8:	4618      	mov	r0, r3
 80090da:	3730      	adds	r7, #48	; 0x30
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08a      	sub	sp, #40	; 0x28
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	4613      	mov	r3, r2
 80090ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <xQueueGenericCreate+0x2a>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	613b      	str	r3, [r7, #16]
}
 8009106:	bf00      	nop
 8009108:	e7fe      	b.n	8009108 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e004      	b.n	8009120 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	3350      	adds	r3, #80	; 0x50
 8009124:	4618      	mov	r0, r3
 8009126:	f002 fe87 	bl	800be38 <pvPortMalloc>
 800912a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d011      	beq.n	8009156 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	3350      	adds	r3, #80	; 0x50
 800913a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009144:	79fa      	ldrb	r2, [r7, #7]
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	697a      	ldr	r2, [r7, #20]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 f805 	bl	8009160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009156:	69bb      	ldr	r3, [r7, #24]
	}
 8009158:	4618      	mov	r0, r3
 800915a:	3720      	adds	r7, #32
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e002      	b.n	8009182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800918e:	2101      	movs	r1, #1
 8009190:	69b8      	ldr	r0, [r7, #24]
 8009192:	f7ff fec5 	bl	8008f20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b08a      	sub	sp, #40	; 0x28
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10a      	bne.n	80091ce <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80091b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	61bb      	str	r3, [r7, #24]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d90a      	bls.n	80091ec <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	617b      	str	r3, [r7, #20]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80091ec:	2302      	movs	r3, #2
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	2100      	movs	r1, #0
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f7ff fefa 	bl	8008ff0 <xQueueGenericCreateStatic>
 80091fc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800920a:	69fb      	ldr	r3, [r7, #28]
	}
 800920c:	4618      	mov	r0, r3
 800920e:	3720      	adds	r7, #32
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	613b      	str	r3, [r7, #16]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	429a      	cmp	r2, r3
 8009240:	d90a      	bls.n	8009258 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	60fb      	str	r3, [r7, #12]
}
 8009254:	bf00      	nop
 8009256:	e7fe      	b.n	8009256 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009258:	2202      	movs	r2, #2
 800925a:	2100      	movs	r1, #0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f7ff ff3f 	bl	80090e0 <xQueueGenericCreate>
 8009262:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009270:	697b      	ldr	r3, [r7, #20]
	}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800928a:	2300      	movs	r3, #0
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <xQueueGenericSend+0x32>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <xQueueGenericSend+0x40>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueGenericSend+0x44>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueGenericSend+0x46>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <xQueueGenericSend+0x60>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSend+0x6e>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <xQueueGenericSend+0x72>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <xQueueGenericSend+0x74>
 80092ee:	2300      	movs	r3, #0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <xQueueGenericSend+0x8e>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	623b      	str	r3, [r7, #32]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800930a:	f001 fcdd 	bl	800acc8 <xTaskGetSchedulerState>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <xQueueGenericSend+0x9e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <xQueueGenericSend+0xa2>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <xQueueGenericSend+0xa4>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10a      	bne.n	800933a <xQueueGenericSend+0xbe>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	61fb      	str	r3, [r7, #28]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800933a:	f002 fb97 	bl	800ba6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <xQueueGenericSend+0xd4>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d129      	bne.n	80093a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009356:	f000 fc5b 	bl	8009c10 <prvCopyDataToQueue>
 800935a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	3324      	adds	r3, #36	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f001 fa93 	bl	800a894 <xTaskRemoveFromEventList>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d013      	beq.n	800939c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009374:	4b3f      	ldr	r3, [pc, #252]	; (8009474 <xQueueGenericSend+0x1f8>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	e00a      	b.n	800939c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b39      	ldr	r3, [pc, #228]	; (8009474 <xQueueGenericSend+0x1f8>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800939c:	f002 fb96 	bl	800bacc <vPortExitCritical>
				return pdPASS;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e063      	b.n	800946c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093aa:	f002 fb8f 	bl	800bacc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e05c      	b.n	800946c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b8:	f107 0314 	add.w	r3, r7, #20
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 facf 	bl	800a960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c6:	f002 fb81 	bl	800bacc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093ca:	f000 ffdf 	bl	800a38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ce:	f002 fb4d 	bl	800ba6c <vPortEnterCritical>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093de:	d103      	bne.n	80093e8 <xQueueGenericSend+0x16c>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f4:	d103      	bne.n	80093fe <xQueueGenericSend+0x182>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fe:	f002 fb65 	bl	800bacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009402:	1d3a      	adds	r2, r7, #4
 8009404:	f107 0314 	add.w	r3, r7, #20
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f001 fabe 	bl	800a98c <xTaskCheckForTimeOut>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d124      	bne.n	8009460 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009418:	f000 fcf2 	bl	8009e00 <prvIsQueueFull>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d018      	beq.n	8009454 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	3310      	adds	r3, #16
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f9e2 	bl	800a7f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009432:	f000 fc7d 	bl	8009d30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009436:	f000 ffed 	bl	800a414 <xTaskResumeAll>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	f47f af7c 	bne.w	800933a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009442:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <xQueueGenericSend+0x1f8>)
 8009444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	e772      	b.n	800933a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009456:	f000 fc6b 	bl	8009d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800945a:	f000 ffdb 	bl	800a414 <xTaskResumeAll>
 800945e:	e76c      	b.n	800933a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009462:	f000 fc65 	bl	8009d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009466:	f000 ffd5 	bl	800a414 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800946a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800946c:	4618      	mov	r0, r3
 800946e:	3738      	adds	r7, #56	; 0x38
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08e      	sub	sp, #56	; 0x38
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <xQueueGenericSendFromISR+0x3c>
 80094ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <xQueueGenericSendFromISR+0x40>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <xQueueGenericSendFromISR+0x42>
 80094b8:	2300      	movs	r3, #0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	623b      	str	r3, [r7, #32]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSendFromISR+0x6a>
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSendFromISR+0x6e>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSendFromISR+0x70>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	61fb      	str	r3, [r7, #28]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009502:	f002 fc5b 	bl	800bdbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009506:	f3ef 8211 	mrs	r2, BASEPRI
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	61ba      	str	r2, [r7, #24]
 800951c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800951e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <xQueueGenericSendFromISR+0xbc>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d12c      	bne.n	800958e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009544:	f000 fb64 	bl	8009c10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009548:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009550:	d112      	bne.n	8009578 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	2b00      	cmp	r3, #0
 8009558:	d016      	beq.n	8009588 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	3324      	adds	r3, #36	; 0x24
 800955e:	4618      	mov	r0, r3
 8009560:	f001 f998 	bl	800a894 <xTaskRemoveFromEventList>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00e      	beq.n	8009588 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e007      	b.n	8009588 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800957c:	3301      	adds	r3, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	b25a      	sxtb	r2, r3
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009588:	2301      	movs	r3, #1
 800958a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800958c:	e001      	b.n	8009592 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800958e:	2300      	movs	r3, #0
 8009590:	637b      	str	r3, [r7, #52]	; 0x34
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800959c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3738      	adds	r7, #56	; 0x38
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08e      	sub	sp, #56	; 0x38
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10a      	bne.n	80095d2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	623b      	str	r3, [r7, #32]
}
 80095ce:	bf00      	nop
 80095d0:	e7fe      	b.n	80095d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	61fb      	str	r3, [r7, #28]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <xQueueGiveFromISR+0x58>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <xQueueGiveFromISR+0x5c>
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <xQueueGiveFromISR+0x5e>
 8009604:	2300      	movs	r3, #0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <xQueueGiveFromISR+0x78>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	61bb      	str	r3, [r7, #24]
}
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009620:	f002 fbcc 	bl	800bdbc <vPortValidateInterruptPriority>
	__asm volatile
 8009624:	f3ef 8211 	mrs	r2, BASEPRI
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	617a      	str	r2, [r7, #20]
 800963a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800963c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800963e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800964c:	429a      	cmp	r2, r3
 800964e:	d22b      	bcs.n	80096a8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966a:	d112      	bne.n	8009692 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800966c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d016      	beq.n	80096a2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	3324      	adds	r3, #36	; 0x24
 8009678:	4618      	mov	r0, r3
 800967a:	f001 f90b 	bl	800a894 <xTaskRemoveFromEventList>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00e      	beq.n	80096a2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00b      	beq.n	80096a2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2201      	movs	r2, #1
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e007      	b.n	80096a2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009696:	3301      	adds	r3, #1
 8009698:	b2db      	uxtb	r3, r3
 800969a:	b25a      	sxtb	r2, r3
 800969c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096a2:	2301      	movs	r3, #1
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
 80096a6:	e001      	b.n	80096ac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f383 8811 	msr	BASEPRI, r3
}
 80096b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3738      	adds	r7, #56	; 0x38
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	; 0x30
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <xQueueReceive+0x30>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	623b      	str	r3, [r7, #32]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d103      	bne.n	8009702 <xQueueReceive+0x3e>
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <xQueueReceive+0x42>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueReceive+0x44>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <xQueueReceive+0x5e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	61fb      	str	r3, [r7, #28]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009722:	f001 fad1 	bl	800acc8 <xTaskGetSchedulerState>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <xQueueReceive+0x6e>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <xQueueReceive+0x72>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <xQueueReceive+0x74>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xQueueReceive+0x8e>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	61bb      	str	r3, [r7, #24]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009752:	f002 f98b 	bl	800ba6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d01f      	beq.n	80097a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009766:	f000 fabd 	bl	8009ce4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	1e5a      	subs	r2, r3, #1
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00f      	beq.n	800979a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977c:	3310      	adds	r3, #16
 800977e:	4618      	mov	r0, r3
 8009780:	f001 f888 	bl	800a894 <xTaskRemoveFromEventList>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d007      	beq.n	800979a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800978a:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <xQueueReceive+0x1bc>)
 800978c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009790:	601a      	str	r2, [r3, #0]
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800979a:	f002 f997 	bl	800bacc <vPortExitCritical>
				return pdPASS;
 800979e:	2301      	movs	r3, #1
 80097a0:	e069      	b.n	8009876 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097a8:	f002 f990 	bl	800bacc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e062      	b.n	8009876 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097b6:	f107 0310 	add.w	r3, r7, #16
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 f8d0 	bl	800a960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097c4:	f002 f982 	bl	800bacc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097c8:	f000 fde0 	bl	800a38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097cc:	f002 f94e 	bl	800ba6c <vPortEnterCritical>
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097d6:	b25b      	sxtb	r3, r3
 80097d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097dc:	d103      	bne.n	80097e6 <xQueueReceive+0x122>
 80097de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f2:	d103      	bne.n	80097fc <xQueueReceive+0x138>
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097fc:	f002 f966 	bl	800bacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009800:	1d3a      	adds	r2, r7, #4
 8009802:	f107 0310 	add.w	r3, r7, #16
 8009806:	4611      	mov	r1, r2
 8009808:	4618      	mov	r0, r3
 800980a:	f001 f8bf 	bl	800a98c <xTaskCheckForTimeOut>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d123      	bne.n	800985c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f000 fadd 	bl	8009dd4 <prvIsQueueEmpty>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d017      	beq.n	8009850 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009822:	3324      	adds	r3, #36	; 0x24
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	4611      	mov	r1, r2
 8009828:	4618      	mov	r0, r3
 800982a:	f000 ffe3 	bl	800a7f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800982e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009830:	f000 fa7e 	bl	8009d30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009834:	f000 fdee 	bl	800a414 <xTaskResumeAll>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d189      	bne.n	8009752 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800983e:	4b10      	ldr	r3, [pc, #64]	; (8009880 <xQueueReceive+0x1bc>)
 8009840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	e780      	b.n	8009752 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009852:	f000 fa6d 	bl	8009d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009856:	f000 fddd 	bl	800a414 <xTaskResumeAll>
 800985a:	e77a      	b.n	8009752 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800985c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985e:	f000 fa67 	bl	8009d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009862:	f000 fdd7 	bl	800a414 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009868:	f000 fab4 	bl	8009dd4 <prvIsQueueEmpty>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	f43f af6f 	beq.w	8009752 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009876:	4618      	mov	r0, r3
 8009878:	3730      	adds	r7, #48	; 0x30
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	e000ed04 	.word	0xe000ed04

08009884 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08e      	sub	sp, #56	; 0x38
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800988e:	2300      	movs	r3, #0
 8009890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800989a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10a      	bne.n	80098b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	623b      	str	r3, [r7, #32]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00a      	beq.n	80098d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61fb      	str	r3, [r7, #28]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098d4:	f001 f9f8 	bl	800acc8 <xTaskGetSchedulerState>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <xQueueSemaphoreTake+0x60>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <xQueueSemaphoreTake+0x64>
 80098e4:	2301      	movs	r3, #1
 80098e6:	e000      	b.n	80098ea <xQueueSemaphoreTake+0x66>
 80098e8:	2300      	movs	r3, #0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	61bb      	str	r3, [r7, #24]
}
 8009900:	bf00      	nop
 8009902:	e7fe      	b.n	8009902 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009904:	f002 f8b2 	bl	800ba6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	2b00      	cmp	r3, #0
 8009912:	d024      	beq.n	800995e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	1e5a      	subs	r2, r3, #1
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009924:	f001 fb46 	bl	800afb4 <pvTaskIncrementMutexHeldCount>
 8009928:	4602      	mov	r2, r0
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00f      	beq.n	8009956 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	3310      	adds	r3, #16
 800993a:	4618      	mov	r0, r3
 800993c:	f000 ffaa 	bl	800a894 <xTaskRemoveFromEventList>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d007      	beq.n	8009956 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009946:	4b54      	ldr	r3, [pc, #336]	; (8009a98 <xQueueSemaphoreTake+0x214>)
 8009948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009956:	f002 f8b9 	bl	800bacc <vPortExitCritical>
				return pdPASS;
 800995a:	2301      	movs	r3, #1
 800995c:	e097      	b.n	8009a8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d111      	bne.n	8009988 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	617b      	str	r3, [r7, #20]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009980:	f002 f8a4 	bl	800bacc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009984:	2300      	movs	r3, #0
 8009986:	e082      	b.n	8009a8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998a:	2b00      	cmp	r3, #0
 800998c:	d106      	bne.n	800999c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800998e:	f107 030c 	add.w	r3, r7, #12
 8009992:	4618      	mov	r0, r3
 8009994:	f000 ffe4 	bl	800a960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800999c:	f002 f896 	bl	800bacc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099a0:	f000 fcf4 	bl	800a38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099a4:	f002 f862 	bl	800ba6c <vPortEnterCritical>
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099ae:	b25b      	sxtb	r3, r3
 80099b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099b4:	d103      	bne.n	80099be <xQueueSemaphoreTake+0x13a>
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c4:	b25b      	sxtb	r3, r3
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099ca:	d103      	bne.n	80099d4 <xQueueSemaphoreTake+0x150>
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d4:	f002 f87a 	bl	800bacc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099d8:	463a      	mov	r2, r7
 80099da:	f107 030c 	add.w	r3, r7, #12
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 ffd3 	bl	800a98c <xTaskCheckForTimeOut>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d132      	bne.n	8009a52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099ee:	f000 f9f1 	bl	8009dd4 <prvIsQueueEmpty>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d026      	beq.n	8009a46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009a00:	f002 f834 	bl	800ba6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f001 f97b 	bl	800ad04 <xTaskPriorityInherit>
 8009a0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a10:	f002 f85c 	bl	800bacc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	3324      	adds	r3, #36	; 0x24
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fee9 	bl	800a7f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a24:	f000 f984 	bl	8009d30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a28:	f000 fcf4 	bl	800a414 <xTaskResumeAll>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f47f af68 	bne.w	8009904 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009a34:	4b18      	ldr	r3, [pc, #96]	; (8009a98 <xQueueSemaphoreTake+0x214>)
 8009a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	e75e      	b.n	8009904 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a48:	f000 f972 	bl	8009d30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a4c:	f000 fce2 	bl	800a414 <xTaskResumeAll>
 8009a50:	e758      	b.n	8009904 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a54:	f000 f96c 	bl	8009d30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a58:	f000 fcdc 	bl	800a414 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a5e:	f000 f9b9 	bl	8009dd4 <prvIsQueueEmpty>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f43f af4d 	beq.w	8009904 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00d      	beq.n	8009a8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a70:	f001 fffc 	bl	800ba6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a76:	f000 f8b4 	bl	8009be2 <prvGetDisinheritPriorityAfterTimeout>
 8009a7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a82:	4618      	mov	r0, r3
 8009a84:	f001 fa14 	bl	800aeb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a88:	f002 f820 	bl	800bacc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3738      	adds	r7, #56	; 0x38
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08e      	sub	sp, #56	; 0x38
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	623b      	str	r3, [r7, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d103      	bne.n	8009ad6 <xQueueReceiveFromISR+0x3a>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <xQueueReceiveFromISR+0x3e>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <xQueueReceiveFromISR+0x40>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	61fb      	str	r3, [r7, #28]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af6:	f002 f961 	bl	800bdbc <vPortValidateInterruptPriority>
	__asm volatile
 8009afa:	f3ef 8211 	mrs	r2, BASEPRI
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	61ba      	str	r2, [r7, #24]
 8009b10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d02f      	beq.n	8009b82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b2c:	68b9      	ldr	r1, [r7, #8]
 8009b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b30:	f000 f8d8 	bl	8009ce4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	1e5a      	subs	r2, r3, #1
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b44:	d112      	bne.n	8009b6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d016      	beq.n	8009b7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	3310      	adds	r3, #16
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fe9e 	bl	800a894 <xTaskRemoveFromEventList>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00e      	beq.n	8009b7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e007      	b.n	8009b7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b70:	3301      	adds	r3, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	b25a      	sxtb	r2, r3
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b80:	e001      	b.n	8009b86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f383 8811 	msr	BASEPRI, r3
}
 8009b90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3738      	adds	r7, #56	; 0x38
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <vQueueDelete+0x28>
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	60bb      	str	r3, [r7, #8]
}
 8009bc0:	bf00      	nop
 8009bc2:	e7fe      	b.n	8009bc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f95b 	bl	8009e80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f002 f9f3 	bl	800bfc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d006      	beq.n	8009c00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e001      	b.n	8009c04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c04:	68fb      	ldr	r3, [r7, #12]
	}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bc80      	pop	{r7}
 8009c0e:	4770      	bx	lr

08009c10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10d      	bne.n	8009c4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d14d      	bne.n	8009cd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f001 f8ca 	bl	800add4 <xTaskPriorityDisinherit>
 8009c40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	609a      	str	r2, [r3, #8]
 8009c48:	e043      	b.n	8009cd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d119      	bne.n	8009c84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6858      	ldr	r0, [r3, #4]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	f005 ff38 	bl	800fad0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c68:	441a      	add	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d32b      	bcc.n	8009cd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	605a      	str	r2, [r3, #4]
 8009c82:	e026      	b.n	8009cd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68d8      	ldr	r0, [r3, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	f005 ff1e 	bl	800fad0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	441a      	add	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d207      	bcs.n	8009cc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	425b      	negs	r3, r3
 8009cba:	441a      	add	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d105      	bne.n	8009cd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009cda:	697b      	ldr	r3, [r7, #20]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d018      	beq.n	8009d28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfe:	441a      	add	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d303      	bcc.n	8009d18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68d9      	ldr	r1, [r3, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	461a      	mov	r2, r3
 8009d22:	6838      	ldr	r0, [r7, #0]
 8009d24:	f005 fed4 	bl	800fad0 <memcpy>
	}
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d38:	f001 fe98 	bl	800ba6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d44:	e011      	b.n	8009d6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d012      	beq.n	8009d74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3324      	adds	r3, #36	; 0x24
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fd9e 	bl	800a894 <xTaskRemoveFromEventList>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d5e:	f000 fe77 	bl	800aa50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dce9      	bgt.n	8009d46 <prvUnlockQueue+0x16>
 8009d72:	e000      	b.n	8009d76 <prvUnlockQueue+0x46>
					break;
 8009d74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	22ff      	movs	r2, #255	; 0xff
 8009d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d7e:	f001 fea5 	bl	800bacc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d82:	f001 fe73 	bl	800ba6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d8e:	e011      	b.n	8009db4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d012      	beq.n	8009dbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3310      	adds	r3, #16
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fd79 	bl	800a894 <xTaskRemoveFromEventList>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009da8:	f000 fe52 	bl	800aa50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009dac:	7bbb      	ldrb	r3, [r7, #14]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	dce9      	bgt.n	8009d90 <prvUnlockQueue+0x60>
 8009dbc:	e000      	b.n	8009dc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	22ff      	movs	r2, #255	; 0xff
 8009dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009dc8:	f001 fe80 	bl	800bacc <vPortExitCritical>
}
 8009dcc:	bf00      	nop
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ddc:	f001 fe46 	bl	800ba6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009de8:	2301      	movs	r3, #1
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e001      	b.n	8009df2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009df2:	f001 fe6b 	bl	800bacc <vPortExitCritical>

	return xReturn;
 8009df6:	68fb      	ldr	r3, [r7, #12]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e08:	f001 fe30 	bl	800ba6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d102      	bne.n	8009e1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	e001      	b.n	8009e22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e22:	f001 fe53 	bl	800bacc <vPortExitCritical>

	return xReturn;
 8009e26:	68fb      	ldr	r3, [r7, #12]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	e014      	b.n	8009e6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009e40:	4a0e      	ldr	r2, [pc, #56]	; (8009e7c <vQueueAddToRegistry+0x4c>)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10b      	bne.n	8009e64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009e4c:	490b      	ldr	r1, [pc, #44]	; (8009e7c <vQueueAddToRegistry+0x4c>)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009e56:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <vQueueAddToRegistry+0x4c>)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	4413      	add	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009e62:	e006      	b.n	8009e72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b07      	cmp	r3, #7
 8009e6e:	d9e7      	bls.n	8009e40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bc80      	pop	{r7}
 8009e7a:	4770      	bx	lr
 8009e7c:	200028e4 	.word	0x200028e4

08009e80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e016      	b.n	8009ebc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009e8e:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <vQueueUnregisterQueue+0x50>)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	4413      	add	r3, r2
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d10b      	bne.n	8009eb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <vQueueUnregisterQueue+0x50>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009ea8:	4a09      	ldr	r2, [pc, #36]	; (8009ed0 <vQueueUnregisterQueue+0x50>)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	4413      	add	r3, r2
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	605a      	str	r2, [r3, #4]
				break;
 8009eb4:	e006      	b.n	8009ec4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b07      	cmp	r3, #7
 8009ec0:	d9e5      	bls.n	8009e8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bc80      	pop	{r7}
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	200028e4 	.word	0x200028e4

08009ed4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ee4:	f001 fdc2 	bl	800ba6c <vPortEnterCritical>
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef4:	d103      	bne.n	8009efe <vQueueWaitForMessageRestricted+0x2a>
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f0a:	d103      	bne.n	8009f14 <vQueueWaitForMessageRestricted+0x40>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f14:	f001 fdda 	bl	800bacc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d106      	bne.n	8009f2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3324      	adds	r3, #36	; 0x24
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f000 fc87 	bl	800a83c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f2e:	6978      	ldr	r0, [r7, #20]
 8009f30:	f7ff fefe 	bl	8009d30 <prvUnlockQueue>
	}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08e      	sub	sp, #56	; 0x38
 8009f40:	af04      	add	r7, sp, #16
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	623b      	str	r3, [r7, #32]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	61fb      	str	r3, [r7, #28]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f82:	23bc      	movs	r3, #188	; 0xbc
 8009f84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2bbc      	cmp	r3, #188	; 0xbc
 8009f8a:	d00a      	beq.n	8009fa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	61bb      	str	r3, [r7, #24]
}
 8009f9e:	bf00      	nop
 8009fa0:	e7fe      	b.n	8009fa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009fa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d01e      	beq.n	8009fe8 <xTaskCreateStatic+0xac>
 8009faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01b      	beq.n	8009fe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9303      	str	r3, [sp, #12]
 8009fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	f107 0314 	add.w	r3, r7, #20
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68b9      	ldr	r1, [r7, #8]
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 f850 	bl	800a080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009fe2:	f000 f8f3 	bl	800a1cc <prvAddNewTaskToReadyList>
 8009fe6:	e001      	b.n	8009fec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009fec:	697b      	ldr	r3, [r7, #20]
	}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3728      	adds	r7, #40	; 0x28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b08c      	sub	sp, #48	; 0x30
 8009ffa:	af04      	add	r7, sp, #16
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	60b9      	str	r1, [r7, #8]
 800a000:	603b      	str	r3, [r7, #0]
 800a002:	4613      	mov	r3, r2
 800a004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a006:	88fb      	ldrh	r3, [r7, #6]
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 ff14 	bl	800be38 <pvPortMalloc>
 800a010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00e      	beq.n	800a036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a018:	20bc      	movs	r0, #188	; 0xbc
 800a01a:	f001 ff0d 	bl	800be38 <pvPortMalloc>
 800a01e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30
 800a02c:	e005      	b.n	800a03a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a02e:	6978      	ldr	r0, [r7, #20]
 800a030:	f001 ffc6 	bl	800bfc0 <vPortFree>
 800a034:	e001      	b.n	800a03a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d017      	beq.n	800a070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a048:	88fa      	ldrh	r2, [r7, #6]
 800a04a:	2300      	movs	r3, #0
 800a04c:	9303      	str	r3, [sp, #12]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	9302      	str	r3, [sp, #8]
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f80e 	bl	800a080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a064:	69f8      	ldr	r0, [r7, #28]
 800a066:	f000 f8b1 	bl	800a1cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a06a:	2301      	movs	r3, #1
 800a06c:	61bb      	str	r3, [r7, #24]
 800a06e:	e002      	b.n	800a076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a076:	69bb      	ldr	r3, [r7, #24]
	}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	461a      	mov	r2, r3
 800a098:	21a5      	movs	r1, #165	; 0xa5
 800a09a:	f005 fd27 	bl	800faec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	f023 0307 	bic.w	r3, r3, #7
 800a0b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01f      	beq.n	800a11e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0de:	2300      	movs	r3, #0
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e012      	b.n	800a10a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	7819      	ldrb	r1, [r3, #0]
 800a0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	3334      	adds	r3, #52	; 0x34
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d006      	beq.n	800a112 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	3301      	adds	r3, #1
 800a108:	61fb      	str	r3, [r7, #28]
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	2b0f      	cmp	r3, #15
 800a10e:	d9e9      	bls.n	800a0e4 <prvInitialiseNewTask+0x64>
 800a110:	e000      	b.n	800a114 <prvInitialiseNewTask+0x94>
			{
				break;
 800a112:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a11c:	e003      	b.n	800a126 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	2b37      	cmp	r3, #55	; 0x37
 800a12a:	d901      	bls.n	800a130 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a12c:	2337      	movs	r3, #55	; 0x37
 800a12e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a134:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a13a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	2200      	movs	r2, #0
 800a140:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	3304      	adds	r3, #4
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe fe59 	bl	8008dfe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	3318      	adds	r3, #24
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fe54 	bl	8008dfe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a15a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a16a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	2200      	movs	r2, #0
 800a178:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	3354      	adds	r3, #84	; 0x54
 800a180:	2260      	movs	r2, #96	; 0x60
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f005 fcb1 	bl	800faec <memset>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	4a0c      	ldr	r2, [pc, #48]	; (800a1c0 <prvInitialiseNewTask+0x140>)
 800a18e:	659a      	str	r2, [r3, #88]	; 0x58
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	4a0c      	ldr	r2, [pc, #48]	; (800a1c4 <prvInitialiseNewTask+0x144>)
 800a194:	65da      	str	r2, [r3, #92]	; 0x5c
 800a196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a198:	4a0b      	ldr	r2, [pc, #44]	; (800a1c8 <prvInitialiseNewTask+0x148>)
 800a19a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	68f9      	ldr	r1, [r7, #12]
 800a1a0:	69b8      	ldr	r0, [r7, #24]
 800a1a2:	f001 fb75 	bl	800b890 <pxPortInitialiseStack>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	08010894 	.word	0x08010894
 800a1c4:	080108b4 	.word	0x080108b4
 800a1c8:	08010874 	.word	0x08010874

0800a1cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1d4:	f001 fc4a 	bl	800ba6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1d8:	4b2d      	ldr	r3, [pc, #180]	; (800a290 <prvAddNewTaskToReadyList+0xc4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	4a2c      	ldr	r2, [pc, #176]	; (800a290 <prvAddNewTaskToReadyList+0xc4>)
 800a1e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1e2:	4b2c      	ldr	r3, [pc, #176]	; (800a294 <prvAddNewTaskToReadyList+0xc8>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1ea:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <prvAddNewTaskToReadyList+0xc8>)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1f0:	4b27      	ldr	r3, [pc, #156]	; (800a290 <prvAddNewTaskToReadyList+0xc4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d110      	bne.n	800a21a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a1f8:	f000 fca4 	bl	800ab44 <prvInitialiseTaskLists>
 800a1fc:	e00d      	b.n	800a21a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a1fe:	4b26      	ldr	r3, [pc, #152]	; (800a298 <prvAddNewTaskToReadyList+0xcc>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d109      	bne.n	800a21a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a206:	4b23      	ldr	r3, [pc, #140]	; (800a294 <prvAddNewTaskToReadyList+0xc8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	429a      	cmp	r2, r3
 800a212:	d802      	bhi.n	800a21a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a214:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <prvAddNewTaskToReadyList+0xc8>)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a21a:	4b20      	ldr	r3, [pc, #128]	; (800a29c <prvAddNewTaskToReadyList+0xd0>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3301      	adds	r3, #1
 800a220:	4a1e      	ldr	r2, [pc, #120]	; (800a29c <prvAddNewTaskToReadyList+0xd0>)
 800a222:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a224:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <prvAddNewTaskToReadyList+0xd0>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a230:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <prvAddNewTaskToReadyList+0xd4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d903      	bls.n	800a240 <prvAddNewTaskToReadyList+0x74>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	4a18      	ldr	r2, [pc, #96]	; (800a2a0 <prvAddNewTaskToReadyList+0xd4>)
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <prvAddNewTaskToReadyList+0xd8>)
 800a24e:	441a      	add	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3304      	adds	r3, #4
 800a254:	4619      	mov	r1, r3
 800a256:	4610      	mov	r0, r2
 800a258:	f7fe fddd 	bl	8008e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a25c:	f001 fc36 	bl	800bacc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a260:	4b0d      	ldr	r3, [pc, #52]	; (800a298 <prvAddNewTaskToReadyList+0xcc>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00e      	beq.n	800a286 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <prvAddNewTaskToReadyList+0xc8>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a272:	429a      	cmp	r2, r3
 800a274:	d207      	bcs.n	800a286 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvAddNewTaskToReadyList+0xdc>)
 800a278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20001018 	.word	0x20001018
 800a294:	20000b44 	.word	0x20000b44
 800a298:	20001024 	.word	0x20001024
 800a29c:	20001034 	.word	0x20001034
 800a2a0:	20001020 	.word	0x20001020
 800a2a4:	20000b48 	.word	0x20000b48
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	1d39      	adds	r1, r7, #4
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fe fd4a 	bl	8008d5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	9202      	str	r2, [sp, #8]
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	460a      	mov	r2, r1
 800a2da:	4924      	ldr	r1, [pc, #144]	; (800a36c <vTaskStartScheduler+0xc0>)
 800a2dc:	4824      	ldr	r0, [pc, #144]	; (800a370 <vTaskStartScheduler+0xc4>)
 800a2de:	f7ff fe2d 	bl	8009f3c <xTaskCreateStatic>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4a23      	ldr	r2, [pc, #140]	; (800a374 <vTaskStartScheduler+0xc8>)
 800a2e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2e8:	4b22      	ldr	r3, [pc, #136]	; (800a374 <vTaskStartScheduler+0xc8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	e001      	b.n	800a2fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d102      	bne.n	800a306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a300:	f000 fec0 	bl	800b084 <xTimerCreateTimerTask>
 800a304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d11b      	bne.n	800a344 <vTaskStartScheduler+0x98>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	613b      	str	r3, [r7, #16]
}
 800a31e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a320:	4b15      	ldr	r3, [pc, #84]	; (800a378 <vTaskStartScheduler+0xcc>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3354      	adds	r3, #84	; 0x54
 800a326:	4a15      	ldr	r2, [pc, #84]	; (800a37c <vTaskStartScheduler+0xd0>)
 800a328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a32a:	4b15      	ldr	r3, [pc, #84]	; (800a380 <vTaskStartScheduler+0xd4>)
 800a32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a332:	4b14      	ldr	r3, [pc, #80]	; (800a384 <vTaskStartScheduler+0xd8>)
 800a334:	2201      	movs	r2, #1
 800a336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a338:	4b13      	ldr	r3, [pc, #76]	; (800a388 <vTaskStartScheduler+0xdc>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a33e:	f001 fb23 	bl	800b988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a342:	e00e      	b.n	800a362 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34a:	d10a      	bne.n	800a362 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60fb      	str	r3, [r7, #12]
}
 800a35e:	bf00      	nop
 800a360:	e7fe      	b.n	800a360 <vTaskStartScheduler+0xb4>
}
 800a362:	bf00      	nop
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	08010594 	.word	0x08010594
 800a370:	0800aa69 	.word	0x0800aa69
 800a374:	2000103c 	.word	0x2000103c
 800a378:	20000b44 	.word	0x20000b44
 800a37c:	20000018 	.word	0x20000018
 800a380:	20001038 	.word	0x20001038
 800a384:	20001024 	.word	0x20001024
 800a388:	2000101c 	.word	0x2000101c

0800a38c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a390:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <vTaskSuspendAll+0x18>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	4a03      	ldr	r2, [pc, #12]	; (800a3a4 <vTaskSuspendAll+0x18>)
 800a398:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a39a:	bf00      	nop
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bc80      	pop	{r7}
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20001040 	.word	0x20001040

0800a3a8 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a3b2:	4b13      	ldr	r3, [pc, #76]	; (800a400 <prvGetExpectedIdleTime+0x58>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a3be:	4b11      	ldr	r3, [pc, #68]	; (800a404 <prvGetExpectedIdleTime+0x5c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	607b      	str	r3, [r7, #4]
 800a3cc:	e012      	b.n	800a3f4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a3ce:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <prvGetExpectedIdleTime+0x60>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d902      	bls.n	800a3dc <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]
 800a3da:	e00b      	b.n	800a3f4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
 800a3e6:	e005      	b.n	800a3f4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a3e8:	4b08      	ldr	r3, [pc, #32]	; (800a40c <prvGetExpectedIdleTime+0x64>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	4b08      	ldr	r3, [pc, #32]	; (800a410 <prvGetExpectedIdleTime+0x68>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 800a3f4:	687b      	ldr	r3, [r7, #4]
	}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bc80      	pop	{r7}
 800a3fe:	4770      	bx	lr
 800a400:	20001020 	.word	0x20001020
 800a404:	20000b44 	.word	0x20000b44
 800a408:	20000b48 	.word	0x20000b48
 800a40c:	20001038 	.word	0x20001038
 800a410:	2000101c 	.word	0x2000101c

0800a414 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a422:	4b42      	ldr	r3, [pc, #264]	; (800a52c <xTaskResumeAll+0x118>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <xTaskResumeAll+0x2c>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	603b      	str	r3, [r7, #0]
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a440:	f001 fb14 	bl	800ba6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a444:	4b39      	ldr	r3, [pc, #228]	; (800a52c <xTaskResumeAll+0x118>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3b01      	subs	r3, #1
 800a44a:	4a38      	ldr	r2, [pc, #224]	; (800a52c <xTaskResumeAll+0x118>)
 800a44c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a44e:	4b37      	ldr	r3, [pc, #220]	; (800a52c <xTaskResumeAll+0x118>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d162      	bne.n	800a51c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a456:	4b36      	ldr	r3, [pc, #216]	; (800a530 <xTaskResumeAll+0x11c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d05e      	beq.n	800a51c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a45e:	e02f      	b.n	800a4c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a460:	4b34      	ldr	r3, [pc, #208]	; (800a534 <xTaskResumeAll+0x120>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3318      	adds	r3, #24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fd2d 	bl	8008ecc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3304      	adds	r3, #4
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe fd28 	bl	8008ecc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	4b2d      	ldr	r3, [pc, #180]	; (800a538 <xTaskResumeAll+0x124>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d903      	bls.n	800a490 <xTaskResumeAll+0x7c>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	4a2a      	ldr	r2, [pc, #168]	; (800a538 <xTaskResumeAll+0x124>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a27      	ldr	r2, [pc, #156]	; (800a53c <xTaskResumeAll+0x128>)
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe fcb5 	bl	8008e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4b23      	ldr	r3, [pc, #140]	; (800a540 <xTaskResumeAll+0x12c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d302      	bcc.n	800a4c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a4ba:	4b22      	ldr	r3, [pc, #136]	; (800a544 <xTaskResumeAll+0x130>)
 800a4bc:	2201      	movs	r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4c0:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <xTaskResumeAll+0x120>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1cb      	bne.n	800a460 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4ce:	f000 fbdb 	bl	800ac88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	; (800a548 <xTaskResumeAll+0x134>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d010      	beq.n	800a500 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4de:	f000 f86b 	bl	800a5b8 <xTaskIncrementTick>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a4e8:	4b16      	ldr	r3, [pc, #88]	; (800a544 <xTaskResumeAll+0x130>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1f1      	bne.n	800a4de <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800a4fa:	4b13      	ldr	r3, [pc, #76]	; (800a548 <xTaskResumeAll+0x134>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a500:	4b10      	ldr	r3, [pc, #64]	; (800a544 <xTaskResumeAll+0x130>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a50c:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <xTaskResumeAll+0x138>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a51c:	f001 fad6 	bl	800bacc <vPortExitCritical>

	return xAlreadyYielded;
 800a520:	68bb      	ldr	r3, [r7, #8]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20001040 	.word	0x20001040
 800a530:	20001018 	.word	0x20001018
 800a534:	20000fd8 	.word	0x20000fd8
 800a538:	20001020 	.word	0x20001020
 800a53c:	20000b48 	.word	0x20000b48
 800a540:	20000b44 	.word	0x20000b44
 800a544:	2000102c 	.word	0x2000102c
 800a548:	20001028 	.word	0x20001028
 800a54c:	e000ed04 	.word	0xe000ed04

0800a550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a556:	4b04      	ldr	r3, [pc, #16]	; (800a568 <xTaskGetTickCount+0x18>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a55c:	687b      	ldr	r3, [r7, #4]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	bc80      	pop	{r7}
 800a566:	4770      	bx	lr
 800a568:	2000101c 	.word	0x2000101c

0800a56c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <vTaskStepTick+0x44>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	441a      	add	r2, r3
 800a57c:	4b0d      	ldr	r3, [pc, #52]	; (800a5b4 <vTaskStepTick+0x48>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d90a      	bls.n	800a59a <vTaskStepTick+0x2e>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	60fb      	str	r3, [r7, #12]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <vTaskStepTick+0x44>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	4a03      	ldr	r2, [pc, #12]	; (800a5b0 <vTaskStepTick+0x44>)
 800a5a4:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr
 800a5b0:	2000101c 	.word	0x2000101c
 800a5b4:	20001038 	.word	0x20001038

0800a5b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5c2:	4b4f      	ldr	r3, [pc, #316]	; (800a700 <xTaskIncrementTick+0x148>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 8089 	bne.w	800a6de <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5cc:	4b4d      	ldr	r3, [pc, #308]	; (800a704 <xTaskIncrementTick+0x14c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5d4:	4a4b      	ldr	r2, [pc, #300]	; (800a704 <xTaskIncrementTick+0x14c>)
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d120      	bne.n	800a622 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5e0:	4b49      	ldr	r3, [pc, #292]	; (800a708 <xTaskIncrementTick+0x150>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	603b      	str	r3, [r7, #0]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <xTaskIncrementTick+0x46>
 800a600:	4b41      	ldr	r3, [pc, #260]	; (800a708 <xTaskIncrementTick+0x150>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	4b41      	ldr	r3, [pc, #260]	; (800a70c <xTaskIncrementTick+0x154>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a3f      	ldr	r2, [pc, #252]	; (800a708 <xTaskIncrementTick+0x150>)
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	4a3f      	ldr	r2, [pc, #252]	; (800a70c <xTaskIncrementTick+0x154>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <xTaskIncrementTick+0x158>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3301      	adds	r3, #1
 800a61a:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <xTaskIncrementTick+0x158>)
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	f000 fb33 	bl	800ac88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a622:	4b3c      	ldr	r3, [pc, #240]	; (800a714 <xTaskIncrementTick+0x15c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d349      	bcc.n	800a6c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a62c:	4b36      	ldr	r3, [pc, #216]	; (800a708 <xTaskIncrementTick+0x150>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d104      	bne.n	800a640 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a636:	4b37      	ldr	r3, [pc, #220]	; (800a714 <xTaskIncrementTick+0x15c>)
 800a638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a63c:	601a      	str	r2, [r3, #0]
					break;
 800a63e:	e03f      	b.n	800a6c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a640:	4b31      	ldr	r3, [pc, #196]	; (800a708 <xTaskIncrementTick+0x150>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d203      	bcs.n	800a660 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a658:	4a2e      	ldr	r2, [pc, #184]	; (800a714 <xTaskIncrementTick+0x15c>)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a65e:	e02f      	b.n	800a6c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	3304      	adds	r3, #4
 800a664:	4618      	mov	r0, r3
 800a666:	f7fe fc31 	bl	8008ecc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	3318      	adds	r3, #24
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe fc28 	bl	8008ecc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <xTaskIncrementTick+0x160>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d903      	bls.n	800a690 <xTaskIncrementTick+0xd8>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68c:	4a22      	ldr	r2, [pc, #136]	; (800a718 <xTaskIncrementTick+0x160>)
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a694:	4613      	mov	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4a1f      	ldr	r2, [pc, #124]	; (800a71c <xTaskIncrementTick+0x164>)
 800a69e:	441a      	add	r2, r3
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	f7fe fbb5 	bl	8008e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b0:	4b1b      	ldr	r3, [pc, #108]	; (800a720 <xTaskIncrementTick+0x168>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d3b8      	bcc.n	800a62c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6be:	e7b5      	b.n	800a62c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6c0:	4b17      	ldr	r3, [pc, #92]	; (800a720 <xTaskIncrementTick+0x168>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c6:	4915      	ldr	r1, [pc, #84]	; (800a71c <xTaskIncrementTick+0x164>)
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d907      	bls.n	800a6e8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e004      	b.n	800a6e8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a6de:	4b11      	ldr	r3, [pc, #68]	; (800a724 <xTaskIncrementTick+0x16c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a0f      	ldr	r2, [pc, #60]	; (800a724 <xTaskIncrementTick+0x16c>)
 800a6e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	; (800a728 <xTaskIncrementTick+0x170>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a6f4:	697b      	ldr	r3, [r7, #20]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20001040 	.word	0x20001040
 800a704:	2000101c 	.word	0x2000101c
 800a708:	20000fd0 	.word	0x20000fd0
 800a70c:	20000fd4 	.word	0x20000fd4
 800a710:	20001030 	.word	0x20001030
 800a714:	20001038 	.word	0x20001038
 800a718:	20001020 	.word	0x20001020
 800a71c:	20000b48 	.word	0x20000b48
 800a720:	20000b44 	.word	0x20000b44
 800a724:	20001028 	.word	0x20001028
 800a728:	2000102c 	.word	0x2000102c

0800a72c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <vTaskSwitchContext+0xb0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a73a:	4b29      	ldr	r3, [pc, #164]	; (800a7e0 <vTaskSwitchContext+0xb4>)
 800a73c:	2201      	movs	r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a740:	e046      	b.n	800a7d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a742:	4b27      	ldr	r3, [pc, #156]	; (800a7e0 <vTaskSwitchContext+0xb4>)
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a748:	4b26      	ldr	r3, [pc, #152]	; (800a7e4 <vTaskSwitchContext+0xb8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	e010      	b.n	800a772 <vTaskSwitchContext+0x46>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d10a      	bne.n	800a76c <vTaskSwitchContext+0x40>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	607b      	str	r3, [r7, #4]
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <vTaskSwitchContext+0x3e>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3b01      	subs	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	491d      	ldr	r1, [pc, #116]	; (800a7e8 <vTaskSwitchContext+0xbc>)
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0e4      	beq.n	800a750 <vTaskSwitchContext+0x24>
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4a15      	ldr	r2, [pc, #84]	; (800a7e8 <vTaskSwitchContext+0xbc>)
 800a792:	4413      	add	r3, r2
 800a794:	60bb      	str	r3, [r7, #8]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	685a      	ldr	r2, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	685a      	ldr	r2, [r3, #4]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d104      	bne.n	800a7b6 <vTaskSwitchContext+0x8a>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	4a0b      	ldr	r2, [pc, #44]	; (800a7ec <vTaskSwitchContext+0xc0>)
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <vTaskSwitchContext+0xb8>)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7c6:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <vTaskSwitchContext+0xc0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3354      	adds	r3, #84	; 0x54
 800a7cc:	4a08      	ldr	r2, [pc, #32]	; (800a7f0 <vTaskSwitchContext+0xc4>)
 800a7ce:	6013      	str	r3, [r2, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20001040 	.word	0x20001040
 800a7e0:	2000102c 	.word	0x2000102c
 800a7e4:	20001020 	.word	0x20001020
 800a7e8:	20000b48 	.word	0x20000b48
 800a7ec:	20000b44 	.word	0x20000b44
 800a7f0:	20000018 	.word	0x20000018

0800a7f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60fb      	str	r3, [r7, #12]
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a81a:	4b07      	ldr	r3, [pc, #28]	; (800a838 <vTaskPlaceOnEventList+0x44>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3318      	adds	r3, #24
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fe fb1a 	bl	8008e5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a828:	2101      	movs	r1, #1
 800a82a:	6838      	ldr	r0, [r7, #0]
 800a82c:	f000 fbd6 	bl	800afdc <prvAddCurrentTaskToDelayedList>
}
 800a830:	bf00      	nop
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	20000b44 	.word	0x20000b44

0800a83c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d10a      	bne.n	800a864 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	617b      	str	r3, [r7, #20]
}
 800a860:	bf00      	nop
 800a862:	e7fe      	b.n	800a862 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <vTaskPlaceOnEventListRestricted+0x54>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3318      	adds	r3, #24
 800a86a:	4619      	mov	r1, r3
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7fe fad2 	bl	8008e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a87c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a87e:	6879      	ldr	r1, [r7, #4]
 800a880:	68b8      	ldr	r0, [r7, #8]
 800a882:	f000 fbab 	bl	800afdc <prvAddCurrentTaskToDelayedList>
	}
 800a886:	bf00      	nop
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000b44 	.word	0x20000b44

0800a894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	60fb      	str	r3, [r7, #12]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3318      	adds	r3, #24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fb01 	bl	8008ecc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ca:	4b1f      	ldr	r3, [pc, #124]	; (800a948 <xTaskRemoveFromEventList+0xb4>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d11f      	bne.n	800a912 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe faf8 	bl	8008ecc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e0:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <xTaskRemoveFromEventList+0xb8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d903      	bls.n	800a8f0 <xTaskRemoveFromEventList+0x5c>
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	4a17      	ldr	r2, [pc, #92]	; (800a94c <xTaskRemoveFromEventList+0xb8>)
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4a14      	ldr	r2, [pc, #80]	; (800a950 <xTaskRemoveFromEventList+0xbc>)
 800a8fe:	441a      	add	r2, r3
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	3304      	adds	r3, #4
 800a904:	4619      	mov	r1, r3
 800a906:	4610      	mov	r0, r2
 800a908:	f7fe fa85 	bl	8008e16 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800a90c:	f000 f9bc 	bl	800ac88 <prvResetNextTaskUnblockTime>
 800a910:	e005      	b.n	800a91e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	3318      	adds	r3, #24
 800a916:	4619      	mov	r1, r3
 800a918:	480e      	ldr	r0, [pc, #56]	; (800a954 <xTaskRemoveFromEventList+0xc0>)
 800a91a:	f7fe fa7c 	bl	8008e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a922:	4b0d      	ldr	r3, [pc, #52]	; (800a958 <xTaskRemoveFromEventList+0xc4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	429a      	cmp	r2, r3
 800a92a:	d905      	bls.n	800a938 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a92c:	2301      	movs	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a930:	4b0a      	ldr	r3, [pc, #40]	; (800a95c <xTaskRemoveFromEventList+0xc8>)
 800a932:	2201      	movs	r2, #1
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	e001      	b.n	800a93c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a93c:	697b      	ldr	r3, [r7, #20]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20001040 	.word	0x20001040
 800a94c:	20001020 	.word	0x20001020
 800a950:	20000b48 	.word	0x20000b48
 800a954:	20000fd8 	.word	0x20000fd8
 800a958:	20000b44 	.word	0x20000b44
 800a95c:	2000102c 	.word	0x2000102c

0800a960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <vTaskInternalSetTimeOutState+0x24>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <vTaskInternalSetTimeOutState+0x28>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	605a      	str	r2, [r3, #4]
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bc80      	pop	{r7}
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20001030 	.word	0x20001030
 800a988:	2000101c 	.word	0x2000101c

0800a98c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	613b      	str	r3, [r7, #16]
}
 800a9ae:	bf00      	nop
 800a9b0:	e7fe      	b.n	800a9b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10a      	bne.n	800a9ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9bc:	f383 8811 	msr	BASEPRI, r3
 800a9c0:	f3bf 8f6f 	isb	sy
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	60fb      	str	r3, [r7, #12]
}
 800a9ca:	bf00      	nop
 800a9cc:	e7fe      	b.n	800a9cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9ce:	f001 f84d 	bl	800ba6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9d2:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <xTaskCheckForTimeOut+0xbc>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ea:	d102      	bne.n	800a9f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61fb      	str	r3, [r7, #28]
 800a9f0:	e023      	b.n	800aa3a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	4b15      	ldr	r3, [pc, #84]	; (800aa4c <xTaskCheckForTimeOut+0xc0>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d007      	beq.n	800aa0e <xTaskCheckForTimeOut+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	69ba      	ldr	r2, [r7, #24]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d302      	bcc.n	800aa0e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e015      	b.n	800aa3a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d20b      	bcs.n	800aa30 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	1ad2      	subs	r2, r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ff9b 	bl	800a960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	61fb      	str	r3, [r7, #28]
 800aa2e:	e004      	b.n	800aa3a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa36:	2301      	movs	r3, #1
 800aa38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa3a:	f001 f847 	bl	800bacc <vPortExitCritical>

	return xReturn;
 800aa3e:	69fb      	ldr	r3, [r7, #28]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	2000101c 	.word	0x2000101c
 800aa4c:	20001030 	.word	0x20001030

0800aa50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa54:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <vTaskMissedYield+0x14>)
 800aa56:	2201      	movs	r2, #1
 800aa58:	601a      	str	r2, [r3, #0]
}
 800aa5a:	bf00      	nop
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bc80      	pop	{r7}
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	2000102c 	.word	0x2000102c

0800aa68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa70:	f000 f8a8 	bl	800abc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa74:	4b18      	ldr	r3, [pc, #96]	; (800aad8 <prvIdleTask+0x70>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d907      	bls.n	800aa8c <prvIdleTask+0x24>
			{
				taskYIELD();
 800aa7c:	4b17      	ldr	r3, [pc, #92]	; (800aadc <prvIdleTask+0x74>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800aa8c:	f7ff fc8c 	bl	800a3a8 <prvGetExpectedIdleTime>
 800aa90:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d9eb      	bls.n	800aa70 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800aa98:	f7ff fc78 	bl	800a38c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800aa9c:	4b10      	ldr	r3, [pc, #64]	; (800aae0 <prvIdleTask+0x78>)
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <prvIdleTask+0x7c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d20a      	bcs.n	800aabe <prvIdleTask+0x56>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	60bb      	str	r3, [r7, #8]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800aabe:	f7ff fc73 	bl	800a3a8 <prvGetExpectedIdleTime>
 800aac2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d902      	bls.n	800aad0 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f001 f86e 	bl	800bbac <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800aad0:	f7ff fca0 	bl	800a414 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800aad4:	e7cc      	b.n	800aa70 <prvIdleTask+0x8>
 800aad6:	bf00      	nop
 800aad8:	20000b48 	.word	0x20000b48
 800aadc:	e000ed04 	.word	0xe000ed04
 800aae0:	20001038 	.word	0x20001038
 800aae4:	2000101c 	.word	0x2000101c

0800aae8 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800aaf6:	4b0f      	ldr	r3, [pc, #60]	; (800ab34 <eTaskConfirmSleepModeStatus+0x4c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800aafe:	2300      	movs	r3, #0
 800ab00:	71fb      	strb	r3, [r7, #7]
 800ab02:	e010      	b.n	800ab26 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <eTaskConfirmSleepModeStatus+0x50>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	71fb      	strb	r3, [r7, #7]
 800ab10:	e009      	b.n	800ab26 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800ab12:	4b0a      	ldr	r3, [pc, #40]	; (800ab3c <eTaskConfirmSleepModeStatus+0x54>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <eTaskConfirmSleepModeStatus+0x58>)
 800ab18:	6819      	ldr	r1, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	1acb      	subs	r3, r1, r3
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d101      	bne.n	800ab26 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800ab22:	2302      	movs	r3, #2
 800ab24:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800ab26:	79fb      	ldrb	r3, [r7, #7]
	}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000fd8 	.word	0x20000fd8
 800ab38:	2000102c 	.word	0x2000102c
 800ab3c:	20001004 	.word	0x20001004
 800ab40:	20001018 	.word	0x20001018

0800ab44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	607b      	str	r3, [r7, #4]
 800ab4e:	e00c      	b.n	800ab6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4a12      	ldr	r2, [pc, #72]	; (800aba4 <prvInitialiseTaskLists+0x60>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe f92e 	bl	8008dc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3301      	adds	r3, #1
 800ab68:	607b      	str	r3, [r7, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2b37      	cmp	r3, #55	; 0x37
 800ab6e:	d9ef      	bls.n	800ab50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab70:	480d      	ldr	r0, [pc, #52]	; (800aba8 <prvInitialiseTaskLists+0x64>)
 800ab72:	f7fe f925 	bl	8008dc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab76:	480d      	ldr	r0, [pc, #52]	; (800abac <prvInitialiseTaskLists+0x68>)
 800ab78:	f7fe f922 	bl	8008dc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab7c:	480c      	ldr	r0, [pc, #48]	; (800abb0 <prvInitialiseTaskLists+0x6c>)
 800ab7e:	f7fe f91f 	bl	8008dc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab82:	480c      	ldr	r0, [pc, #48]	; (800abb4 <prvInitialiseTaskLists+0x70>)
 800ab84:	f7fe f91c 	bl	8008dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab88:	480b      	ldr	r0, [pc, #44]	; (800abb8 <prvInitialiseTaskLists+0x74>)
 800ab8a:	f7fe f919 	bl	8008dc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <prvInitialiseTaskLists+0x78>)
 800ab90:	4a05      	ldr	r2, [pc, #20]	; (800aba8 <prvInitialiseTaskLists+0x64>)
 800ab92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab94:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <prvInitialiseTaskLists+0x7c>)
 800ab96:	4a05      	ldr	r2, [pc, #20]	; (800abac <prvInitialiseTaskLists+0x68>)
 800ab98:	601a      	str	r2, [r3, #0]
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000b48 	.word	0x20000b48
 800aba8:	20000fa8 	.word	0x20000fa8
 800abac:	20000fbc 	.word	0x20000fbc
 800abb0:	20000fd8 	.word	0x20000fd8
 800abb4:	20000fec 	.word	0x20000fec
 800abb8:	20001004 	.word	0x20001004
 800abbc:	20000fd0 	.word	0x20000fd0
 800abc0:	20000fd4 	.word	0x20000fd4

0800abc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abca:	e019      	b.n	800ac00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800abcc:	f000 ff4e 	bl	800ba6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd0:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <prvCheckTasksWaitingTermination+0x50>)
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3304      	adds	r3, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fe f975 	bl	8008ecc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800abe2:	4b0d      	ldr	r3, [pc, #52]	; (800ac18 <prvCheckTasksWaitingTermination+0x54>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	4a0b      	ldr	r2, [pc, #44]	; (800ac18 <prvCheckTasksWaitingTermination+0x54>)
 800abea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abec:	4b0b      	ldr	r3, [pc, #44]	; (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800abf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abf6:	f000 ff69 	bl	800bacc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f810 	bl	800ac20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac00:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <prvCheckTasksWaitingTermination+0x58>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e1      	bne.n	800abcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000fec 	.word	0x20000fec
 800ac18:	20001018 	.word	0x20001018
 800ac1c:	20001000 	.word	0x20001000

0800ac20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3354      	adds	r3, #84	; 0x54
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f004 ffcd 	bl	800fbcc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d108      	bne.n	800ac4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 f9bd 	bl	800bfc0 <vPortFree>
				vPortFree( pxTCB );
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 f9ba 	bl	800bfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac4c:	e018      	b.n	800ac80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d103      	bne.n	800ac60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f9b1 	bl	800bfc0 <vPortFree>
	}
 800ac5e:	e00f      	b.n	800ac80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d00a      	beq.n	800ac80 <prvDeleteTCB+0x60>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	60fb      	str	r3, [r7, #12]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <prvDeleteTCB+0x5e>
	}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <prvResetNextTaskUnblockTime+0x38>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d104      	bne.n	800aca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac98:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <prvResetNextTaskUnblockTime+0x3c>)
 800ac9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aca0:	e008      	b.n	800acb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca2:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <prvResetNextTaskUnblockTime+0x38>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	4a04      	ldr	r2, [pc, #16]	; (800acc4 <prvResetNextTaskUnblockTime+0x3c>)
 800acb2:	6013      	str	r3, [r2, #0]
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	bc80      	pop	{r7}
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20000fd0 	.word	0x20000fd0
 800acc4:	20001038 	.word	0x20001038

0800acc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800acce:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <xTaskGetSchedulerState+0x34>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800acd6:	2301      	movs	r3, #1
 800acd8:	607b      	str	r3, [r7, #4]
 800acda:	e008      	b.n	800acee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acdc:	4b08      	ldr	r3, [pc, #32]	; (800ad00 <xTaskGetSchedulerState+0x38>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ace4:	2302      	movs	r3, #2
 800ace6:	607b      	str	r3, [r7, #4]
 800ace8:	e001      	b.n	800acee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800acea:	2300      	movs	r3, #0
 800acec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800acee:	687b      	ldr	r3, [r7, #4]
	}
 800acf0:	4618      	mov	r0, r3
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bc80      	pop	{r7}
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20001024 	.word	0x20001024
 800ad00:	20001040 	.word	0x20001040

0800ad04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d051      	beq.n	800adbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1e:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <xTaskPriorityInherit+0xc4>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d241      	bcs.n	800adac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	db06      	blt.n	800ad3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad30:	4b25      	ldr	r3, [pc, #148]	; (800adc8 <xTaskPriorityInherit+0xc4>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6959      	ldr	r1, [r3, #20]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	4a1f      	ldr	r2, [pc, #124]	; (800adcc <xTaskPriorityInherit+0xc8>)
 800ad50:	4413      	add	r3, r2
 800ad52:	4299      	cmp	r1, r3
 800ad54:	d122      	bne.n	800ad9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe f8b6 	bl	8008ecc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad60:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <xTaskPriorityInherit+0xc4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	4b18      	ldr	r3, [pc, #96]	; (800add0 <xTaskPriorityInherit+0xcc>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d903      	bls.n	800ad7e <xTaskPriorityInherit+0x7a>
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	4a15      	ldr	r2, [pc, #84]	; (800add0 <xTaskPriorityInherit+0xcc>)
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4a10      	ldr	r2, [pc, #64]	; (800adcc <xTaskPriorityInherit+0xc8>)
 800ad8c:	441a      	add	r2, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fe f83e 	bl	8008e16 <vListInsertEnd>
 800ad9a:	e004      	b.n	800ada6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <xTaskPriorityInherit+0xc4>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ada6:	2301      	movs	r3, #1
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	e008      	b.n	800adbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adb0:	4b05      	ldr	r3, [pc, #20]	; (800adc8 <xTaskPriorityInherit+0xc4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d201      	bcs.n	800adbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800adba:	2301      	movs	r3, #1
 800adbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800adbe:	68fb      	ldr	r3, [r7, #12]
	}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000b44 	.word	0x20000b44
 800adcc:	20000b48 	.word	0x20000b48
 800add0:	20001020 	.word	0x20001020

0800add4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d056      	beq.n	800ae98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800adea:	4b2e      	ldr	r3, [pc, #184]	; (800aea4 <xTaskPriorityDisinherit+0xd0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d00a      	beq.n	800ae0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	60fb      	str	r3, [r7, #12]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10a      	bne.n	800ae28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	60bb      	str	r3, [r7, #8]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2c:	1e5a      	subs	r2, r3, #1
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d02c      	beq.n	800ae98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d128      	bne.n	800ae98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe f83e 	bl	8008ecc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae68:	4b0f      	ldr	r3, [pc, #60]	; (800aea8 <xTaskPriorityDisinherit+0xd4>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d903      	bls.n	800ae78 <xTaskPriorityDisinherit+0xa4>
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	4a0c      	ldr	r2, [pc, #48]	; (800aea8 <xTaskPriorityDisinherit+0xd4>)
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4a09      	ldr	r2, [pc, #36]	; (800aeac <xTaskPriorityDisinherit+0xd8>)
 800ae86:	441a      	add	r2, r3
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7fd ffc1 	bl	8008e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae94:	2301      	movs	r3, #1
 800ae96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae98:	697b      	ldr	r3, [r7, #20]
	}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000b44 	.word	0x20000b44
 800aea8:	20001020 	.word	0x20001020
 800aeac:	20000b48 	.word	0x20000b48

0800aeb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aebe:	2301      	movs	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d06a      	beq.n	800af9e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	60fb      	str	r3, [r7, #12]
}
 800aee2:	bf00      	nop
 800aee4:	e7fe      	b.n	800aee4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d902      	bls.n	800aef6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	e002      	b.n	800aefc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aefa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	69fa      	ldr	r2, [r7, #28]
 800af02:	429a      	cmp	r2, r3
 800af04:	d04b      	beq.n	800af9e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d146      	bne.n	800af9e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800af10:	4b25      	ldr	r3, [pc, #148]	; (800afa8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	69ba      	ldr	r2, [r7, #24]
 800af16:	429a      	cmp	r2, r3
 800af18:	d10a      	bne.n	800af30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	60bb      	str	r3, [r7, #8]
}
 800af2c:	bf00      	nop
 800af2e:	e7fe      	b.n	800af2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	2b00      	cmp	r3, #0
 800af42:	db04      	blt.n	800af4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	6959      	ldr	r1, [r3, #20]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4a13      	ldr	r2, [pc, #76]	; (800afac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af5e:	4413      	add	r3, r2
 800af60:	4299      	cmp	r1, r3
 800af62:	d11c      	bne.n	800af9e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	3304      	adds	r3, #4
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fd ffaf 	bl	8008ecc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af72:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d903      	bls.n	800af82 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	4a07      	ldr	r2, [pc, #28]	; (800afac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af90:	441a      	add	r2, r3
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	3304      	adds	r3, #4
 800af96:	4619      	mov	r1, r3
 800af98:	4610      	mov	r0, r2
 800af9a:	f7fd ff3c 	bl	8008e16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af9e:	bf00      	nop
 800afa0:	3720      	adds	r7, #32
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20000b44 	.word	0x20000b44
 800afac:	20000b48 	.word	0x20000b48
 800afb0:	20001020 	.word	0x20001020

0800afb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800afb8:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800afc0:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afc6:	3201      	adds	r2, #1
 800afc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800afca:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800afcc:	681b      	ldr	r3, [r3, #0]
	}
 800afce:	4618      	mov	r0, r3
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bc80      	pop	{r7}
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000b44 	.word	0x20000b44

0800afdc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afe6:	4b21      	ldr	r3, [pc, #132]	; (800b06c <prvAddCurrentTaskToDelayedList+0x90>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afec:	4b20      	ldr	r3, [pc, #128]	; (800b070 <prvAddCurrentTaskToDelayedList+0x94>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3304      	adds	r3, #4
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fd ff6a 	bl	8008ecc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800affe:	d10a      	bne.n	800b016 <prvAddCurrentTaskToDelayedList+0x3a>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b006:	4b1a      	ldr	r3, [pc, #104]	; (800b070 <prvAddCurrentTaskToDelayedList+0x94>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3304      	adds	r3, #4
 800b00c:	4619      	mov	r1, r3
 800b00e:	4819      	ldr	r0, [pc, #100]	; (800b074 <prvAddCurrentTaskToDelayedList+0x98>)
 800b010:	f7fd ff01 	bl	8008e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b014:	e026      	b.n	800b064 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4413      	add	r3, r2
 800b01c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b01e:	4b14      	ldr	r3, [pc, #80]	; (800b070 <prvAddCurrentTaskToDelayedList+0x94>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68ba      	ldr	r2, [r7, #8]
 800b024:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d209      	bcs.n	800b042 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <prvAddCurrentTaskToDelayedList+0x94>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	3304      	adds	r3, #4
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7fd ff0e 	bl	8008e5c <vListInsert>
}
 800b040:	e010      	b.n	800b064 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b042:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <prvAddCurrentTaskToDelayedList+0x94>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3304      	adds	r3, #4
 800b04c:	4619      	mov	r1, r3
 800b04e:	4610      	mov	r0, r2
 800b050:	f7fd ff04 	bl	8008e5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b054:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d202      	bcs.n	800b064 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b05e:	4a08      	ldr	r2, [pc, #32]	; (800b080 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	6013      	str	r3, [r2, #0]
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	2000101c 	.word	0x2000101c
 800b070:	20000b44 	.word	0x20000b44
 800b074:	20001004 	.word	0x20001004
 800b078:	20000fd4 	.word	0x20000fd4
 800b07c:	20000fd0 	.word	0x20000fd0
 800b080:	20001038 	.word	0x20001038

0800b084 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b08e:	f000 fb9f 	bl	800b7d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b092:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <xTimerCreateTimerTask+0x80>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d021      	beq.n	800b0de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b0a2:	1d3a      	adds	r2, r7, #4
 800b0a4:	f107 0108 	add.w	r1, r7, #8
 800b0a8:	f107 030c 	add.w	r3, r7, #12
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fd fe6d 	bl	8008d8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	9202      	str	r2, [sp, #8]
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	2302      	movs	r3, #2
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	460a      	mov	r2, r1
 800b0c4:	4910      	ldr	r1, [pc, #64]	; (800b108 <xTimerCreateTimerTask+0x84>)
 800b0c6:	4811      	ldr	r0, [pc, #68]	; (800b10c <xTimerCreateTimerTask+0x88>)
 800b0c8:	f7fe ff38 	bl	8009f3c <xTaskCreateStatic>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4a10      	ldr	r2, [pc, #64]	; (800b110 <xTimerCreateTimerTask+0x8c>)
 800b0d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <xTimerCreateTimerTask+0x8c>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	613b      	str	r3, [r7, #16]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b0fa:	697b      	ldr	r3, [r7, #20]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3718      	adds	r7, #24
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	20001074 	.word	0x20001074
 800b108:	0801059c 	.word	0x0801059c
 800b10c:	0800b37d 	.word	0x0800b37d
 800b110:	20001078 	.word	0x20001078

0800b114 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af02      	add	r7, sp, #8
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
 800b120:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b122:	202c      	movs	r0, #44	; 0x2c
 800b124:	f000 fe88 	bl	800be38 <pvPortMalloc>
 800b128:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00d      	beq.n	800b14c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 f843 	bl	800b1d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b14c:	697b      	ldr	r3, [r7, #20]
	}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b156:	b580      	push	{r7, lr}
 800b158:	b08a      	sub	sp, #40	; 0x28
 800b15a:	af02      	add	r7, sp, #8
 800b15c:	60f8      	str	r0, [r7, #12]
 800b15e:	60b9      	str	r1, [r7, #8]
 800b160:	607a      	str	r2, [r7, #4]
 800b162:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b164:	232c      	movs	r3, #44	; 0x2c
 800b166:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b2c      	cmp	r3, #44	; 0x2c
 800b16c:	d00a      	beq.n	800b184 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	61bb      	str	r3, [r7, #24]
}
 800b180:	bf00      	nop
 800b182:	e7fe      	b.n	800b182 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b184:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	617b      	str	r3, [r7, #20]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00d      	beq.n	800b1c8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	2202      	movs	r2, #2
 800b1b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	68b9      	ldr	r1, [r7, #8]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 f805 	bl	800b1d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b1c8:	69fb      	ldr	r3, [r7, #28]
	}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b086      	sub	sp, #24
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
 800b1de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	617b      	str	r3, [r7, #20]
}
 800b1f8:	bf00      	nop
 800b1fa:	e7fe      	b.n	800b1fa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d01e      	beq.n	800b240 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b202:	f000 fae5 	bl	800b7d0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	6a3a      	ldr	r2, [r7, #32]
 800b21c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	3304      	adds	r3, #4
 800b222:	4618      	mov	r0, r3
 800b224:	f7fd fdeb 	bl	8008dfe <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d008      	beq.n	800b240 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b234:	f043 0304 	orr.w	r3, r3, #4
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b240:	bf00      	nop
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08a      	sub	sp, #40	; 0x28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b256:	2300      	movs	r3, #0
 800b258:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	623b      	str	r3, [r7, #32]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b276:	4b1a      	ldr	r3, [pc, #104]	; (800b2e0 <xTimerGenericCommand+0x98>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d02a      	beq.n	800b2d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b05      	cmp	r3, #5
 800b28e:	dc18      	bgt.n	800b2c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b290:	f7ff fd1a 	bl	800acc8 <xTaskGetSchedulerState>
 800b294:	4603      	mov	r3, r0
 800b296:	2b02      	cmp	r3, #2
 800b298:	d109      	bne.n	800b2ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b29a:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <xTimerGenericCommand+0x98>)
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	f107 0110 	add.w	r1, r7, #16
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a6:	f7fd ffe9 	bl	800927c <xQueueGenericSend>
 800b2aa:	6278      	str	r0, [r7, #36]	; 0x24
 800b2ac:	e012      	b.n	800b2d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	; (800b2e0 <xTimerGenericCommand+0x98>)
 800b2b0:	6818      	ldr	r0, [r3, #0]
 800b2b2:	f107 0110 	add.w	r1, r7, #16
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f7fd ffdf 	bl	800927c <xQueueGenericSend>
 800b2be:	6278      	str	r0, [r7, #36]	; 0x24
 800b2c0:	e008      	b.n	800b2d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b2c2:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <xTimerGenericCommand+0x98>)
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	f107 0110 	add.w	r1, r7, #16
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	683a      	ldr	r2, [r7, #0]
 800b2ce:	f7fe f8d3 	bl	8009478 <xQueueGenericSendFromISR>
 800b2d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3728      	adds	r7, #40	; 0x28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20001074 	.word	0x20001074

0800b2e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ee:	4b22      	ldr	r3, [pc, #136]	; (800b378 <prvProcessExpiredTimer+0x94>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fd fde5 	bl	8008ecc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d022      	beq.n	800b356 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	699a      	ldr	r2, [r3, #24]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	18d1      	adds	r1, r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	6978      	ldr	r0, [r7, #20]
 800b31e:	f000 f8cf 	bl	800b4c0 <prvInsertTimerInActiveList>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01f      	beq.n	800b368 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b328:	2300      	movs	r3, #0
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2300      	movs	r3, #0
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	2100      	movs	r1, #0
 800b332:	6978      	ldr	r0, [r7, #20]
 800b334:	f7ff ff88 	bl	800b248 <xTimerGenericCommand>
 800b338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d113      	bne.n	800b368 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35c:	f023 0301 	bic.w	r3, r3, #1
 800b360:	b2da      	uxtb	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	6a1b      	ldr	r3, [r3, #32]
 800b36c:	6978      	ldr	r0, [r7, #20]
 800b36e:	4798      	blx	r3
}
 800b370:	bf00      	nop
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	2000106c 	.word	0x2000106c

0800b37c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b384:	f107 0308 	add.w	r3, r7, #8
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f857 	bl	800b43c <prvGetNextExpireTime>
 800b38e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4619      	mov	r1, r3
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 f803 	bl	800b3a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b39a:	f000 f8d3 	bl	800b544 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b39e:	e7f1      	b.n	800b384 <prvTimerTask+0x8>

0800b3a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b3aa:	f7fe ffef 	bl	800a38c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3ae:	f107 0308 	add.w	r3, r7, #8
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 f864 	bl	800b480 <prvSampleTimeNow>
 800b3b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d130      	bne.n	800b422 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10a      	bne.n	800b3dc <prvProcessTimerOrBlockTask+0x3c>
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d806      	bhi.n	800b3dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b3ce:	f7ff f821 	bl	800a414 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f7ff ff85 	bl	800b2e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b3da:	e024      	b.n	800b426 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d008      	beq.n	800b3f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b3e2:	4b13      	ldr	r3, [pc, #76]	; (800b430 <prvProcessTimerOrBlockTask+0x90>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <prvProcessTimerOrBlockTask+0x50>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e000      	b.n	800b3f2 <prvProcessTimerOrBlockTask+0x52>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <prvProcessTimerOrBlockTask+0x94>)
 800b3f6:	6818      	ldr	r0, [r3, #0]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4619      	mov	r1, r3
 800b402:	f7fe fd67 	bl	8009ed4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b406:	f7ff f805 	bl	800a414 <xTaskResumeAll>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b410:	4b09      	ldr	r3, [pc, #36]	; (800b438 <prvProcessTimerOrBlockTask+0x98>)
 800b412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	f3bf 8f6f 	isb	sy
}
 800b420:	e001      	b.n	800b426 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b422:	f7fe fff7 	bl	800a414 <xTaskResumeAll>
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001070 	.word	0x20001070
 800b434:	20001074 	.word	0x20001074
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <prvGetNextExpireTime+0x40>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <prvGetNextExpireTime+0x16>
 800b44e:	2201      	movs	r2, #1
 800b450:	e000      	b.n	800b454 <prvGetNextExpireTime+0x18>
 800b452:	2200      	movs	r2, #0
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d105      	bne.n	800b46c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b460:	4b06      	ldr	r3, [pc, #24]	; (800b47c <prvGetNextExpireTime+0x40>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	e001      	b.n	800b470 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	bc80      	pop	{r7}
 800b47a:	4770      	bx	lr
 800b47c:	2000106c 	.word	0x2000106c

0800b480 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b488:	f7ff f862 	bl	800a550 <xTaskGetTickCount>
 800b48c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b48e:	4b0b      	ldr	r3, [pc, #44]	; (800b4bc <prvSampleTimeNow+0x3c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	429a      	cmp	r2, r3
 800b496:	d205      	bcs.n	800b4a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b498:	f000 f936 	bl	800b708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	e002      	b.n	800b4aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b4aa:	4a04      	ldr	r2, [pc, #16]	; (800b4bc <prvSampleTimeNow+0x3c>)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	2000107c 	.word	0x2000107c

0800b4c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d812      	bhi.n	800b50c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	1ad2      	subs	r2, r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d302      	bcc.n	800b4fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	e01b      	b.n	800b532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4fa:	4b10      	ldr	r3, [pc, #64]	; (800b53c <prvInsertTimerInActiveList+0x7c>)
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3304      	adds	r3, #4
 800b502:	4619      	mov	r1, r3
 800b504:	4610      	mov	r0, r2
 800b506:	f7fd fca9 	bl	8008e5c <vListInsert>
 800b50a:	e012      	b.n	800b532 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d206      	bcs.n	800b522 <prvInsertTimerInActiveList+0x62>
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d302      	bcc.n	800b522 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	e007      	b.n	800b532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b522:	4b07      	ldr	r3, [pc, #28]	; (800b540 <prvInsertTimerInActiveList+0x80>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3304      	adds	r3, #4
 800b52a:	4619      	mov	r1, r3
 800b52c:	4610      	mov	r0, r2
 800b52e:	f7fd fc95 	bl	8008e5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b532:	697b      	ldr	r3, [r7, #20]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20001070 	.word	0x20001070
 800b540:	2000106c 	.word	0x2000106c

0800b544 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	; 0x38
 800b548:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b54a:	e0ca      	b.n	800b6e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	da18      	bge.n	800b584 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b552:	1d3b      	adds	r3, r7, #4
 800b554:	3304      	adds	r3, #4
 800b556:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	61fb      	str	r3, [r7, #28]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b57a:	6850      	ldr	r0, [r2, #4]
 800b57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b57e:	6892      	ldr	r2, [r2, #8]
 800b580:	4611      	mov	r1, r2
 800b582:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f2c0 80aa 	blt.w	800b6e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d004      	beq.n	800b5a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	3304      	adds	r3, #4
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fd fc95 	bl	8008ecc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7ff ff6b 	bl	800b480 <prvSampleTimeNow>
 800b5aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b09      	cmp	r3, #9
 800b5b0:	f200 8097 	bhi.w	800b6e2 <prvProcessReceivedCommands+0x19e>
 800b5b4:	a201      	add	r2, pc, #4	; (adr r2, 800b5bc <prvProcessReceivedCommands+0x78>)
 800b5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ba:	bf00      	nop
 800b5bc:	0800b5e5 	.word	0x0800b5e5
 800b5c0:	0800b5e5 	.word	0x0800b5e5
 800b5c4:	0800b5e5 	.word	0x0800b5e5
 800b5c8:	0800b659 	.word	0x0800b659
 800b5cc:	0800b66d 	.word	0x0800b66d
 800b5d0:	0800b6b7 	.word	0x0800b6b7
 800b5d4:	0800b5e5 	.word	0x0800b5e5
 800b5d8:	0800b5e5 	.word	0x0800b5e5
 800b5dc:	0800b659 	.word	0x0800b659
 800b5e0:	0800b66d 	.word	0x0800b66d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5ea:	f043 0301 	orr.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	18d1      	adds	r1, r2, r3
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b604:	f7ff ff5c 	bl	800b4c0 <prvInsertTimerInActiveList>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d069      	beq.n	800b6e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	6a1b      	ldr	r3, [r3, #32]
 800b612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b614:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d05e      	beq.n	800b6e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	441a      	add	r2, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	2300      	movs	r3, #0
 800b632:	2100      	movs	r1, #0
 800b634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b636:	f7ff fe07 	bl	800b248 <xTimerGenericCommand>
 800b63a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d14f      	bne.n	800b6e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	61bb      	str	r3, [r7, #24]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b65e:	f023 0301 	bic.w	r3, r3, #1
 800b662:	b2da      	uxtb	r2, r3
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b66a:	e03a      	b.n	800b6e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b672:	f043 0301 	orr.w	r3, r3, #1
 800b676:	b2da      	uxtb	r2, r3
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10a      	bne.n	800b6a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	617b      	str	r3, [r7, #20]
}
 800b69e:	bf00      	nop
 800b6a0:	e7fe      	b.n	800b6a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	18d1      	adds	r1, r2, r3
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6b0:	f7ff ff06 	bl	800b4c0 <prvInsertTimerInActiveList>
					break;
 800b6b4:	e015      	b.n	800b6e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d103      	bne.n	800b6cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6c6:	f000 fc7b 	bl	800bfc0 <vPortFree>
 800b6ca:	e00a      	b.n	800b6e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6d2:	f023 0301 	bic.w	r3, r3, #1
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6de:	e000      	b.n	800b6e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b6e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6e2:	4b08      	ldr	r3, [pc, #32]	; (800b704 <prvProcessReceivedCommands+0x1c0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	1d39      	adds	r1, r7, #4
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fd ffea 	bl	80096c4 <xQueueReceive>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f47f af2a 	bne.w	800b54c <prvProcessReceivedCommands+0x8>
	}
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3730      	adds	r7, #48	; 0x30
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20001074 	.word	0x20001074

0800b708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b088      	sub	sp, #32
 800b70c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b70e:	e048      	b.n	800b7a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b710:	4b2d      	ldr	r3, [pc, #180]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b71a:	4b2b      	ldr	r3, [pc, #172]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fd fbcf 	bl	8008ecc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d02e      	beq.n	800b7a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	4413      	add	r3, r2
 800b74c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	429a      	cmp	r2, r3
 800b754:	d90e      	bls.n	800b774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b762:	4b19      	ldr	r3, [pc, #100]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7fd fb75 	bl	8008e5c <vListInsert>
 800b772:	e016      	b.n	800b7a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b774:	2300      	movs	r3, #0
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	2300      	movs	r3, #0
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	2100      	movs	r1, #0
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fd62 	bl	800b248 <xTimerGenericCommand>
 800b784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	603b      	str	r3, [r7, #0]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7a2:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1b1      	bne.n	800b710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b7ac:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b7b2:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <prvSwitchTimerLists+0xc4>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a04      	ldr	r2, [pc, #16]	; (800b7c8 <prvSwitchTimerLists+0xc0>)
 800b7b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7ba:	4a04      	ldr	r2, [pc, #16]	; (800b7cc <prvSwitchTimerLists+0xc4>)
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	6013      	str	r3, [r2, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	3718      	adds	r7, #24
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	2000106c 	.word	0x2000106c
 800b7cc:	20001070 	.word	0x20001070

0800b7d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7d6:	f000 f949 	bl	800ba6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7da:	4b15      	ldr	r3, [pc, #84]	; (800b830 <prvCheckForValidListAndQueue+0x60>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d120      	bne.n	800b824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7e2:	4814      	ldr	r0, [pc, #80]	; (800b834 <prvCheckForValidListAndQueue+0x64>)
 800b7e4:	f7fd faec 	bl	8008dc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7e8:	4813      	ldr	r0, [pc, #76]	; (800b838 <prvCheckForValidListAndQueue+0x68>)
 800b7ea:	f7fd fae9 	bl	8008dc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <prvCheckForValidListAndQueue+0x6c>)
 800b7f0:	4a10      	ldr	r2, [pc, #64]	; (800b834 <prvCheckForValidListAndQueue+0x64>)
 800b7f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7f4:	4b12      	ldr	r3, [pc, #72]	; (800b840 <prvCheckForValidListAndQueue+0x70>)
 800b7f6:	4a10      	ldr	r2, [pc, #64]	; (800b838 <prvCheckForValidListAndQueue+0x68>)
 800b7f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4b11      	ldr	r3, [pc, #68]	; (800b844 <prvCheckForValidListAndQueue+0x74>)
 800b800:	4a11      	ldr	r2, [pc, #68]	; (800b848 <prvCheckForValidListAndQueue+0x78>)
 800b802:	2110      	movs	r1, #16
 800b804:	200a      	movs	r0, #10
 800b806:	f7fd fbf3 	bl	8008ff0 <xQueueGenericCreateStatic>
 800b80a:	4603      	mov	r3, r0
 800b80c:	4a08      	ldr	r2, [pc, #32]	; (800b830 <prvCheckForValidListAndQueue+0x60>)
 800b80e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <prvCheckForValidListAndQueue+0x60>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b818:	4b05      	ldr	r3, [pc, #20]	; (800b830 <prvCheckForValidListAndQueue+0x60>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	490b      	ldr	r1, [pc, #44]	; (800b84c <prvCheckForValidListAndQueue+0x7c>)
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fe fb06 	bl	8009e30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b824:	f000 f952 	bl	800bacc <vPortExitCritical>
}
 800b828:	bf00      	nop
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20001074 	.word	0x20001074
 800b834:	20001044 	.word	0x20001044
 800b838:	20001058 	.word	0x20001058
 800b83c:	2000106c 	.word	0x2000106c
 800b840:	20001070 	.word	0x20001070
 800b844:	20001120 	.word	0x20001120
 800b848:	20001080 	.word	0x20001080
 800b84c:	080105a4 	.word	0x080105a4

0800b850 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	60fb      	str	r3, [r7, #12]
}
 800b874:	bf00      	nop
 800b876:	e7fe      	b.n	800b876 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b878:	f000 f8f8 	bl	800ba6c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b882:	f000 f923 	bl	800bacc <vPortExitCritical>

	return pvReturn;
 800b886:	693b      	ldr	r3, [r7, #16]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3718      	adds	r7, #24
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3b04      	subs	r3, #4
 800b8a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	f023 0201 	bic.w	r2, r3, #1
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8c0:	4a08      	ldr	r2, [pc, #32]	; (800b8e4 <pxPortInitialiseStack+0x54>)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	3b14      	subs	r3, #20
 800b8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3b20      	subs	r3, #32
 800b8d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bc80      	pop	{r7}
 800b8e2:	4770      	bx	lr
 800b8e4:	0800b8e9 	.word	0x0800b8e9

0800b8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <prvTaskExitError+0x54>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8fa:	d00a      	beq.n	800b912 <prvTaskExitError+0x2a>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	60fb      	str	r3, [r7, #12]
}
 800b90e:	bf00      	nop
 800b910:	e7fe      	b.n	800b910 <prvTaskExitError+0x28>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	60bb      	str	r3, [r7, #8]
}
 800b924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b926:	bf00      	nop
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0fc      	beq.n	800b928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b92e:	bf00      	nop
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	bc80      	pop	{r7}
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	20000010 	.word	0x20000010

0800b940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b940:	4b07      	ldr	r3, [pc, #28]	; (800b960 <pxCurrentTCBConst2>)
 800b942:	6819      	ldr	r1, [r3, #0]
 800b944:	6808      	ldr	r0, [r1, #0]
 800b946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b94a:	f380 8809 	msr	PSP, r0
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f04f 0000 	mov.w	r0, #0
 800b956:	f380 8811 	msr	BASEPRI, r0
 800b95a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b95e:	4770      	bx	lr

0800b960 <pxCurrentTCBConst2>:
 800b960:	20000b44 	.word	0x20000b44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop

0800b968 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b968:	4806      	ldr	r0, [pc, #24]	; (800b984 <prvPortStartFirstTask+0x1c>)
 800b96a:	6800      	ldr	r0, [r0, #0]
 800b96c:	6800      	ldr	r0, [r0, #0]
 800b96e:	f380 8808 	msr	MSP, r0
 800b972:	b662      	cpsie	i
 800b974:	b661      	cpsie	f
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	df00      	svc	0
 800b980:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b982:	bf00      	nop
 800b984:	e000ed08 	.word	0xe000ed08

0800b988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b98e:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <xPortStartScheduler+0xd0>)
 800b990:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	22ff      	movs	r2, #255	; 0xff
 800b99e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9a8:	78fb      	ldrb	r3, [r7, #3]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	4b2a      	ldr	r3, [pc, #168]	; (800ba5c <xPortStartScheduler+0xd4>)
 800b9b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <xPortStartScheduler+0xd8>)
 800b9b8:	2207      	movs	r2, #7
 800b9ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9bc:	e009      	b.n	800b9d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b9be:	4b28      	ldr	r3, [pc, #160]	; (800ba60 <xPortStartScheduler+0xd8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	4a26      	ldr	r2, [pc, #152]	; (800ba60 <xPortStartScheduler+0xd8>)
 800b9c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9c8:	78fb      	ldrb	r3, [r7, #3]
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9da:	2b80      	cmp	r3, #128	; 0x80
 800b9dc:	d0ef      	beq.n	800b9be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9de:	4b20      	ldr	r3, [pc, #128]	; (800ba60 <xPortStartScheduler+0xd8>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f1c3 0307 	rsb	r3, r3, #7
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	d00a      	beq.n	800ba00 <xPortStartScheduler+0x78>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	60bb      	str	r3, [r7, #8]
}
 800b9fc:	bf00      	nop
 800b9fe:	e7fe      	b.n	800b9fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <xPortStartScheduler+0xd8>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	021b      	lsls	r3, r3, #8
 800ba06:	4a16      	ldr	r2, [pc, #88]	; (800ba60 <xPortStartScheduler+0xd8>)
 800ba08:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba0a:	4b15      	ldr	r3, [pc, #84]	; (800ba60 <xPortStartScheduler+0xd8>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba12:	4a13      	ldr	r2, [pc, #76]	; (800ba60 <xPortStartScheduler+0xd8>)
 800ba14:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba1e:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <xPortStartScheduler+0xdc>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a10      	ldr	r2, [pc, #64]	; (800ba64 <xPortStartScheduler+0xdc>)
 800ba24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <xPortStartScheduler+0xdc>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a0d      	ldr	r2, [pc, #52]	; (800ba64 <xPortStartScheduler+0xdc>)
 800ba30:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba34:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba36:	f000 f985 	bl	800bd44 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba3a:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <xPortStartScheduler+0xe0>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba40:	f7ff ff92 	bl	800b968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba44:	f7fe fe72 	bl	800a72c <vTaskSwitchContext>
	prvTaskExitError();
 800ba48:	f7ff ff4e 	bl	800b8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	e000e400 	.word	0xe000e400
 800ba5c:	2000117c 	.word	0x2000117c
 800ba60:	20001180 	.word	0x20001180
 800ba64:	e000ed20 	.word	0xe000ed20
 800ba68:	20000010 	.word	0x20000010

0800ba6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	607b      	str	r3, [r7, #4]
}
 800ba84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba86:	4b0f      	ldr	r3, [pc, #60]	; (800bac4 <vPortEnterCritical+0x58>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	; (800bac4 <vPortEnterCritical+0x58>)
 800ba8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba90:	4b0c      	ldr	r3, [pc, #48]	; (800bac4 <vPortEnterCritical+0x58>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d10f      	bne.n	800bab8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba98:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <vPortEnterCritical+0x5c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <vPortEnterCritical+0x4c>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	603b      	str	r3, [r7, #0]
}
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <vPortEnterCritical+0x4a>
	}
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	bc80      	pop	{r7}
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	20000010 	.word	0x20000010
 800bac8:	e000ed04 	.word	0xe000ed04

0800bacc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bad2:	4b11      	ldr	r3, [pc, #68]	; (800bb18 <vPortExitCritical+0x4c>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10a      	bne.n	800baf0 <vPortExitCritical+0x24>
	__asm volatile
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	607b      	str	r3, [r7, #4]
}
 800baec:	bf00      	nop
 800baee:	e7fe      	b.n	800baee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800baf0:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <vPortExitCritical+0x4c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	4a08      	ldr	r2, [pc, #32]	; (800bb18 <vPortExitCritical+0x4c>)
 800baf8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bafa:	4b07      	ldr	r3, [pc, #28]	; (800bb18 <vPortExitCritical+0x4c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <vPortExitCritical+0x42>
 800bb02:	2300      	movs	r3, #0
 800bb04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	f383 8811 	msr	BASEPRI, r3
}
 800bb0c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr
 800bb18:	20000010 	.word	0x20000010
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb20:	f3ef 8009 	mrs	r0, PSP
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <pxCurrentTCBConst>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bb30:	6010      	str	r0, [r2, #0]
 800bb32:	e92d 4008 	stmdb	sp!, {r3, lr}
 800bb36:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb3a:	f380 8811 	msr	BASEPRI, r0
 800bb3e:	f7fe fdf5 	bl	800a72c <vTaskSwitchContext>
 800bb42:	f04f 0000 	mov.w	r0, #0
 800bb46:	f380 8811 	msr	BASEPRI, r0
 800bb4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb4e:	6819      	ldr	r1, [r3, #0]
 800bb50:	6808      	ldr	r0, [r1, #0]
 800bb52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bb56:	f380 8809 	msr	PSP, r0
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	4770      	bx	lr

0800bb60 <pxCurrentTCBConst>:
 800bb60:	20000b44 	.word	0x20000b44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop

0800bb68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb82:	f7fe fd19 	bl	800a5b8 <xTaskIncrementTick>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb8c:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <SysTick_Handler+0x40>)
 800bb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	f383 8811 	msr	BASEPRI, r3
}
 800bb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4b5d      	ldr	r3, [pc, #372]	; (800bd2c <vPortSuppressTicksAndSleep+0x180>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d902      	bls.n	800bbc4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800bbbe:	4b5b      	ldr	r3, [pc, #364]	; (800bd2c <vPortSuppressTicksAndSleep+0x180>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800bbc4:	4b5a      	ldr	r3, [pc, #360]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a59      	ldr	r2, [pc, #356]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800bbd0:	4b58      	ldr	r3, [pc, #352]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	4957      	ldr	r1, [pc, #348]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bbda:	6809      	ldr	r1, [r1, #0]
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	4413      	add	r3, r2
 800bbe2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800bbe4:	4b55      	ldr	r3, [pc, #340]	; (800bd3c <vPortSuppressTicksAndSleep+0x190>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d904      	bls.n	800bbf8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800bbee:	4b53      	ldr	r3, [pc, #332]	; (800bd3c <vPortSuppressTicksAndSleep+0x190>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69fa      	ldr	r2, [r7, #28]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800bbf8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800bbfa:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800bbfe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800bc02:	f7fe ff71 	bl	800aae8 <eTaskConfirmSleepModeStatus>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d110      	bne.n	800bc2e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800bc0c:	4b49      	ldr	r3, [pc, #292]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bc0e:	4a4c      	ldr	r2, [pc, #304]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bc14:	4b46      	ldr	r3, [pc, #280]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a45      	ldr	r2, [pc, #276]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc1a:	f043 0301 	orr.w	r3, r3, #1
 800bc1e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800bc20:	4b45      	ldr	r3, [pc, #276]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a46      	ldr	r2, [pc, #280]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bc26:	3b01      	subs	r3, #1
 800bc28:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800bc2a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800bc2c:	e07a      	b.n	800bd24 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800bc2e:	4a44      	ldr	r2, [pc, #272]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc34:	4b3f      	ldr	r3, [pc, #252]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bc3a:	4b3d      	ldr	r3, [pc, #244]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a3c      	ldr	r2, [pc, #240]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc40:	f043 0301 	orr.w	r3, r3, #1
 800bc44:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800bc4a:	f107 030c 	add.w	r3, r7, #12
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7f5 f98c 	bl	8000f6c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d004      	beq.n	800bc64 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800bc5a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800bc5e:	bf30      	wfi
				__asm volatile( "isb" );
 800bc60:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800bc64:	1d3b      	adds	r3, r7, #4
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f5 f989 	bl	8000f7e <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800bc6c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800bc6e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800bc72:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800bc76:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800bc78:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800bc7c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800bc80:	4b2b      	ldr	r3, [pc, #172]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc82:	2206      	movs	r2, #6
 800bc84:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800bc86:	4b2a      	ldr	r3, [pc, #168]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01d      	beq.n	800bcce <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800bc92:	4b29      	ldr	r3, [pc, #164]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4b27      	ldr	r3, [pc, #156]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bc98:	6819      	ldr	r1, [r3, #0]
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	1acb      	subs	r3, r1, r3
 800bc9e:	4413      	add	r3, r2
 800bca0:	3b01      	subs	r3, #1
 800bca2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800bca4:	4b25      	ldr	r3, [pc, #148]	; (800bd3c <vPortSuppressTicksAndSleep+0x190>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d304      	bcc.n	800bcb8 <vPortSuppressTicksAndSleep+0x10c>
 800bcae:	4b22      	ldr	r3, [pc, #136]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d903      	bls.n	800bcc0 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800bcb8:	4b1f      	ldr	r3, [pc, #124]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800bcc0:	4a1f      	ldr	r2, [pc, #124]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	61bb      	str	r3, [r7, #24]
 800bccc:	e018      	b.n	800bd00 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a19      	ldr	r2, [pc, #100]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	fb02 f203 	mul.w	r2, r2, r3
 800bcd8:	4b16      	ldr	r3, [pc, #88]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800bce0:	4b15      	ldr	r3, [pc, #84]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcea:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	4a11      	ldr	r2, [pc, #68]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bcf2:	6812      	ldr	r2, [r2, #0]
 800bcf4:	fb02 f203 	mul.w	r2, r2, r3
 800bcf8:	4911      	ldr	r1, [pc, #68]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <vPortSuppressTicksAndSleep+0x188>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800bd06:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <vPortSuppressTicksAndSleep+0x184>)
 800bd0c:	f043 0301 	orr.w	r3, r3, #1
 800bd10:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800bd12:	69b8      	ldr	r0, [r7, #24]
 800bd14:	f7fe fc2a 	bl	800a56c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800bd18:	4b07      	ldr	r3, [pc, #28]	; (800bd38 <vPortSuppressTicksAndSleep+0x18c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a08      	ldr	r2, [pc, #32]	; (800bd40 <vPortSuppressTicksAndSleep+0x194>)
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800bd22:	b662      	cpsie	i
	}
 800bd24:	bf00      	nop
 800bd26:	3720      	adds	r7, #32
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20001174 	.word	0x20001174
 800bd30:	e000e010 	.word	0xe000e010
 800bd34:	e000e018 	.word	0xe000e018
 800bd38:	20001170 	.word	0x20001170
 800bd3c:	20001178 	.word	0x20001178
 800bd40:	e000e014 	.word	0xe000e014

0800bd44 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800bd48:	4b14      	ldr	r3, [pc, #80]	; (800bd9c <vPortSetupTimerInterrupt+0x58>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a14      	ldr	r2, [pc, #80]	; (800bda0 <vPortSetupTimerInterrupt+0x5c>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	099b      	lsrs	r3, r3, #6
 800bd54:	4a13      	ldr	r2, [pc, #76]	; (800bda4 <vPortSetupTimerInterrupt+0x60>)
 800bd56:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800bd58:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <vPortSetupTimerInterrupt+0x60>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800bd60:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd64:	4a10      	ldr	r2, [pc, #64]	; (800bda8 <vPortSetupTimerInterrupt+0x64>)
 800bd66:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800bd68:	4b10      	ldr	r3, [pc, #64]	; (800bdac <vPortSetupTimerInterrupt+0x68>)
 800bd6a:	222d      	movs	r2, #45	; 0x2d
 800bd6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd6e:	4b10      	ldr	r3, [pc, #64]	; (800bdb0 <vPortSetupTimerInterrupt+0x6c>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd74:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <vPortSetupTimerInterrupt+0x70>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd7a:	4b08      	ldr	r3, [pc, #32]	; (800bd9c <vPortSetupTimerInterrupt+0x58>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <vPortSetupTimerInterrupt+0x5c>)
 800bd80:	fba2 2303 	umull	r2, r3, r2, r3
 800bd84:	099b      	lsrs	r3, r3, #6
 800bd86:	4a0c      	ldr	r2, [pc, #48]	; (800bdb8 <vPortSetupTimerInterrupt+0x74>)
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd8c:	4b08      	ldr	r3, [pc, #32]	; (800bdb0 <vPortSetupTimerInterrupt+0x6c>)
 800bd8e:	2207      	movs	r2, #7
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bc80      	pop	{r7}
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	20000004 	.word	0x20000004
 800bda0:	10624dd3 	.word	0x10624dd3
 800bda4:	20001170 	.word	0x20001170
 800bda8:	20001174 	.word	0x20001174
 800bdac:	20001178 	.word	0x20001178
 800bdb0:	e000e010 	.word	0xe000e010
 800bdb4:	e000e018 	.word	0xe000e018
 800bdb8:	e000e014 	.word	0xe000e014

0800bdbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdc2:	f3ef 8305 	mrs	r3, IPSR
 800bdc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b0f      	cmp	r3, #15
 800bdcc:	d914      	bls.n	800bdf8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdce:	4a16      	ldr	r2, [pc, #88]	; (800be28 <vPortValidateInterruptPriority+0x6c>)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd8:	4b14      	ldr	r3, [pc, #80]	; (800be2c <vPortValidateInterruptPriority+0x70>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	7afa      	ldrb	r2, [r7, #11]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d20a      	bcs.n	800bdf8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	607b      	str	r3, [r7, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf8:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <vPortValidateInterruptPriority+0x74>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be00:	4b0c      	ldr	r3, [pc, #48]	; (800be34 <vPortValidateInterruptPriority+0x78>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	429a      	cmp	r2, r3
 800be06:	d90a      	bls.n	800be1e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	603b      	str	r3, [r7, #0]
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <vPortValidateInterruptPriority+0x60>
	}
 800be1e:	bf00      	nop
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	bc80      	pop	{r7}
 800be26:	4770      	bx	lr
 800be28:	e000e3f0 	.word	0xe000e3f0
 800be2c:	2000117c 	.word	0x2000117c
 800be30:	e000ed0c 	.word	0xe000ed0c
 800be34:	20001180 	.word	0x20001180

0800be38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be44:	f7fe faa2 	bl	800a38c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be48:	4b58      	ldr	r3, [pc, #352]	; (800bfac <pvPortMalloc+0x174>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be50:	f000 f910 	bl	800c074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be54:	4b56      	ldr	r3, [pc, #344]	; (800bfb0 <pvPortMalloc+0x178>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4013      	ands	r3, r2
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f040 808e 	bne.w	800bf7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01d      	beq.n	800bea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be68:	2208      	movs	r2, #8
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f003 0307 	and.w	r3, r3, #7
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f023 0307 	bic.w	r3, r3, #7
 800be80:	3308      	adds	r3, #8
 800be82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <pvPortMalloc+0x6c>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	617b      	str	r3, [r7, #20]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d069      	beq.n	800bf7e <pvPortMalloc+0x146>
 800beaa:	4b42      	ldr	r3, [pc, #264]	; (800bfb4 <pvPortMalloc+0x17c>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d864      	bhi.n	800bf7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beb4:	4b40      	ldr	r3, [pc, #256]	; (800bfb8 <pvPortMalloc+0x180>)
 800beb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800beb8:	4b3f      	ldr	r3, [pc, #252]	; (800bfb8 <pvPortMalloc+0x180>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bebe:	e004      	b.n	800beca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d903      	bls.n	800bedc <pvPortMalloc+0xa4>
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1f1      	bne.n	800bec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bedc:	4b33      	ldr	r3, [pc, #204]	; (800bfac <pvPortMalloc+0x174>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d04b      	beq.n	800bf7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2208      	movs	r2, #8
 800beec:	4413      	add	r3, r2
 800beee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	2308      	movs	r3, #8
 800bf02:	005b      	lsls	r3, r3, #1
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d91f      	bls.n	800bf48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <pvPortMalloc+0xf8>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	613b      	str	r3, [r7, #16]
}
 800bf2c:	bf00      	nop
 800bf2e:	e7fe      	b.n	800bf2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf42:	69b8      	ldr	r0, [r7, #24]
 800bf44:	f000 f8f8 	bl	800c138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf48:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <pvPortMalloc+0x17c>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	4a18      	ldr	r2, [pc, #96]	; (800bfb4 <pvPortMalloc+0x17c>)
 800bf54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf56:	4b17      	ldr	r3, [pc, #92]	; (800bfb4 <pvPortMalloc+0x17c>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b18      	ldr	r3, [pc, #96]	; (800bfbc <pvPortMalloc+0x184>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d203      	bcs.n	800bf6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf62:	4b14      	ldr	r3, [pc, #80]	; (800bfb4 <pvPortMalloc+0x17c>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a15      	ldr	r2, [pc, #84]	; (800bfbc <pvPortMalloc+0x184>)
 800bf68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	685a      	ldr	r2, [r3, #4]
 800bf6e:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <pvPortMalloc+0x178>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf7e:	f7fe fa49 	bl	800a414 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	f003 0307 	and.w	r3, r3, #7
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00a      	beq.n	800bfa2 <pvPortMalloc+0x16a>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	60fb      	str	r3, [r7, #12]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <pvPortMalloc+0x168>
	return pvReturn;
 800bfa2:	69fb      	ldr	r3, [r7, #28]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3728      	adds	r7, #40	; 0x28
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	20001d8c 	.word	0x20001d8c
 800bfb0:	20001d98 	.word	0x20001d98
 800bfb4:	20001d90 	.word	0x20001d90
 800bfb8:	20001d84 	.word	0x20001d84
 800bfbc:	20001d94 	.word	0x20001d94

0800bfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d048      	beq.n	800c064 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	425b      	negs	r3, r3
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4413      	add	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	4b21      	ldr	r3, [pc, #132]	; (800c06c <vPortFree+0xac>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4013      	ands	r3, r2
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10a      	bne.n	800c004 <vPortFree+0x44>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00a      	beq.n	800c022 <vPortFree+0x62>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60bb      	str	r3, [r7, #8]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <vPortFree+0xac>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4013      	ands	r3, r2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d019      	beq.n	800c064 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d115      	bne.n	800c064 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <vPortFree+0xac>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	43db      	mvns	r3, r3
 800c042:	401a      	ands	r2, r3
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c048:	f7fe f9a0 	bl	800a38c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	4b07      	ldr	r3, [pc, #28]	; (800c070 <vPortFree+0xb0>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4413      	add	r3, r2
 800c056:	4a06      	ldr	r2, [pc, #24]	; (800c070 <vPortFree+0xb0>)
 800c058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c05a:	6938      	ldr	r0, [r7, #16]
 800c05c:	f000 f86c 	bl	800c138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c060:	f7fe f9d8 	bl	800a414 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c064:	bf00      	nop
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	20001d98 	.word	0x20001d98
 800c070:	20001d90 	.word	0x20001d90

0800c074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c07a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c07e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c080:	4b27      	ldr	r3, [pc, #156]	; (800c120 <prvHeapInit+0xac>)
 800c082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f003 0307 	and.w	r3, r3, #7
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00c      	beq.n	800c0a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3307      	adds	r3, #7
 800c092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f023 0307 	bic.w	r3, r3, #7
 800c09a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	4a1f      	ldr	r2, [pc, #124]	; (800c120 <prvHeapInit+0xac>)
 800c0a4:	4413      	add	r3, r2
 800c0a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0ac:	4a1d      	ldr	r2, [pc, #116]	; (800c124 <prvHeapInit+0xb0>)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0b2:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <prvHeapInit+0xb0>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	4413      	add	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0c0:	2208      	movs	r2, #8
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	1a9b      	subs	r3, r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0307 	bic.w	r3, r3, #7
 800c0ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4a15      	ldr	r2, [pc, #84]	; (800c128 <prvHeapInit+0xb4>)
 800c0d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0d6:	4b14      	ldr	r3, [pc, #80]	; (800c128 <prvHeapInit+0xb4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0de:	4b12      	ldr	r3, [pc, #72]	; (800c128 <prvHeapInit+0xb4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	1ad2      	subs	r2, r2, r3
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <prvHeapInit+0xb4>)
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <prvHeapInit+0xb8>)
 800c102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	4a09      	ldr	r2, [pc, #36]	; (800c130 <prvHeapInit+0xbc>)
 800c10a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c10c:	4b09      	ldr	r3, [pc, #36]	; (800c134 <prvHeapInit+0xc0>)
 800c10e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c112:	601a      	str	r2, [r3, #0]
}
 800c114:	bf00      	nop
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	20001184 	.word	0x20001184
 800c124:	20001d84 	.word	0x20001d84
 800c128:	20001d8c 	.word	0x20001d8c
 800c12c:	20001d94 	.word	0x20001d94
 800c130:	20001d90 	.word	0x20001d90
 800c134:	20001d98 	.word	0x20001d98

0800c138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c140:	4b27      	ldr	r3, [pc, #156]	; (800c1e0 <prvInsertBlockIntoFreeList+0xa8>)
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	e002      	b.n	800c14c <prvInsertBlockIntoFreeList+0x14>
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	429a      	cmp	r2, r3
 800c154:	d8f7      	bhi.n	800c146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d108      	bne.n	800c17a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	441a      	add	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	441a      	add	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d118      	bne.n	800c1c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4b14      	ldr	r3, [pc, #80]	; (800c1e4 <prvInsertBlockIntoFreeList+0xac>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	429a      	cmp	r2, r3
 800c198:	d00d      	beq.n	800c1b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	e008      	b.n	800c1c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <prvInsertBlockIntoFreeList+0xac>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	e003      	b.n	800c1c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d002      	beq.n	800c1d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1d6:	bf00      	nop
 800c1d8:	3714      	adds	r7, #20
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bc80      	pop	{r7}
 800c1de:	4770      	bx	lr
 800c1e0:	20001d84 	.word	0x20001d84
 800c1e4:	20001d8c 	.word	0x20001d8c

0800c1e8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af02      	add	r7, sp, #8
 800c1ee:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800c1f0:	4a21      	ldr	r2, [pc, #132]	; (800c278 <RadioInit+0x90>)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800c1f6:	4b21      	ldr	r3, [pc, #132]	; (800c27c <RadioInit+0x94>)
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800c1fc:	4b1f      	ldr	r3, [pc, #124]	; (800c27c <RadioInit+0x94>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800c202:	4b1e      	ldr	r3, [pc, #120]	; (800c27c <RadioInit+0x94>)
 800c204:	2200      	movs	r2, #0
 800c206:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800c208:	481d      	ldr	r0, [pc, #116]	; (800c280 <RadioInit+0x98>)
 800c20a:	f001 fe7b 	bl	800df04 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800c20e:	2000      	movs	r0, #0
 800c210:	f001 f818 	bl	800d244 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800c214:	f002 f90c 	bl	800e430 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800c218:	2100      	movs	r1, #0
 800c21a:	2000      	movs	r0, #0
 800c21c:	f002 fc62 	bl	800eae4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800c220:	2204      	movs	r2, #4
 800c222:	2100      	movs	r1, #0
 800c224:	2001      	movs	r0, #1
 800c226:	f002 fa8d 	bl	800e744 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c22a:	2300      	movs	r3, #0
 800c22c:	2200      	movs	r2, #0
 800c22e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c232:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c236:	f002 f9c1 	bl	800e5bc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800c23a:	f000 fe95 	bl	800cf68 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800c23e:	2300      	movs	r3, #0
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4b10      	ldr	r3, [pc, #64]	; (800c284 <RadioInit+0x9c>)
 800c244:	2200      	movs	r2, #0
 800c246:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c24a:	480f      	ldr	r0, [pc, #60]	; (800c288 <RadioInit+0xa0>)
 800c24c:	f003 fa14 	bl	800f678 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800c250:	2300      	movs	r3, #0
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <RadioInit+0xa4>)
 800c256:	2200      	movs	r2, #0
 800c258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c25c:	480c      	ldr	r0, [pc, #48]	; (800c290 <RadioInit+0xa8>)
 800c25e:	f003 fa0b 	bl	800f678 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800c262:	4809      	ldr	r0, [pc, #36]	; (800c288 <RadioInit+0xa0>)
 800c264:	f003 faac 	bl	800f7c0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800c268:	4809      	ldr	r0, [pc, #36]	; (800c290 <RadioInit+0xa8>)
 800c26a:	f003 faa9 	bl	800f7c0 <UTIL_TIMER_Stop>
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20001e9c 	.word	0x20001e9c
 800c27c:	20002924 	.word	0x20002924
 800c280:	0800d329 	.word	0x0800d329
 800c284:	0800d2b1 	.word	0x0800d2b1
 800c288:	2000297c 	.word	0x2000297c
 800c28c:	0800d2c5 	.word	0x0800d2c5
 800c290:	20002994 	.word	0x20002994

0800c294 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800c298:	f001 fe76 	bl	800df88 <SUBGRF_GetOperatingMode>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b07      	cmp	r3, #7
 800c2a0:	d00a      	beq.n	800c2b8 <RadioGetStatus+0x24>
 800c2a2:	2b07      	cmp	r3, #7
 800c2a4:	dc0a      	bgt.n	800c2bc <RadioGetStatus+0x28>
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d002      	beq.n	800c2b0 <RadioGetStatus+0x1c>
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	d002      	beq.n	800c2b4 <RadioGetStatus+0x20>
 800c2ae:	e005      	b.n	800c2bc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e004      	b.n	800c2be <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e002      	b.n	800c2be <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	e000      	b.n	800c2be <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800c2bc:	2300      	movs	r3, #0
    }
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800c2ce:	4a25      	ldr	r2, [pc, #148]	; (800c364 <RadioSetModem+0xa0>)
 800c2d0:	79fb      	ldrb	r3, [r7, #7]
 800c2d2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800c2d4:	79fb      	ldrb	r3, [r7, #7]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f002 ff37 	bl	800f14a <RFW_SetRadioModem>
    switch( modem )
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d80b      	bhi.n	800c2fc <RadioSetModem+0x38>
 800c2e4:	a201      	add	r2, pc, #4	; (adr r2, 800c2ec <RadioSetModem+0x28>)
 800c2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ea:	bf00      	nop
 800c2ec:	0800c30b 	.word	0x0800c30b
 800c2f0:	0800c331 	.word	0x0800c331
 800c2f4:	0800c33f 	.word	0x0800c33f
 800c2f8:	0800c34d 	.word	0x0800c34d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f002 f9fb 	bl	800e6f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c302:	4b18      	ldr	r3, [pc, #96]	; (800c364 <RadioSetModem+0xa0>)
 800c304:	2200      	movs	r2, #0
 800c306:	735a      	strb	r2, [r3, #13]
        break;
 800c308:	e028      	b.n	800c35c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800c30a:	2001      	movs	r0, #1
 800c30c:	f002 f9f4 	bl	800e6f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800c310:	4b14      	ldr	r3, [pc, #80]	; (800c364 <RadioSetModem+0xa0>)
 800c312:	7b5a      	ldrb	r2, [r3, #13]
 800c314:	4b13      	ldr	r3, [pc, #76]	; (800c364 <RadioSetModem+0xa0>)
 800c316:	7b1b      	ldrb	r3, [r3, #12]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d01e      	beq.n	800c35a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800c31c:	4b11      	ldr	r3, [pc, #68]	; (800c364 <RadioSetModem+0xa0>)
 800c31e:	7b1a      	ldrb	r2, [r3, #12]
 800c320:	4b10      	ldr	r3, [pc, #64]	; (800c364 <RadioSetModem+0xa0>)
 800c322:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800c324:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <RadioSetModem+0xa0>)
 800c326:	7b5b      	ldrb	r3, [r3, #13]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 ff8b 	bl	800d244 <RadioSetPublicNetwork>
        }
        break;
 800c32e:	e014      	b.n	800c35a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800c330:	2002      	movs	r0, #2
 800c332:	f002 f9e1 	bl	800e6f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c336:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <RadioSetModem+0xa0>)
 800c338:	2200      	movs	r2, #0
 800c33a:	735a      	strb	r2, [r3, #13]
        break;
 800c33c:	e00e      	b.n	800c35c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800c33e:	2002      	movs	r0, #2
 800c340:	f002 f9da 	bl	800e6f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c344:	4b07      	ldr	r3, [pc, #28]	; (800c364 <RadioSetModem+0xa0>)
 800c346:	2200      	movs	r2, #0
 800c348:	735a      	strb	r2, [r3, #13]
        break;
 800c34a:	e007      	b.n	800c35c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800c34c:	2000      	movs	r0, #0
 800c34e:	f002 f9d3 	bl	800e6f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800c352:	4b04      	ldr	r3, [pc, #16]	; (800c364 <RadioSetModem+0xa0>)
 800c354:	2200      	movs	r2, #0
 800c356:	735a      	strb	r2, [r3, #13]
        break;
 800c358:	e000      	b.n	800c35c <RadioSetModem+0x98>
        break;
 800c35a:	bf00      	nop
    }
}
 800c35c:	bf00      	nop
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20002924 	.word	0x20002924

0800c368 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f002 f97f 	bl	800e674 <SUBGRF_SetRfFrequency>
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b090      	sub	sp, #64	; 0x40
 800c382:	af0a      	add	r7, sp, #40	; 0x28
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	603b      	str	r3, [r7, #0]
 800c38a:	4613      	mov	r3, r2
 800c38c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800c38e:	2301      	movs	r3, #1
 800c390:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800c39a:	f000 fdf8 	bl	800cf8e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f7ff ff90 	bl	800c2c4 <RadioSetModem>

    RadioSetChannel( freq );
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7ff ffdf 	bl	800c368 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9308      	str	r3, [sp, #32]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9307      	str	r3, [sp, #28]
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	9306      	str	r3, [sp, #24]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9303      	str	r3, [sp, #12]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	2000      	movs	r0, #0
 800c3dc:	f000 f840 	bl	800c460 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	f000 fddb 	bl	800cf9c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800c3e6:	f000 ff5b 	bl	800d2a0 <RadioGetWakeupTime>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7f6 f8e9 	bl	80025c4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800c3f2:	f003 fa7f 	bl	800f8f4 <UTIL_TIMER_GetCurrentTime>
 800c3f6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800c3f8:	e00d      	b.n	800c416 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f000 fea0 	bl	800d140 <RadioRssi>
 800c400:	4603      	mov	r3, r0
 800c402:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800c404:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800c408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	dd02      	ble.n	800c416 <RadioIsChannelFree+0x98>
        {
            status = false;
 800c410:	2300      	movs	r3, #0
 800c412:	75fb      	strb	r3, [r7, #23]
            break;
 800c414:	e006      	b.n	800c424 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800c416:	6938      	ldr	r0, [r7, #16]
 800c418:	f003 fa7e 	bl	800f918 <UTIL_TIMER_GetElapsedTime>
 800c41c:	4602      	mov	r2, r0
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	4293      	cmp	r3, r2
 800c422:	d8ea      	bhi.n	800c3fa <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800c424:	f000 fdb3 	bl	800cf8e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800c43c:	2001      	movs	r0, #1
 800c43e:	f7ff ff41 	bl	800c2c4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c442:	2300      	movs	r3, #0
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	2000      	movs	r0, #0
 800c44a:	f002 f8b7 	bl	800e5bc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800c44e:	f001 fe6c 	bl	800e12a <SUBGRF_GetRandom>
 800c452:	6078      	str	r0, [r7, #4]

    return rnd;
 800c454:	687b      	ldr	r3, [r7, #4]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b08a      	sub	sp, #40	; 0x28
 800c464:	af00      	add	r7, sp, #0
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	461a      	mov	r2, r3
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]
 800c470:	4613      	mov	r3, r2
 800c472:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800c474:	4abd      	ldr	r2, [pc, #756]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c476:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800c47a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800c47c:	f002 fe23 	bl	800f0c6 <RFW_DeInit>
    if( rxContinuous == true )
 800c480:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800c484:	2b00      	cmp	r3, #0
 800c486:	d001      	beq.n	800c48c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800c48c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d004      	beq.n	800c49e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800c494:	4ab6      	ldr	r2, [pc, #728]	; (800c770 <RadioSetRxConfig+0x310>)
 800c496:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c49a:	7013      	strb	r3, [r2, #0]
 800c49c:	e002      	b.n	800c4a4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800c49e:	4bb4      	ldr	r3, [pc, #720]	; (800c770 <RadioSetRxConfig+0x310>)
 800c4a0:	22ff      	movs	r2, #255	; 0xff
 800c4a2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	d009      	beq.n	800c4be <RadioSetRxConfig+0x5e>
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	f300 81da 	bgt.w	800c864 <RadioSetRxConfig+0x404>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 80bf 	beq.w	800c634 <RadioSetRxConfig+0x1d4>
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	f000 812c 	beq.w	800c714 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800c4bc:	e1d2      	b.n	800c864 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800c4be:	2001      	movs	r0, #1
 800c4c0:	f001 ff78 	bl	800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c4c4:	4ba9      	ldr	r3, [pc, #676]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c4cc:	4aa7      	ldr	r2, [pc, #668]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800c4d2:	4ba6      	ldr	r3, [pc, #664]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4d4:	2209      	movs	r2, #9
 800c4d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800c4da:	4ba4      	ldr	r3, [pc, #656]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c4e0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	f002 fd20 	bl	800ef28 <SUBGRF_GetFskBandwidthRegValue>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4b9f      	ldr	r3, [pc, #636]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c4f2:	4b9e      	ldr	r3, [pc, #632]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c4f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c4fa:	00db      	lsls	r3, r3, #3
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	4b9b      	ldr	r3, [pc, #620]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c500:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800c502:	4b9a      	ldr	r3, [pc, #616]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c504:	2200      	movs	r2, #0
 800c506:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800c508:	4b98      	ldr	r3, [pc, #608]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c50a:	2210      	movs	r2, #16
 800c50c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c50e:	4b97      	ldr	r3, [pc, #604]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c510:	2200      	movs	r2, #0
 800c512:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800c514:	4b95      	ldr	r3, [pc, #596]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c516:	2200      	movs	r2, #0
 800c518:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800c51a:	4b95      	ldr	r3, [pc, #596]	; (800c770 <RadioSetRxConfig+0x310>)
 800c51c:	781a      	ldrb	r2, [r3, #0]
 800c51e:	4b93      	ldr	r3, [pc, #588]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c520:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c522:	4b92      	ldr	r3, [pc, #584]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c524:	2201      	movs	r2, #1
 800c526:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800c528:	4b90      	ldr	r3, [pc, #576]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800c52e:	2004      	movs	r0, #4
 800c530:	f7ff fec8 	bl	800c2c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c534:	488f      	ldr	r0, [pc, #572]	; (800c774 <RadioSetRxConfig+0x314>)
 800c536:	f002 f96b 	bl	800e810 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c53a:	488f      	ldr	r0, [pc, #572]	; (800c778 <RadioSetRxConfig+0x318>)
 800c53c:	f002 fa34 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c540:	4a8e      	ldr	r2, [pc, #568]	; (800c77c <RadioSetRxConfig+0x31c>)
 800c542:	f107 031c 	add.w	r3, r7, #28
 800c546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c54a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c54e:	f107 031c 	add.w	r3, r7, #28
 800c552:	4618      	mov	r0, r3
 800c554:	f001 fd67 	bl	800e026 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c558:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c55c:	f001 fdb2 	bl	800e0c4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800c560:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800c564:	f000 fe0b 	bl	800d17e <RadioRead>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800c56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c572:	f023 0310 	bic.w	r3, r3, #16
 800c576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800c57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c57e:	4619      	mov	r1, r3
 800c580:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800c584:	f000 fde9 	bl	800d15a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800c588:	2104      	movs	r1, #4
 800c58a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800c58e:	f000 fde4 	bl	800d15a <RadioWrite>
            modReg= RadioRead(0x89b);
 800c592:	f640 009b 	movw	r0, #2203	; 0x89b
 800c596:	f000 fdf2 	bl	800d17e <RadioRead>
 800c59a:	4603      	mov	r3, r0
 800c59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a4:	f023 031c 	bic.w	r3, r3, #28
 800c5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800c5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b0:	f043 0308 	orr.w	r3, r3, #8
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	f640 009b 	movw	r0, #2203	; 0x89b
 800c5bc:	f000 fdcd 	bl	800d15a <RadioWrite>
            modReg= RadioRead(0x6d1);
 800c5c0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800c5c4:	f000 fddb 	bl	800d17e <RadioRead>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800c5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d2:	f023 0318 	bic.w	r3, r3, #24
 800c5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800c5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5de:	f043 0318 	orr.w	r3, r3, #24
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800c5ea:	f000 fdb6 	bl	800d15a <RadioWrite>
            modReg= RadioRead(0x6ac);
 800c5ee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800c5f2:	f000 fdc4 	bl	800d17e <RadioRead>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800c5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c60c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800c610:	b2db      	uxtb	r3, r3
 800c612:	4619      	mov	r1, r3
 800c614:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800c618:	f000 fd9f 	bl	800d15a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800c61c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c61e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c622:	fb02 f303 	mul.w	r3, r2, r3
 800c626:	461a      	mov	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62e:	4a4f      	ldr	r2, [pc, #316]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c630:	6093      	str	r3, [r2, #8]
            break;
 800c632:	e118      	b.n	800c866 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800c634:	2000      	movs	r0, #0
 800c636:	f001 febd 	bl	800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c63a:	4b4c      	ldr	r3, [pc, #304]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c642:	4a4a      	ldr	r2, [pc, #296]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800c648:	4b48      	ldr	r3, [pc, #288]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c64a:	220b      	movs	r2, #11
 800c64c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c650:	68b8      	ldr	r0, [r7, #8]
 800c652:	f002 fc69 	bl	800ef28 <SUBGRF_GetFskBandwidthRegValue>
 800c656:	4603      	mov	r3, r0
 800c658:	461a      	mov	r2, r3
 800c65a:	4b44      	ldr	r3, [pc, #272]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c65c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c660:	4b42      	ldr	r3, [pc, #264]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c662:	2200      	movs	r2, #0
 800c664:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c666:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	4b3f      	ldr	r3, [pc, #252]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c66e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800c670:	4b3e      	ldr	r3, [pc, #248]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c672:	2204      	movs	r2, #4
 800c674:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800c676:	4b3d      	ldr	r3, [pc, #244]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c678:	2218      	movs	r2, #24
 800c67a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c67c:	4b3b      	ldr	r3, [pc, #236]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c67e:	2200      	movs	r2, #0
 800c680:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800c682:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c686:	f083 0301 	eor.w	r3, r3, #1
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	461a      	mov	r2, r3
 800c68e:	4b37      	ldr	r3, [pc, #220]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c690:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800c692:	4b37      	ldr	r3, [pc, #220]	; (800c770 <RadioSetRxConfig+0x310>)
 800c694:	781a      	ldrb	r2, [r3, #0]
 800c696:	4b35      	ldr	r3, [pc, #212]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c698:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800c69a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800c6a2:	4b32      	ldr	r3, [pc, #200]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c6a4:	22f2      	movs	r2, #242	; 0xf2
 800c6a6:	75da      	strb	r2, [r3, #23]
 800c6a8:	e002      	b.n	800c6b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c6aa:	4b30      	ldr	r3, [pc, #192]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800c6b0:	4b2e      	ldr	r3, [pc, #184]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800c6b6:	f000 fc6a 	bl	800cf8e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800c6ba:	4b2c      	ldr	r3, [pc, #176]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c6bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bf14      	ite	ne
 800c6c4:	2301      	movne	r3, #1
 800c6c6:	2300      	moveq	r3, #0
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fdfa 	bl	800c2c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c6d0:	4828      	ldr	r0, [pc, #160]	; (800c774 <RadioSetRxConfig+0x314>)
 800c6d2:	f002 f89d 	bl	800e810 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c6d6:	4828      	ldr	r0, [pc, #160]	; (800c778 <RadioSetRxConfig+0x318>)
 800c6d8:	f002 f966 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c6dc:	4a28      	ldr	r2, [pc, #160]	; (800c780 <RadioSetRxConfig+0x320>)
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6e6:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6ea:	f107 0314 	add.w	r3, r7, #20
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f001 fc99 	bl	800e026 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c6f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c6f8:	f001 fce4 	bl	800e0c4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800c6fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c6fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800c702:	fb02 f303 	mul.w	r3, r2, r3
 800c706:	461a      	mov	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70e:	4a17      	ldr	r2, [pc, #92]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c710:	6093      	str	r3, [r2, #8]
            break;
 800c712:	e0a8      	b.n	800c866 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800c714:	2000      	movs	r0, #0
 800c716:	f001 fe4d 	bl	800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800c71a:	4b14      	ldr	r3, [pc, #80]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	b2da      	uxtb	r2, r3
 800c726:	4b11      	ldr	r3, [pc, #68]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800c72c:	4a15      	ldr	r2, [pc, #84]	; (800c784 <RadioSetRxConfig+0x324>)
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	4413      	add	r3, r2
 800c732:	781a      	ldrb	r2, [r3, #0]
 800c734:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800c73a:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c73c:	7bbb      	ldrb	r3, [r7, #14]
 800c73e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d105      	bne.n	800c754 <RadioSetRxConfig+0x2f4>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b0b      	cmp	r3, #11
 800c74c:	d008      	beq.n	800c760 <RadioSetRxConfig+0x300>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b0c      	cmp	r3, #12
 800c752:	d005      	beq.n	800c760 <RadioSetRxConfig+0x300>
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d116      	bne.n	800c788 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b0c      	cmp	r3, #12
 800c75e:	d113      	bne.n	800c788 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800c760:	4b02      	ldr	r3, [pc, #8]	; (800c76c <RadioSetRxConfig+0x30c>)
 800c762:	2201      	movs	r2, #1
 800c764:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c768:	e012      	b.n	800c790 <RadioSetRxConfig+0x330>
 800c76a:	bf00      	nop
 800c76c:	20002924 	.word	0x20002924
 800c770:	20000014 	.word	0x20000014
 800c774:	2000295c 	.word	0x2000295c
 800c778:	20002932 	.word	0x20002932
 800c77c:	080105ac 	.word	0x080105ac
 800c780:	080105b4 	.word	0x080105b4
 800c784:	080107c0 	.word	0x080107c0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800c788:	4b39      	ldr	r3, [pc, #228]	; (800c870 <RadioSetRxConfig+0x410>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800c790:	4b37      	ldr	r3, [pc, #220]	; (800c870 <RadioSetRxConfig+0x410>)
 800c792:	2201      	movs	r2, #1
 800c794:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c796:	4b36      	ldr	r3, [pc, #216]	; (800c870 <RadioSetRxConfig+0x410>)
 800c798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c79c:	2b05      	cmp	r3, #5
 800c79e:	d004      	beq.n	800c7aa <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800c7a0:	4b33      	ldr	r3, [pc, #204]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c7a6:	2b06      	cmp	r3, #6
 800c7a8:	d10a      	bne.n	800c7c0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800c7aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7ac:	2b0b      	cmp	r3, #11
 800c7ae:	d803      	bhi.n	800c7b8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800c7b0:	4b2f      	ldr	r3, [pc, #188]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7b2:	220c      	movs	r2, #12
 800c7b4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800c7b6:	e006      	b.n	800c7c6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c7b8:	4a2d      	ldr	r2, [pc, #180]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7bc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800c7be:	e002      	b.n	800c7c6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c7c0:	4a2b      	ldr	r2, [pc, #172]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c7c4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800c7c6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800c7ca:	4b29      	ldr	r3, [pc, #164]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7cc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800c7ce:	4b29      	ldr	r3, [pc, #164]	; (800c874 <RadioSetRxConfig+0x414>)
 800c7d0:	781a      	ldrb	r2, [r3, #0]
 800c7d2:	4b27      	ldr	r3, [pc, #156]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7d4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800c7d6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800c7da:	4b25      	ldr	r3, [pc, #148]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7dc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800c7e0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800c7e4:	4b22      	ldr	r3, [pc, #136]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800c7ea:	f000 fbd0 	bl	800cf8e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800c7ee:	4b20      	ldr	r3, [pc, #128]	; (800c870 <RadioSetRxConfig+0x410>)
 800c7f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bf14      	ite	ne
 800c7f8:	2301      	movne	r3, #1
 800c7fa:	2300      	moveq	r3, #0
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7ff fd60 	bl	800c2c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c804:	481c      	ldr	r0, [pc, #112]	; (800c878 <RadioSetRxConfig+0x418>)
 800c806:	f002 f803 	bl	800e810 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c80a:	481c      	ldr	r0, [pc, #112]	; (800c87c <RadioSetRxConfig+0x41c>)
 800c80c:	f002 f8cc 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800c810:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c812:	b2db      	uxtb	r3, r3
 800c814:	4618      	mov	r0, r3
 800c816:	f001 fddc 	bl	800e3d2 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800c81a:	4b15      	ldr	r3, [pc, #84]	; (800c870 <RadioSetRxConfig+0x410>)
 800c81c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c820:	2b01      	cmp	r3, #1
 800c822:	d10d      	bne.n	800c840 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800c824:	f240 7036 	movw	r0, #1846	; 0x736
 800c828:	f002 fa1a 	bl	800ec60 <SUBGRF_ReadRegister>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f023 0304 	bic.w	r3, r3, #4
 800c832:	b2db      	uxtb	r3, r3
 800c834:	4619      	mov	r1, r3
 800c836:	f240 7036 	movw	r0, #1846	; 0x736
 800c83a:	f002 f9fd 	bl	800ec38 <SUBGRF_WriteRegister>
 800c83e:	e00c      	b.n	800c85a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800c840:	f240 7036 	movw	r0, #1846	; 0x736
 800c844:	f002 fa0c 	bl	800ec60 <SUBGRF_ReadRegister>
 800c848:	4603      	mov	r3, r0
 800c84a:	f043 0304 	orr.w	r3, r3, #4
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4619      	mov	r1, r3
 800c852:	f240 7036 	movw	r0, #1846	; 0x736
 800c856:	f002 f9ef 	bl	800ec38 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800c85a:	4b05      	ldr	r3, [pc, #20]	; (800c870 <RadioSetRxConfig+0x410>)
 800c85c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c860:	609a      	str	r2, [r3, #8]
            break;
 800c862:	e000      	b.n	800c866 <RadioSetRxConfig+0x406>
            break;
 800c864:	bf00      	nop
    }
}
 800c866:	bf00      	nop
 800c868:	3728      	adds	r7, #40	; 0x28
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	20002924 	.word	0x20002924
 800c874:	20000014 	.word	0x20000014
 800c878:	2000295c 	.word	0x2000295c
 800c87c:	20002932 	.word	0x20002932

0800c880 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	60ba      	str	r2, [r7, #8]
 800c888:	607b      	str	r3, [r7, #4]
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]
 800c88e:	460b      	mov	r3, r1
 800c890:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800c892:	f002 fc18 	bl	800f0c6 <RFW_DeInit>
    switch( modem )
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	2b03      	cmp	r3, #3
 800c89a:	f000 80d7 	beq.w	800ca4c <RadioSetTxConfig+0x1cc>
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	f300 80e6 	bgt.w	800ca70 <RadioSetTxConfig+0x1f0>
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <RadioSetTxConfig+0x2e>
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d061      	beq.n	800c970 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800c8ac:	e0e0      	b.n	800ca70 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800c8ae:	4b7c      	ldr	r3, [pc, #496]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800c8b6:	4a7a      	ldr	r2, [pc, #488]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800c8bc:	4b78      	ldr	r3, [pc, #480]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8be:	220b      	movs	r2, #11
 800c8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f002 fb2f 	bl	800ef28 <SUBGRF_GetFskBandwidthRegValue>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4b74      	ldr	r3, [pc, #464]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800c8d4:	4a72      	ldr	r2, [pc, #456]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800c8da:	4b71      	ldr	r3, [pc, #452]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800c8e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	4b6e      	ldr	r3, [pc, #440]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8e8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800c8ea:	4b6d      	ldr	r3, [pc, #436]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800c8f0:	4b6b      	ldr	r3, [pc, #428]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8f2:	2218      	movs	r2, #24
 800c8f4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800c8f6:	4b6a      	ldr	r3, [pc, #424]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800c8fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c900:	f083 0301 	eor.w	r3, r3, #1
 800c904:	b2db      	uxtb	r3, r3
 800c906:	461a      	mov	r2, r3
 800c908:	4b65      	ldr	r3, [pc, #404]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c90a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800c90c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800c914:	4b62      	ldr	r3, [pc, #392]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c916:	22f2      	movs	r2, #242	; 0xf2
 800c918:	75da      	strb	r2, [r3, #23]
 800c91a:	e002      	b.n	800c922 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800c91c:	4b60      	ldr	r3, [pc, #384]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c91e:	2201      	movs	r2, #1
 800c920:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800c922:	4b5f      	ldr	r3, [pc, #380]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c924:	2201      	movs	r2, #1
 800c926:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800c928:	f000 fb31 	bl	800cf8e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800c92c:	4b5c      	ldr	r3, [pc, #368]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c92e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c932:	2b00      	cmp	r3, #0
 800c934:	bf14      	ite	ne
 800c936:	2301      	movne	r3, #1
 800c938:	2300      	moveq	r3, #0
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7ff fcc1 	bl	800c2c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800c942:	4858      	ldr	r0, [pc, #352]	; (800caa4 <RadioSetTxConfig+0x224>)
 800c944:	f001 ff64 	bl	800e810 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800c948:	4857      	ldr	r0, [pc, #348]	; (800caa8 <RadioSetTxConfig+0x228>)
 800c94a:	f002 f82d 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800c94e:	4a57      	ldr	r2, [pc, #348]	; (800caac <RadioSetTxConfig+0x22c>)
 800c950:	f107 0310 	add.w	r3, r7, #16
 800c954:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c958:	e883 0003 	stmia.w	r3, {r0, r1}
 800c95c:	f107 0310 	add.w	r3, r7, #16
 800c960:	4618      	mov	r0, r3
 800c962:	f001 fb60 	bl	800e026 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800c966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c96a:	f001 fbab 	bl	800e0c4 <SUBGRF_SetWhiteningSeed>
            break;
 800c96e:	e080      	b.n	800ca72 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800c970:	4b4b      	ldr	r3, [pc, #300]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	4b48      	ldr	r3, [pc, #288]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800c982:	4a4b      	ldr	r2, [pc, #300]	; (800cab0 <RadioSetTxConfig+0x230>)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4413      	add	r3, r2
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	4b45      	ldr	r3, [pc, #276]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c98c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800c990:	4a43      	ldr	r2, [pc, #268]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c996:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d105      	bne.n	800c9ac <RadioSetTxConfig+0x12c>
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	2b0b      	cmp	r3, #11
 800c9a4:	d008      	beq.n	800c9b8 <RadioSetTxConfig+0x138>
 800c9a6:	6a3b      	ldr	r3, [r7, #32]
 800c9a8:	2b0c      	cmp	r3, #12
 800c9aa:	d005      	beq.n	800c9b8 <RadioSetTxConfig+0x138>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d107      	bne.n	800c9c2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c9b2:	6a3b      	ldr	r3, [r7, #32]
 800c9b4:	2b0c      	cmp	r3, #12
 800c9b6:	d104      	bne.n	800c9c2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800c9b8:	4b39      	ldr	r3, [pc, #228]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800c9c0:	e003      	b.n	800c9ca <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800c9c2:	4b37      	ldr	r3, [pc, #220]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800c9ca:	4b35      	ldr	r3, [pc, #212]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c9d0:	4b33      	ldr	r3, [pc, #204]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d004      	beq.n	800c9e4 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800c9da:	4b31      	ldr	r3, [pc, #196]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800c9e0:	2b06      	cmp	r3, #6
 800c9e2:	d10a      	bne.n	800c9fa <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800c9e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9e6:	2b0b      	cmp	r3, #11
 800c9e8:	d803      	bhi.n	800c9f2 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800c9ea:	4b2d      	ldr	r3, [pc, #180]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9ec:	220c      	movs	r2, #12
 800c9ee:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800c9f0:	e006      	b.n	800ca00 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c9f2:	4a2b      	ldr	r2, [pc, #172]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9f6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800c9f8:	e002      	b.n	800ca00 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800c9fa:	4a29      	ldr	r2, [pc, #164]	; (800caa0 <RadioSetTxConfig+0x220>)
 800c9fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9fe:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800ca00:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ca04:	4b26      	ldr	r3, [pc, #152]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca06:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ca08:	4b2a      	ldr	r3, [pc, #168]	; (800cab4 <RadioSetTxConfig+0x234>)
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	4b24      	ldr	r3, [pc, #144]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca0e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ca10:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800ca14:	4b22      	ldr	r3, [pc, #136]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca16:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ca1a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800ca1e:	4b20      	ldr	r3, [pc, #128]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800ca24:	f000 fab3 	bl	800cf8e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800ca28:	4b1d      	ldr	r3, [pc, #116]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bf14      	ite	ne
 800ca32:	2301      	movne	r3, #1
 800ca34:	2300      	moveq	r3, #0
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff fc43 	bl	800c2c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ca3e:	4819      	ldr	r0, [pc, #100]	; (800caa4 <RadioSetTxConfig+0x224>)
 800ca40:	f001 fee6 	bl	800e810 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ca44:	4818      	ldr	r0, [pc, #96]	; (800caa8 <RadioSetTxConfig+0x228>)
 800ca46:	f001 ffaf 	bl	800e9a8 <SUBGRF_SetPacketParams>
            break;
 800ca4a:	e012      	b.n	800ca72 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800ca4c:	2003      	movs	r0, #3
 800ca4e:	f7ff fc39 	bl	800c2c4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800ca52:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800ca5a:	4a11      	ldr	r2, [pc, #68]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800ca60:	4b0f      	ldr	r3, [pc, #60]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca62:	2216      	movs	r2, #22
 800ca64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800ca68:	480e      	ldr	r0, [pc, #56]	; (800caa4 <RadioSetTxConfig+0x224>)
 800ca6a:	f001 fed1 	bl	800e810 <SUBGRF_SetModulationParams>
            break;
 800ca6e:	e000      	b.n	800ca72 <RadioSetTxConfig+0x1f2>
            break;
 800ca70:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800ca72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f002 f9fa 	bl	800ee70 <SUBGRF_SetRfTxPower>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	461a      	mov	r2, r3
 800ca80:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca82:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800ca86:	4b06      	ldr	r3, [pc, #24]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f002 fb2e 	bl	800f0ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800ca92:	4a03      	ldr	r2, [pc, #12]	; (800caa0 <RadioSetTxConfig+0x220>)
 800ca94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca96:	6053      	str	r3, [r2, #4]
}
 800ca98:	bf00      	nop
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	20002924 	.word	0x20002924
 800caa4:	2000295c 	.word	0x2000295c
 800caa8:	20002932 	.word	0x20002932
 800caac:	080105b4 	.word	0x080105b4
 800cab0:	080107c0 	.word	0x080107c0
 800cab4:	20000014 	.word	0x20000014

0800cab8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    return true;
 800cac0:	2301      	movs	r3, #1
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bc80      	pop	{r7}
 800caca:	4770      	bx	lr

0800cacc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800cada:	79fb      	ldrb	r3, [r7, #7]
 800cadc:	2b0a      	cmp	r3, #10
 800cade:	d83e      	bhi.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
 800cae0:	a201      	add	r2, pc, #4	; (adr r2, 800cae8 <RadioGetLoRaBandwidthInHz+0x1c>)
 800cae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae6:	bf00      	nop
 800cae8:	0800cb15 	.word	0x0800cb15
 800caec:	0800cb25 	.word	0x0800cb25
 800caf0:	0800cb35 	.word	0x0800cb35
 800caf4:	0800cb45 	.word	0x0800cb45
 800caf8:	0800cb4d 	.word	0x0800cb4d
 800cafc:	0800cb53 	.word	0x0800cb53
 800cb00:	0800cb59 	.word	0x0800cb59
 800cb04:	0800cb5f 	.word	0x0800cb5f
 800cb08:	0800cb1d 	.word	0x0800cb1d
 800cb0c:	0800cb2d 	.word	0x0800cb2d
 800cb10:	0800cb3d 	.word	0x0800cb3d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800cb14:	f641 6384 	movw	r3, #7812	; 0x1e84
 800cb18:	60fb      	str	r3, [r7, #12]
        break;
 800cb1a:	e020      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800cb1c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800cb20:	60fb      	str	r3, [r7, #12]
        break;
 800cb22:	e01c      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800cb24:	f643 5309 	movw	r3, #15625	; 0x3d09
 800cb28:	60fb      	str	r3, [r7, #12]
        break;
 800cb2a:	e018      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800cb2c:	f245 1361 	movw	r3, #20833	; 0x5161
 800cb30:	60fb      	str	r3, [r7, #12]
        break;
 800cb32:	e014      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800cb34:	f647 2312 	movw	r3, #31250	; 0x7a12
 800cb38:	60fb      	str	r3, [r7, #12]
        break;
 800cb3a:	e010      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800cb3c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800cb40:	60fb      	str	r3, [r7, #12]
        break;
 800cb42:	e00c      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800cb44:	f24f 4324 	movw	r3, #62500	; 0xf424
 800cb48:	60fb      	str	r3, [r7, #12]
        break;
 800cb4a:	e008      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800cb4c:	4b07      	ldr	r3, [pc, #28]	; (800cb6c <RadioGetLoRaBandwidthInHz+0xa0>)
 800cb4e:	60fb      	str	r3, [r7, #12]
        break;
 800cb50:	e005      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800cb52:	4b07      	ldr	r3, [pc, #28]	; (800cb70 <RadioGetLoRaBandwidthInHz+0xa4>)
 800cb54:	60fb      	str	r3, [r7, #12]
        break;
 800cb56:	e002      	b.n	800cb5e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800cb58:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <RadioGetLoRaBandwidthInHz+0xa8>)
 800cb5a:	60fb      	str	r3, [r7, #12]
        break;
 800cb5c:	bf00      	nop
    }

    return bandwidthInHz;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bc80      	pop	{r7}
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	0001e848 	.word	0x0001e848
 800cb70:	0003d090 	.word	0x0003d090
 800cb74:	0007a120 	.word	0x0007a120

0800cb78 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	4608      	mov	r0, r1
 800cb82:	4611      	mov	r1, r2
 800cb84:	461a      	mov	r2, r3
 800cb86:	4603      	mov	r3, r0
 800cb88:	70fb      	strb	r3, [r7, #3]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	803b      	strh	r3, [r7, #0]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800cb92:	883b      	ldrh	r3, [r7, #0]
 800cb94:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800cb96:	78ba      	ldrb	r2, [r7, #2]
 800cb98:	f082 0201 	eor.w	r2, r2, #1
 800cb9c:	b2d2      	uxtb	r2, r2
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	d001      	beq.n	800cba6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800cba2:	2208      	movs	r2, #8
 800cba4:	e000      	b.n	800cba8 <RadioGetGfskTimeOnAirNumerator+0x30>
 800cba6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800cba8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800cbaa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800cbae:	7c3b      	ldrb	r3, [r7, #16]
 800cbb0:	7d39      	ldrb	r1, [r7, #20]
 800cbb2:	2900      	cmp	r1, #0
 800cbb4:	d001      	beq.n	800cbba <RadioGetGfskTimeOnAirNumerator+0x42>
 800cbb6:	2102      	movs	r1, #2
 800cbb8:	e000      	b.n	800cbbc <RadioGetGfskTimeOnAirNumerator+0x44>
 800cbba:	2100      	movs	r1, #0
 800cbbc:	440b      	add	r3, r1
 800cbbe:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800cbc0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr

0800cbcc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b08b      	sub	sp, #44	; 0x2c
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4611      	mov	r1, r2
 800cbd8:	461a      	mov	r2, r3
 800cbda:	460b      	mov	r3, r1
 800cbdc:	71fb      	strb	r3, [r7, #7]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b05      	cmp	r3, #5
 800cbf2:	d002      	beq.n	800cbfa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b06      	cmp	r3, #6
 800cbf8:	d104      	bne.n	800cc04 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800cbfa:	88bb      	ldrh	r3, [r7, #4]
 800cbfc:	2b0b      	cmp	r3, #11
 800cbfe:	d801      	bhi.n	800cc04 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800cc00:	230c      	movs	r3, #12
 800cc02:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d105      	bne.n	800cc16 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	2b0b      	cmp	r3, #11
 800cc0e:	d008      	beq.n	800cc22 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b0c      	cmp	r3, #12
 800cc14:	d005      	beq.n	800cc22 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d105      	bne.n	800cc28 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	2b0c      	cmp	r3, #12
 800cc20:	d102      	bne.n	800cc28 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800cc22:	2301      	movs	r3, #1
 800cc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800cc28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800cc2c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800cc2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc32:	2a00      	cmp	r2, #0
 800cc34:	d001      	beq.n	800cc3a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800cc36:	2210      	movs	r2, #16
 800cc38:	e000      	b.n	800cc3c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800cc3a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800cc3c:	4413      	add	r3, r2
 800cc3e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800cc44:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800cc46:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	d001      	beq.n	800cc52 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	e000      	b.n	800cc54 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800cc52:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800cc54:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800cc56:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b06      	cmp	r3, #6
 800cc5c:	d803      	bhi.n	800cc66 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	623b      	str	r3, [r7, #32]
 800cc64:	e00e      	b.n	800cc84 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800cc66:	69fb      	ldr	r3, [r7, #28]
 800cc68:	3308      	adds	r3, #8
 800cc6a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	3b02      	subs	r3, #2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	623b      	str	r3, [r7, #32]
 800cc7c:	e002      	b.n	800cc84 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	da01      	bge.n	800cc8e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800cc8e:	69fa      	ldr	r2, [r7, #28]
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	4413      	add	r3, r2
 800cc94:	1e5a      	subs	r2, r3, #1
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	fb92 f3f3 	sdiv	r3, r2, r3
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	fb02 f203 	mul.w	r2, r2, r3
 800cca2:	88bb      	ldrh	r3, [r7, #4]
 800cca4:	4413      	add	r3, r2
    int32_t intermediate =
 800cca6:	330c      	adds	r3, #12
 800cca8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b06      	cmp	r3, #6
 800ccae:	d802      	bhi.n	800ccb6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	3302      	adds	r3, #2
 800ccb4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	1c5a      	adds	r2, r3, #1
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	3b02      	subs	r3, #2
 800ccc0:	fa02 f303 	lsl.w	r3, r2, r3
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	372c      	adds	r7, #44	; 0x2c
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bc80      	pop	{r7}
 800cccc:	4770      	bx	lr
	...

0800ccd0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af04      	add	r7, sp, #16
 800ccd6:	60b9      	str	r1, [r7, #8]
 800ccd8:	607a      	str	r2, [r7, #4]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73fb      	strb	r3, [r7, #15]
 800cce0:	4613      	mov	r3, r2
 800cce2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800cce8:	2301      	movs	r3, #1
 800ccea:	613b      	str	r3, [r7, #16]

    switch( modem )
 800ccec:	7bfb      	ldrb	r3, [r7, #15]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d002      	beq.n	800ccf8 <RadioTimeOnAir+0x28>
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d017      	beq.n	800cd26 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800ccf6:	e035      	b.n	800cd64 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800ccf8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800ccfc:	8c3a      	ldrh	r2, [r7, #32]
 800ccfe:	7bb9      	ldrb	r1, [r7, #14]
 800cd00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff ff32 	bl	800cb78 <RadioGetGfskTimeOnAirNumerator>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd1a:	fb02 f303 	mul.w	r3, r2, r3
 800cd1e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	613b      	str	r3, [r7, #16]
        break;
 800cd24:	e01e      	b.n	800cd64 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800cd26:	8c39      	ldrh	r1, [r7, #32]
 800cd28:	7bba      	ldrb	r2, [r7, #14]
 800cd2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd2e:	9302      	str	r3, [sp, #8]
 800cd30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd3a:	9300      	str	r3, [sp, #0]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	6879      	ldr	r1, [r7, #4]
 800cd40:	68b8      	ldr	r0, [r7, #8]
 800cd42:	f7ff ff43 	bl	800cbcc <RadioGetLoRaTimeOnAirNumerator>
 800cd46:	4603      	mov	r3, r0
 800cd48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd4c:	fb02 f303 	mul.w	r3, r2, r3
 800cd50:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800cd52:	4a0a      	ldr	r2, [pc, #40]	; (800cd7c <RadioTimeOnAir+0xac>)
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	4413      	add	r3, r2
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff feb6 	bl	800cacc <RadioGetLoRaBandwidthInHz>
 800cd60:	6138      	str	r0, [r7, #16]
        break;
 800cd62:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	4413      	add	r3, r2
 800cd6a:	1e5a      	subs	r2, r3, #1
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	080107c0 	.word	0x080107c0

0800cd80 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f240 2101 	movw	r1, #513	; 0x201
 800cd94:	f240 2001 	movw	r0, #513	; 0x201
 800cd98:	f001 fc10 	bl	800e5bc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800cd9c:	4b6e      	ldr	r3, [pc, #440]	; (800cf58 <RadioSend+0x1d8>)
 800cd9e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cda2:	2101      	movs	r1, #1
 800cda4:	4618      	mov	r0, r3
 800cda6:	f002 f83b 	bl	800ee20 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800cdaa:	4b6b      	ldr	r3, [pc, #428]	; (800cf58 <RadioSend+0x1d8>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d112      	bne.n	800cdd8 <RadioSend+0x58>
 800cdb2:	4b69      	ldr	r3, [pc, #420]	; (800cf58 <RadioSend+0x1d8>)
 800cdb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdb8:	2b06      	cmp	r3, #6
 800cdba:	d10d      	bne.n	800cdd8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800cdbc:	f640 0089 	movw	r0, #2185	; 0x889
 800cdc0:	f001 ff4e 	bl	800ec60 <SUBGRF_ReadRegister>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f023 0304 	bic.w	r3, r3, #4
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	4619      	mov	r1, r3
 800cdce:	f640 0089 	movw	r0, #2185	; 0x889
 800cdd2:	f001 ff31 	bl	800ec38 <SUBGRF_WriteRegister>
 800cdd6:	e00c      	b.n	800cdf2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800cdd8:	f640 0089 	movw	r0, #2185	; 0x889
 800cddc:	f001 ff40 	bl	800ec60 <SUBGRF_ReadRegister>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f043 0304 	orr.w	r3, r3, #4
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4619      	mov	r1, r3
 800cdea:	f640 0089 	movw	r0, #2185	; 0x889
 800cdee:	f001 ff23 	bl	800ec38 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800cdf2:	4b59      	ldr	r3, [pc, #356]	; (800cf58 <RadioSend+0x1d8>)
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f200 809f 	bhi.w	800cf3a <RadioSend+0x1ba>
 800cdfc:	a201      	add	r2, pc, #4	; (adr r2, 800ce04 <RadioSend+0x84>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce2f 	.word	0x0800ce2f
 800ce08:	0800ce15 	.word	0x0800ce15
 800ce0c:	0800ce83 	.word	0x0800ce83
 800ce10:	0800cea3 	.word	0x0800cea3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ce14:	4a50      	ldr	r2, [pc, #320]	; (800cf58 <RadioSend+0x1d8>)
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ce1a:	4850      	ldr	r0, [pc, #320]	; (800cf5c <RadioSend+0x1dc>)
 800ce1c:	f001 fdc4 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	2200      	movs	r2, #0
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f001 f8ea 	bl	800e000 <SUBGRF_SendPayload>
            break;
 800ce2c:	e086      	b.n	800cf3c <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800ce2e:	f002 f950 	bl	800f0d2 <RFW_Is_Init>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d117      	bne.n	800ce68 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ce38:	f107 020d 	add.w	r2, r7, #13
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f002 f95e 	bl	800f102 <RFW_TransmitInit>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f040 8081 	bne.w	800cf50 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ce4e:	7b7a      	ldrb	r2, [r7, #13]
 800ce50:	4b41      	ldr	r3, [pc, #260]	; (800cf58 <RadioSend+0x1d8>)
 800ce52:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ce54:	4841      	ldr	r0, [pc, #260]	; (800cf5c <RadioSend+0x1dc>)
 800ce56:	f001 fda7 	bl	800e9a8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ce5a:	7b7b      	ldrb	r3, [r7, #13]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 f8cd 	bl	800e000 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800ce66:	e069      	b.n	800cf3c <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ce68:	4a3b      	ldr	r2, [pc, #236]	; (800cf58 <RadioSend+0x1d8>)
 800ce6a:	78fb      	ldrb	r3, [r7, #3]
 800ce6c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ce6e:	483b      	ldr	r0, [pc, #236]	; (800cf5c <RadioSend+0x1dc>)
 800ce70:	f001 fd9a 	bl	800e9a8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800ce74:	78fb      	ldrb	r3, [r7, #3]
 800ce76:	2200      	movs	r2, #0
 800ce78:	4619      	mov	r1, r3
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f001 f8c0 	bl	800e000 <SUBGRF_SendPayload>
            break;
 800ce80:	e05c      	b.n	800cf3c <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ce82:	4b35      	ldr	r3, [pc, #212]	; (800cf58 <RadioSend+0x1d8>)
 800ce84:	2202      	movs	r2, #2
 800ce86:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ce88:	4a33      	ldr	r2, [pc, #204]	; (800cf58 <RadioSend+0x1d8>)
 800ce8a:	78fb      	ldrb	r3, [r7, #3]
 800ce8c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ce8e:	4833      	ldr	r0, [pc, #204]	; (800cf5c <RadioSend+0x1dc>)
 800ce90:	f001 fd8a 	bl	800e9a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	2200      	movs	r2, #0
 800ce98:	4619      	mov	r1, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 f8b0 	bl	800e000 <SUBGRF_SendPayload>
            break;
 800cea0:	e04c      	b.n	800cf3c <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800cea2:	78fb      	ldrb	r3, [r7, #3]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	482d      	ldr	r0, [pc, #180]	; (800cf60 <RadioSend+0x1e0>)
 800ceaa:	f000 fc30 	bl	800d70e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ceae:	4b2a      	ldr	r3, [pc, #168]	; (800cf58 <RadioSend+0x1d8>)
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4b27      	ldr	r3, [pc, #156]	; (800cf58 <RadioSend+0x1d8>)
 800cebc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cebe:	4827      	ldr	r0, [pc, #156]	; (800cf5c <RadioSend+0x1dc>)
 800cec0:	f001 fd72 	bl	800e9a8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800cec4:	2100      	movs	r1, #0
 800cec6:	20f1      	movs	r0, #241	; 0xf1
 800cec8:	f000 f947 	bl	800d15a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800cecc:	2100      	movs	r1, #0
 800cece:	20f0      	movs	r0, #240	; 0xf0
 800ced0:	f000 f943 	bl	800d15a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800ced4:	4b20      	ldr	r3, [pc, #128]	; (800cf58 <RadioSend+0x1d8>)
 800ced6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ced8:	2b64      	cmp	r3, #100	; 0x64
 800ceda:	d108      	bne.n	800ceee <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800cedc:	2170      	movs	r1, #112	; 0x70
 800cede:	20f3      	movs	r0, #243	; 0xf3
 800cee0:	f000 f93b 	bl	800d15a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800cee4:	211d      	movs	r1, #29
 800cee6:	20f2      	movs	r0, #242	; 0xf2
 800cee8:	f000 f937 	bl	800d15a <RadioWrite>
 800ceec:	e007      	b.n	800cefe <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800ceee:	21e1      	movs	r1, #225	; 0xe1
 800cef0:	20f3      	movs	r0, #243	; 0xf3
 800cef2:	f000 f932 	bl	800d15a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800cef6:	2104      	movs	r1, #4
 800cef8:	20f2      	movs	r0, #242	; 0xf2
 800cefa:	f000 f92e 	bl	800d15a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	00db      	lsls	r3, r3, #3
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3302      	adds	r3, #2
 800cf08:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800cf0a:	89fb      	ldrh	r3, [r7, #14]
 800cf0c:	0a1b      	lsrs	r3, r3, #8
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	4619      	mov	r1, r3
 800cf14:	20f4      	movs	r0, #244	; 0xf4
 800cf16:	f000 f920 	bl	800d15a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	4619      	mov	r1, r3
 800cf20:	20f5      	movs	r0, #245	; 0xf5
 800cf22:	f000 f91a 	bl	800d15a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800cf26:	78fb      	ldrb	r3, [r7, #3]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800cf30:	4619      	mov	r1, r3
 800cf32:	480b      	ldr	r0, [pc, #44]	; (800cf60 <RadioSend+0x1e0>)
 800cf34:	f001 f864 	bl	800e000 <SUBGRF_SendPayload>
            break;
 800cf38:	e000      	b.n	800cf3c <RadioSend+0x1bc>
        }
        default:
            break;
 800cf3a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800cf3c:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <RadioSend+0x1d8>)
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	4619      	mov	r1, r3
 800cf42:	4808      	ldr	r0, [pc, #32]	; (800cf64 <RadioSend+0x1e4>)
 800cf44:	f002 fcac 	bl	800f8a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800cf48:	4806      	ldr	r0, [pc, #24]	; (800cf64 <RadioSend+0x1e4>)
 800cf4a:	f002 fbcb 	bl	800f6e4 <UTIL_TIMER_Start>
 800cf4e:	e000      	b.n	800cf52 <RadioSend+0x1d2>
                return;
 800cf50:	bf00      	nop
}
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	20002924 	.word	0x20002924
 800cf5c:	20002932 	.word	0x20002932
 800cf60:	20001d9c 	.word	0x20001d9c
 800cf64:	2000297c 	.word	0x2000297c

0800cf68 <RadioSleep>:

static void RadioSleep( void )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800cf6e:	2300      	movs	r3, #0
 800cf70:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800cf72:	793b      	ldrb	r3, [r7, #4]
 800cf74:	f043 0304 	orr.w	r3, r3, #4
 800cf78:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800cf7a:	7938      	ldrb	r0, [r7, #4]
 800cf7c:	f001 f91c 	bl	800e1b8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800cf80:	2002      	movs	r0, #2
 800cf82:	f7f5 fb1f 	bl	80025c4 <HAL_Delay>
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <RadioStandby>:

static void RadioStandby( void )
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800cf92:	2000      	movs	r0, #0
 800cf94:	f001 f942 	bl	800e21c <SUBGRF_SetStandby>
}
 800cf98:	bf00      	nop
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800cfa4:	f002 f895 	bl	800f0d2 <RFW_Is_Init>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d102      	bne.n	800cfb4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800cfae:	f002 f8b8 	bl	800f122 <RFW_ReceiveInit>
 800cfb2:	e007      	b.n	800cfc4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f240 2162 	movw	r1, #610	; 0x262
 800cfbc:	f240 2062 	movw	r0, #610	; 0x262
 800cfc0:	f001 fafc 	bl	800e5bc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d006      	beq.n	800cfd8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800cfca:	6879      	ldr	r1, [r7, #4]
 800cfcc:	480f      	ldr	r0, [pc, #60]	; (800d00c <RadioRx+0x70>)
 800cfce:	f002 fc67 	bl	800f8a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800cfd2:	480e      	ldr	r0, [pc, #56]	; (800d00c <RadioRx+0x70>)
 800cfd4:	f002 fb86 	bl	800f6e4 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800cfd8:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <RadioRx+0x74>)
 800cfda:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f001 ff1d 	bl	800ee20 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800cfe6:	4b0a      	ldr	r3, [pc, #40]	; (800d010 <RadioRx+0x74>)
 800cfe8:	785b      	ldrb	r3, [r3, #1]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800cfee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800cff2:	f001 f94f 	bl	800e294 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800cff6:	e005      	b.n	800d004 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800cff8:	4b05      	ldr	r3, [pc, #20]	; (800d010 <RadioRx+0x74>)
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	019b      	lsls	r3, r3, #6
 800cffe:	4618      	mov	r0, r3
 800d000:	f001 f948 	bl	800e294 <SUBGRF_SetRx>
}
 800d004:	bf00      	nop
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	20002994 	.word	0x20002994
 800d010:	20002924 	.word	0x20002924

0800d014 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800d01c:	f002 f859 	bl	800f0d2 <RFW_Is_Init>
 800d020:	4603      	mov	r3, r0
 800d022:	2b01      	cmp	r3, #1
 800d024:	d102      	bne.n	800d02c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800d026:	f002 f87c 	bl	800f122 <RFW_ReceiveInit>
 800d02a:	e007      	b.n	800d03c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d02c:	2300      	movs	r3, #0
 800d02e:	2200      	movs	r2, #0
 800d030:	f240 2162 	movw	r1, #610	; 0x262
 800d034:	f240 2062 	movw	r0, #610	; 0x262
 800d038:	f001 fac0 	bl	800e5bc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d006      	beq.n	800d050 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d042:	6879      	ldr	r1, [r7, #4]
 800d044:	480f      	ldr	r0, [pc, #60]	; (800d084 <RadioRxBoosted+0x70>)
 800d046:	f002 fc2b 	bl	800f8a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d04a:	480e      	ldr	r0, [pc, #56]	; (800d084 <RadioRxBoosted+0x70>)
 800d04c:	f002 fb4a 	bl	800f6e4 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d050:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <RadioRxBoosted+0x74>)
 800d052:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d056:	2100      	movs	r1, #0
 800d058:	4618      	mov	r0, r3
 800d05a:	f001 fee1 	bl	800ee20 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <RadioRxBoosted+0x74>)
 800d060:	785b      	ldrb	r3, [r3, #1]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d004      	beq.n	800d070 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d066:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d06a:	f001 f933 	bl	800e2d4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800d06e:	e005      	b.n	800d07c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <RadioRxBoosted+0x74>)
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	019b      	lsls	r3, r3, #6
 800d076:	4618      	mov	r0, r3
 800d078:	f001 f92c 	bl	800e2d4 <SUBGRF_SetRxBoosted>
}
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20002994 	.word	0x20002994
 800d088:	20002924 	.word	0x20002924

0800d08c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d096:	4b07      	ldr	r3, [pc, #28]	; (800d0b4 <RadioSetRxDutyCycle+0x28>)
 800d098:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d09c:	2100      	movs	r1, #0
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f001 febe 	bl	800ee20 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 f938 	bl	800e31c <SUBGRF_SetRxDutyCycle>
}
 800d0ac:	bf00      	nop
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20002924 	.word	0x20002924

0800d0b8 <RadioStartCad>:

static void RadioStartCad( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d0bc:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <RadioStartCad+0x2c>)
 800d0be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f001 feab 	bl	800ee20 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d0d2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800d0d6:	f001 fa71 	bl	800e5bc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800d0da:	f001 f94b 	bl	800e374 <SUBGRF_SetCad>
}
 800d0de:	bf00      	nop
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20002924 	.word	0x20002924

0800d0e8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b084      	sub	sp, #16
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800d0f8:	883b      	ldrh	r3, [r7, #0]
 800d0fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d0fe:	fb02 f303 	mul.w	r3, r2, r3
 800d102:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f001 fab5 	bl	800e674 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800d10a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d10e:	4618      	mov	r0, r3
 800d110:	f001 feae 	bl	800ee70 <SUBGRF_SetRfTxPower>
 800d114:	4603      	mov	r3, r0
 800d116:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800d118:	7afb      	ldrb	r3, [r7, #11]
 800d11a:	2101      	movs	r1, #1
 800d11c:	4618      	mov	r0, r3
 800d11e:	f001 fe7f 	bl	800ee20 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800d122:	f001 f935 	bl	800e390 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800d126:	68f9      	ldr	r1, [r7, #12]
 800d128:	4804      	ldr	r0, [pc, #16]	; (800d13c <RadioSetTxContinuousWave+0x54>)
 800d12a:	f002 fbb9 	bl	800f8a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d12e:	4803      	ldr	r0, [pc, #12]	; (800d13c <RadioSetTxContinuousWave+0x54>)
 800d130:	f002 fad8 	bl	800f6e4 <UTIL_TIMER_Start>
}
 800d134:	bf00      	nop
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	2000297c 	.word	0x2000297c

0800d140 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800d14a:	f001 fce2 	bl	800eb12 <SUBGRF_GetRssiInst>
 800d14e:	4603      	mov	r3, r0
 800d150:	b21b      	sxth	r3, r3
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	4603      	mov	r3, r0
 800d162:	460a      	mov	r2, r1
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	4613      	mov	r3, r2
 800d168:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800d16a:	797a      	ldrb	r2, [r7, #5]
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	4611      	mov	r1, r2
 800d170:	4618      	mov	r0, r3
 800d172:	f001 fd61 	bl	800ec38 <SUBGRF_WriteRegister>
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	af00      	add	r7, sp, #0
 800d184:	4603      	mov	r3, r0
 800d186:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800d188:	88fb      	ldrh	r3, [r7, #6]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f001 fd68 	bl	800ec60 <SUBGRF_ReadRegister>
 800d190:	4603      	mov	r3, r0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	6039      	str	r1, [r7, #0]
 800d1a4:	80fb      	strh	r3, [r7, #6]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800d1aa:	797b      	ldrb	r3, [r7, #5]
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	88fb      	ldrh	r3, [r7, #6]
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f001 fd68 	bl	800ec88 <SUBGRF_WriteRegisters>
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	6039      	str	r1, [r7, #0]
 800d1ca:	80fb      	strh	r3, [r7, #6]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800d1d0:	797b      	ldrb	r3, [r7, #5]
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	88fb      	ldrh	r3, [r7, #6]
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f001 fd77 	bl	800eccc <SUBGRF_ReadRegisters>
}
 800d1de:	bf00      	nop
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
	...

0800d1e8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	460a      	mov	r2, r1
 800d1f2:	71fb      	strb	r3, [r7, #7]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d10a      	bne.n	800d214 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d1fe:	4a0e      	ldr	r2, [pc, #56]	; (800d238 <RadioSetMaxPayloadLength+0x50>)
 800d200:	79bb      	ldrb	r3, [r7, #6]
 800d202:	7013      	strb	r3, [r2, #0]
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <RadioSetMaxPayloadLength+0x50>)
 800d206:	781a      	ldrb	r2, [r3, #0]
 800d208:	4b0c      	ldr	r3, [pc, #48]	; (800d23c <RadioSetMaxPayloadLength+0x54>)
 800d20a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d20c:	480c      	ldr	r0, [pc, #48]	; (800d240 <RadioSetMaxPayloadLength+0x58>)
 800d20e:	f001 fbcb 	bl	800e9a8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800d212:	e00d      	b.n	800d230 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800d214:	4b09      	ldr	r3, [pc, #36]	; (800d23c <RadioSetMaxPayloadLength+0x54>)
 800d216:	7d5b      	ldrb	r3, [r3, #21]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d109      	bne.n	800d230 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800d21c:	4a06      	ldr	r2, [pc, #24]	; (800d238 <RadioSetMaxPayloadLength+0x50>)
 800d21e:	79bb      	ldrb	r3, [r7, #6]
 800d220:	7013      	strb	r3, [r2, #0]
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <RadioSetMaxPayloadLength+0x50>)
 800d224:	781a      	ldrb	r2, [r3, #0]
 800d226:	4b05      	ldr	r3, [pc, #20]	; (800d23c <RadioSetMaxPayloadLength+0x54>)
 800d228:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d22a:	4805      	ldr	r0, [pc, #20]	; (800d240 <RadioSetMaxPayloadLength+0x58>)
 800d22c:	f001 fbbc 	bl	800e9a8 <SUBGRF_SetPacketParams>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20000014 	.word	0x20000014
 800d23c:	20002924 	.word	0x20002924
 800d240:	20002932 	.word	0x20002932

0800d244 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800d24e:	4a13      	ldr	r2, [pc, #76]	; (800d29c <RadioSetPublicNetwork+0x58>)
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	7313      	strb	r3, [r2, #12]
 800d254:	4b11      	ldr	r3, [pc, #68]	; (800d29c <RadioSetPublicNetwork+0x58>)
 800d256:	7b1a      	ldrb	r2, [r3, #12]
 800d258:	4b10      	ldr	r3, [pc, #64]	; (800d29c <RadioSetPublicNetwork+0x58>)
 800d25a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800d25c:	2001      	movs	r0, #1
 800d25e:	f7ff f831 	bl	800c2c4 <RadioSetModem>
    if( enable == true )
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00a      	beq.n	800d27e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d268:	2134      	movs	r1, #52	; 0x34
 800d26a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d26e:	f001 fce3 	bl	800ec38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800d272:	2144      	movs	r1, #68	; 0x44
 800d274:	f240 7041 	movw	r0, #1857	; 0x741
 800d278:	f001 fcde 	bl	800ec38 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800d27c:	e009      	b.n	800d292 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800d27e:	2114      	movs	r1, #20
 800d280:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d284:	f001 fcd8 	bl	800ec38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d288:	2124      	movs	r1, #36	; 0x24
 800d28a:	f240 7041 	movw	r0, #1857	; 0x741
 800d28e:	f001 fcd3 	bl	800ec38 <SUBGRF_WriteRegister>
}
 800d292:	bf00      	nop
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20002924 	.word	0x20002924

0800d2a0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800d2a4:	f001 fe18 	bl	800eed8 <SUBGRF_GetRadioWakeUpTime>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	3303      	adds	r3, #3
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800d2b8:	f000 f80e 	bl	800d2d8 <RadioOnTxTimeoutProcess>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800d2cc:	f000 f818 	bl	800d300 <RadioOnRxTimeoutProcess>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d2dc:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <RadioOnTxTimeoutProcess+0x24>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d008      	beq.n	800d2f6 <RadioOnTxTimeoutProcess+0x1e>
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <RadioOnTxTimeoutProcess+0x24>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800d2ee:	4b03      	ldr	r3, [pc, #12]	; (800d2fc <RadioOnTxTimeoutProcess+0x24>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	4798      	blx	r3
    }
}
 800d2f6:	bf00      	nop
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20001e9c 	.word	0x20001e9c

0800d300 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d304:	4b07      	ldr	r3, [pc, #28]	; (800d324 <RadioOnRxTimeoutProcess+0x24>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d008      	beq.n	800d31e <RadioOnRxTimeoutProcess+0x1e>
 800d30c:	4b05      	ldr	r3, [pc, #20]	; (800d324 <RadioOnRxTimeoutProcess+0x24>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800d316:	4b03      	ldr	r3, [pc, #12]	; (800d324 <RadioOnRxTimeoutProcess+0x24>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	4798      	blx	r3
    }
}
 800d31e:	bf00      	nop
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20001e9c 	.word	0x20001e9c

0800d328 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	4603      	mov	r3, r0
 800d330:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800d332:	4a05      	ldr	r2, [pc, #20]	; (800d348 <RadioOnDioIrq+0x20>)
 800d334:	88fb      	ldrh	r3, [r7, #6]
 800d336:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800d33a:	f000 f807 	bl	800d34c <RadioIrqProcess>
}
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	20002924 	.word	0x20002924

0800d34c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800d35a:	4bb4      	ldr	r3, [pc, #720]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d35c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d364:	f000 810c 	beq.w	800d580 <RadioIrqProcess+0x234>
 800d368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d36c:	f300 8184 	bgt.w	800d678 <RadioIrqProcess+0x32c>
 800d370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d374:	f000 80f0 	beq.w	800d558 <RadioIrqProcess+0x20c>
 800d378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d37c:	f300 817c 	bgt.w	800d678 <RadioIrqProcess+0x32c>
 800d380:	2b80      	cmp	r3, #128	; 0x80
 800d382:	f000 80d5 	beq.w	800d530 <RadioIrqProcess+0x1e4>
 800d386:	2b80      	cmp	r3, #128	; 0x80
 800d388:	f300 8176 	bgt.w	800d678 <RadioIrqProcess+0x32c>
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	dc49      	bgt.n	800d424 <RadioIrqProcess+0xd8>
 800d390:	2b00      	cmp	r3, #0
 800d392:	f340 8171 	ble.w	800d678 <RadioIrqProcess+0x32c>
 800d396:	3b01      	subs	r3, #1
 800d398:	2b1f      	cmp	r3, #31
 800d39a:	f200 816d 	bhi.w	800d678 <RadioIrqProcess+0x32c>
 800d39e:	a201      	add	r2, pc, #4	; (adr r2, 800d3a4 <RadioIrqProcess+0x58>)
 800d3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a4:	0800d42d 	.word	0x0800d42d
 800d3a8:	0800d467 	.word	0x0800d467
 800d3ac:	0800d679 	.word	0x0800d679
 800d3b0:	0800d679 	.word	0x0800d679
 800d3b4:	0800d679 	.word	0x0800d679
 800d3b8:	0800d679 	.word	0x0800d679
 800d3bc:	0800d679 	.word	0x0800d679
 800d3c0:	0800d5e5 	.word	0x0800d5e5
 800d3c4:	0800d679 	.word	0x0800d679
 800d3c8:	0800d679 	.word	0x0800d679
 800d3cc:	0800d679 	.word	0x0800d679
 800d3d0:	0800d679 	.word	0x0800d679
 800d3d4:	0800d679 	.word	0x0800d679
 800d3d8:	0800d679 	.word	0x0800d679
 800d3dc:	0800d679 	.word	0x0800d679
 800d3e0:	0800d679 	.word	0x0800d679
 800d3e4:	0800d679 	.word	0x0800d679
 800d3e8:	0800d679 	.word	0x0800d679
 800d3ec:	0800d679 	.word	0x0800d679
 800d3f0:	0800d679 	.word	0x0800d679
 800d3f4:	0800d679 	.word	0x0800d679
 800d3f8:	0800d679 	.word	0x0800d679
 800d3fc:	0800d679 	.word	0x0800d679
 800d400:	0800d679 	.word	0x0800d679
 800d404:	0800d679 	.word	0x0800d679
 800d408:	0800d679 	.word	0x0800d679
 800d40c:	0800d679 	.word	0x0800d679
 800d410:	0800d679 	.word	0x0800d679
 800d414:	0800d679 	.word	0x0800d679
 800d418:	0800d679 	.word	0x0800d679
 800d41c:	0800d679 	.word	0x0800d679
 800d420:	0800d5f5 	.word	0x0800d5f5
 800d424:	2b40      	cmp	r3, #64	; 0x40
 800d426:	f000 810f 	beq.w	800d648 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800d42a:	e125      	b.n	800d678 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 800d42c:	4880      	ldr	r0, [pc, #512]	; (800d630 <RadioIrqProcess+0x2e4>)
 800d42e:	f002 f9c7 	bl	800f7c0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800d432:	2000      	movs	r0, #0
 800d434:	f000 fef2 	bl	800e21c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800d438:	f001 fe52 	bl	800f0e0 <RFW_Is_LongPacketModeEnabled>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d101      	bne.n	800d446 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800d442:	f001 fe76 	bl	800f132 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d446:	4b7b      	ldr	r3, [pc, #492]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	f000 8116 	beq.w	800d67c <RadioIrqProcess+0x330>
 800d450:	4b78      	ldr	r3, [pc, #480]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	f000 8110 	beq.w	800d67c <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 800d45c:	4b75      	ldr	r3, [pc, #468]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	4798      	blx	r3
        break;
 800d464:	e10a      	b.n	800d67c <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 800d466:	4874      	ldr	r0, [pc, #464]	; (800d638 <RadioIrqProcess+0x2ec>)
 800d468:	f002 f9aa 	bl	800f7c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800d46c:	4b6f      	ldr	r3, [pc, #444]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d46e:	785b      	ldrb	r3, [r3, #1]
 800d470:	f083 0301 	eor.w	r3, r3, #1
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d014      	beq.n	800d4a4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800d47a:	2000      	movs	r0, #0
 800d47c:	f000 fece 	bl	800e21c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800d480:	2100      	movs	r1, #0
 800d482:	f640 1002 	movw	r0, #2306	; 0x902
 800d486:	f001 fbd7 	bl	800ec38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800d48a:	f640 1044 	movw	r0, #2372	; 0x944
 800d48e:	f001 fbe7 	bl	800ec60 <SUBGRF_ReadRegister>
 800d492:	4603      	mov	r3, r0
 800d494:	f043 0302 	orr.w	r3, r3, #2
 800d498:	b2db      	uxtb	r3, r3
 800d49a:	4619      	mov	r1, r3
 800d49c:	f640 1044 	movw	r0, #2372	; 0x944
 800d4a0:	f001 fbca 	bl	800ec38 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	22ff      	movs	r2, #255	; 0xff
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4864      	ldr	r0, [pc, #400]	; (800d63c <RadioIrqProcess+0x2f0>)
 800d4ac:	f000 fd86 	bl	800dfbc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800d4b0:	4863      	ldr	r0, [pc, #396]	; (800d640 <RadioIrqProcess+0x2f4>)
 800d4b2:	f001 fb6f 	bl	800eb94 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d4b6:	4b5f      	ldr	r3, [pc, #380]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d036      	beq.n	800d52c <RadioIrqProcess+0x1e0>
 800d4be:	4b5d      	ldr	r3, [pc, #372]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d031      	beq.n	800d52c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800d4c8:	4b58      	ldr	r3, [pc, #352]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d4ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d10e      	bne.n	800d4f0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800d4d2:	4b58      	ldr	r3, [pc, #352]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	689c      	ldr	r4, [r3, #8]
 800d4d8:	79fb      	ldrb	r3, [r7, #7]
 800d4da:	b299      	uxth	r1, r3
 800d4dc:	4b53      	ldr	r3, [pc, #332]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d4de:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800d4e2:	b21a      	sxth	r2, r3
 800d4e4:	4b51      	ldr	r3, [pc, #324]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d4e6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800d4ea:	4854      	ldr	r0, [pc, #336]	; (800d63c <RadioIrqProcess+0x2f0>)
 800d4ec:	47a0      	blx	r4
                break;
 800d4ee:	e01e      	b.n	800d52e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800d4f0:	4b4e      	ldr	r3, [pc, #312]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f4:	463a      	mov	r2, r7
 800d4f6:	4611      	mov	r1, r2
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f001 fd3d 	bl	800ef78 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800d4fe:	4b4d      	ldr	r3, [pc, #308]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689c      	ldr	r4, [r3, #8]
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	b299      	uxth	r1, r3
 800d508:	4b48      	ldr	r3, [pc, #288]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d50a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800d50e:	b218      	sxth	r0, r3
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d516:	4a4b      	ldr	r2, [pc, #300]	; (800d644 <RadioIrqProcess+0x2f8>)
 800d518:	fb82 c203 	smull	ip, r2, r2, r3
 800d51c:	1192      	asrs	r2, r2, #6
 800d51e:	17db      	asrs	r3, r3, #31
 800d520:	1ad3      	subs	r3, r2, r3
 800d522:	b25b      	sxtb	r3, r3
 800d524:	4602      	mov	r2, r0
 800d526:	4845      	ldr	r0, [pc, #276]	; (800d63c <RadioIrqProcess+0x2f0>)
 800d528:	47a0      	blx	r4
                break;
 800d52a:	e000      	b.n	800d52e <RadioIrqProcess+0x1e2>
        }
 800d52c:	bf00      	nop
        break;
 800d52e:	e0b2      	b.n	800d696 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 800d530:	2000      	movs	r0, #0
 800d532:	f000 fe73 	bl	800e21c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d536:	4b3f      	ldr	r3, [pc, #252]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f000 80a0 	beq.w	800d680 <RadioIrqProcess+0x334>
 800d540:	4b3c      	ldr	r3, [pc, #240]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	699b      	ldr	r3, [r3, #24]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 809a 	beq.w	800d680 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 800d54c:	4b39      	ldr	r3, [pc, #228]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	2000      	movs	r0, #0
 800d554:	4798      	blx	r3
        break;
 800d556:	e093      	b.n	800d680 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 800d558:	2000      	movs	r0, #0
 800d55a:	f000 fe5f 	bl	800e21c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d55e:	4b35      	ldr	r3, [pc, #212]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 808e 	beq.w	800d684 <RadioIrqProcess+0x338>
 800d568:	4b32      	ldr	r3, [pc, #200]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	699b      	ldr	r3, [r3, #24]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8088 	beq.w	800d684 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 800d574:	4b2f      	ldr	r3, [pc, #188]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	699b      	ldr	r3, [r3, #24]
 800d57a:	2001      	movs	r0, #1
 800d57c:	4798      	blx	r3
        break;
 800d57e:	e081      	b.n	800d684 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800d580:	f000 fd02 	bl	800df88 <SUBGRF_GetOperatingMode>
 800d584:	4603      	mov	r3, r0
 800d586:	2b04      	cmp	r3, #4
 800d588:	d113      	bne.n	800d5b2 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 800d58a:	4829      	ldr	r0, [pc, #164]	; (800d630 <RadioIrqProcess+0x2e4>)
 800d58c:	f002 f918 	bl	800f7c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800d590:	2000      	movs	r0, #0
 800d592:	f000 fe43 	bl	800e21c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d596:	4b27      	ldr	r3, [pc, #156]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d074      	beq.n	800d688 <RadioIrqProcess+0x33c>
 800d59e:	4b25      	ldr	r3, [pc, #148]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d06f      	beq.n	800d688 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 800d5a8:	4b22      	ldr	r3, [pc, #136]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	4798      	blx	r3
        break;
 800d5b0:	e06a      	b.n	800d688 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800d5b2:	f000 fce9 	bl	800df88 <SUBGRF_GetOperatingMode>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	2b05      	cmp	r3, #5
 800d5ba:	d165      	bne.n	800d688 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 800d5bc:	481e      	ldr	r0, [pc, #120]	; (800d638 <RadioIrqProcess+0x2ec>)
 800d5be:	f002 f8ff 	bl	800f7c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	f000 fe2a 	bl	800e21c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d5c8:	4b1a      	ldr	r3, [pc, #104]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d05b      	beq.n	800d688 <RadioIrqProcess+0x33c>
 800d5d0:	4b18      	ldr	r3, [pc, #96]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d056      	beq.n	800d688 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 800d5da:	4b16      	ldr	r3, [pc, #88]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	4798      	blx	r3
        break;
 800d5e2:	e051      	b.n	800d688 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 800d5e4:	f001 fd75 	bl	800f0d2 <RFW_Is_Init>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d14e      	bne.n	800d68c <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 800d5ee:	f001 fda6 	bl	800f13e <RFW_ReceivePayload>
        break;
 800d5f2:	e04b      	b.n	800d68c <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 800d5f4:	4810      	ldr	r0, [pc, #64]	; (800d638 <RadioIrqProcess+0x2ec>)
 800d5f6:	f002 f8e3 	bl	800f7c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800d5fa:	4b0c      	ldr	r3, [pc, #48]	; (800d62c <RadioIrqProcess+0x2e0>)
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	f083 0301 	eor.w	r3, r3, #1
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 800d608:	2000      	movs	r0, #0
 800d60a:	f000 fe07 	bl	800e21c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d60e:	4b09      	ldr	r3, [pc, #36]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d03c      	beq.n	800d690 <RadioIrqProcess+0x344>
 800d616:	4b07      	ldr	r3, [pc, #28]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d037      	beq.n	800d690 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 800d620:	4b04      	ldr	r3, [pc, #16]	; (800d634 <RadioIrqProcess+0x2e8>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	4798      	blx	r3
        break;
 800d628:	e032      	b.n	800d690 <RadioIrqProcess+0x344>
 800d62a:	bf00      	nop
 800d62c:	20002924 	.word	0x20002924
 800d630:	2000297c 	.word	0x2000297c
 800d634:	20001e9c 	.word	0x20001e9c
 800d638:	20002994 	.word	0x20002994
 800d63c:	20001d9c 	.word	0x20001d9c
 800d640:	20002948 	.word	0x20002948
 800d644:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 800d648:	4b15      	ldr	r3, [pc, #84]	; (800d6a0 <RadioIrqProcess+0x354>)
 800d64a:	785b      	ldrb	r3, [r3, #1]
 800d64c:	f083 0301 	eor.w	r3, r3, #1
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 800d656:	2000      	movs	r0, #0
 800d658:	f000 fde0 	bl	800e21c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800d65c:	4b11      	ldr	r3, [pc, #68]	; (800d6a4 <RadioIrqProcess+0x358>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d017      	beq.n	800d694 <RadioIrqProcess+0x348>
 800d664:	4b0f      	ldr	r3, [pc, #60]	; (800d6a4 <RadioIrqProcess+0x358>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d012      	beq.n	800d694 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 800d66e:	4b0d      	ldr	r3, [pc, #52]	; (800d6a4 <RadioIrqProcess+0x358>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4798      	blx	r3
        break;
 800d676:	e00d      	b.n	800d694 <RadioIrqProcess+0x348>
        break;
 800d678:	bf00      	nop
 800d67a:	e00c      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d67c:	bf00      	nop
 800d67e:	e00a      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d680:	bf00      	nop
 800d682:	e008      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d684:	bf00      	nop
 800d686:	e006      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d688:	bf00      	nop
 800d68a:	e004      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d68c:	bf00      	nop
 800d68e:	e002      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d690:	bf00      	nop
 800d692:	e000      	b.n	800d696 <RadioIrqProcess+0x34a>
        break;
 800d694:	bf00      	nop
  }
}
 800d696:	bf00      	nop
 800d698:	370c      	adds	r7, #12
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd90      	pop	{r4, r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	20002924 	.word	0x20002924
 800d6a4:	20001e9c 	.word	0x20001e9c

0800d6a8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800d6ac:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <RadioTxPrbs+0x2c>)
 800d6ae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f001 fbb3 	bl	800ee20 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800d6ba:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <RadioTxPrbs+0x30>)
 800d6bc:	212d      	movs	r1, #45	; 0x2d
 800d6be:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800d6c2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800d6c4:	f000 fe6d 	bl	800e3a2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800d6c8:	4804      	ldr	r0, [pc, #16]	; (800d6dc <RadioTxPrbs+0x34>)
 800d6ca:	f000 fdc3 	bl	800e254 <SUBGRF_SetTx>
}
 800d6ce:	bf00      	nop
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20002924 	.word	0x20002924
 800d6d8:	0800d15b 	.word	0x0800d15b
 800d6dc:	000fffff 	.word	0x000fffff

0800d6e0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800d6ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f001 fbbe 	bl	800ee70 <SUBGRF_SetRfTxPower>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	2101      	movs	r1, #1
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f001 fb8f 	bl	800ee20 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800d702:	f000 fe45 	bl	800e390 <SUBGRF_SetTxContinuousWave>
}
 800d706:	bf00      	nop
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800d70e:	b480      	push	{r7}
 800d710:	b089      	sub	sp, #36	; 0x24
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	4613      	mov	r3, r2
 800d71a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800d71c:	2300      	movs	r3, #0
 800d71e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800d724:	2300      	movs	r3, #0
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	e011      	b.n	800d74e <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	4413      	add	r3, r2
 800d730:	781a      	ldrb	r2, [r3, #0]
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	68b9      	ldr	r1, [r7, #8]
 800d736:	440b      	add	r3, r1
 800d738:	43d2      	mvns	r2, r2
 800d73a:	b2d2      	uxtb	r2, r2
 800d73c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	4413      	add	r3, r2
 800d744:	2200      	movs	r2, #0
 800d746:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	3301      	adds	r3, #1
 800d74c:	61bb      	str	r3, [r7, #24]
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	429a      	cmp	r2, r3
 800d754:	dbe9      	blt.n	800d72a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800d756:	2300      	movs	r3, #0
 800d758:	61bb      	str	r3, [r7, #24]
 800d75a:	e049      	b.n	800d7f0 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	425a      	negs	r2, r3
 800d760:	f003 0307 	and.w	r3, r3, #7
 800d764:	f002 0207 	and.w	r2, r2, #7
 800d768:	bf58      	it	pl
 800d76a:	4253      	negpl	r3, r2
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	f1c3 0307 	rsb	r3, r3, #7
 800d772:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	2b00      	cmp	r3, #0
 800d778:	da00      	bge.n	800d77c <payload_integration+0x6e>
 800d77a:	3307      	adds	r3, #7
 800d77c:	10db      	asrs	r3, r3, #3
 800d77e:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	3301      	adds	r3, #1
 800d784:	425a      	negs	r2, r3
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	f002 0207 	and.w	r2, r2, #7
 800d78e:	bf58      	it	pl
 800d790:	4253      	negpl	r3, r2
 800d792:	b2db      	uxtb	r3, r3
 800d794:	f1c3 0307 	rsb	r3, r3, #7
 800d798:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	3301      	adds	r3, #1
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	da00      	bge.n	800d7a4 <payload_integration+0x96>
 800d7a2:	3307      	adds	r3, #7
 800d7a4:	10db      	asrs	r3, r3, #3
 800d7a6:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800d7a8:	7dbb      	ldrb	r3, [r7, #22]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	fa42 f303 	asr.w	r3, r2, r3
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800d7c0:	7ffa      	ldrb	r2, [r7, #31]
 800d7c2:	7cfb      	ldrb	r3, [r7, #19]
 800d7c4:	4053      	eors	r3, r2
 800d7c6:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800d7c8:	7d3b      	ldrb	r3, [r7, #20]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	b25a      	sxtb	r2, r3
 800d7d2:	7ff9      	ldrb	r1, [r7, #31]
 800d7d4:	7d7b      	ldrb	r3, [r7, #21]
 800d7d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7da:	b25b      	sxtb	r3, r3
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	b259      	sxtb	r1, r3
 800d7e0:	7d3b      	ldrb	r3, [r7, #20]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	b2ca      	uxtb	r2, r1
 800d7e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	61bb      	str	r3, [r7, #24]
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	00db      	lsls	r3, r3, #3
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	dbb0      	blt.n	800d75c <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800d7fa:	7ffb      	ldrb	r3, [r7, #31]
 800d7fc:	01db      	lsls	r3, r3, #7
 800d7fe:	b25a      	sxtb	r2, r3
 800d800:	7ffb      	ldrb	r3, [r7, #31]
 800d802:	019b      	lsls	r3, r3, #6
 800d804:	b25b      	sxtb	r3, r3
 800d806:	4313      	orrs	r3, r2
 800d808:	b25b      	sxtb	r3, r3
 800d80a:	7ffa      	ldrb	r2, [r7, #31]
 800d80c:	2a00      	cmp	r2, #0
 800d80e:	d101      	bne.n	800d814 <payload_integration+0x106>
 800d810:	2220      	movs	r2, #32
 800d812:	e000      	b.n	800d816 <payload_integration+0x108>
 800d814:	2200      	movs	r2, #0
 800d816:	4313      	orrs	r3, r2
 800d818:	b259      	sxtb	r1, r3
 800d81a:	79fb      	ldrb	r3, [r7, #7]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	4413      	add	r3, r2
 800d820:	b2ca      	uxtb	r2, r1
 800d822:	701a      	strb	r2, [r3, #0]
}
 800d824:	bf00      	nop
 800d826:	3724      	adds	r7, #36	; 0x24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bc80      	pop	{r7}
 800d82c:	4770      	bx	lr
	...

0800d830 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b08c      	sub	sp, #48	; 0x30
 800d834:	af00      	add	r7, sp, #0
 800d836:	60b9      	str	r1, [r7, #8]
 800d838:	607a      	str	r2, [r7, #4]
 800d83a:	603b      	str	r3, [r7, #0]
 800d83c:	4603      	mov	r3, r0
 800d83e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800d844:	2300      	movs	r3, #0
 800d846:	61fb      	str	r3, [r7, #28]
 800d848:	2300      	movs	r3, #0
 800d84a:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800d84c:	f001 fc3b 	bl	800f0c6 <RFW_DeInit>

    if( rxContinuous != 0 )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bf14      	ite	ne
 800d860:	2301      	movne	r3, #1
 800d862:	2300      	moveq	r3, #0
 800d864:	b2da      	uxtb	r2, r3
 800d866:	4ba9      	ldr	r3, [pc, #676]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d868:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800d86a:	7bfb      	ldrb	r3, [r7, #15]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d003      	beq.n	800d878 <RadioSetRxGenericConfig+0x48>
 800d870:	2b01      	cmp	r3, #1
 800d872:	f000 80e8 	beq.w	800da46 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800d876:	e1a0      	b.n	800dbba <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <RadioSetRxGenericConfig+0x58>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d102      	bne.n	800d88e <RadioSetRxGenericConfig+0x5e>
            return -1;
 800d888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d88c:	e196      	b.n	800dbbc <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	7d5b      	ldrb	r3, [r3, #21]
 800d892:	2b08      	cmp	r3, #8
 800d894:	d902      	bls.n	800d89c <RadioSetRxGenericConfig+0x6c>
            return -1;
 800d896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d89a:	e18f      	b.n	800dbbc <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800d89c:	2300      	movs	r3, #0
 800d89e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8a0:	e00d      	b.n	800d8be <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	699a      	ldr	r2, [r3, #24]
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	4413      	add	r3, r2
 800d8aa:	7819      	ldrb	r1, [r3, #0]
 800d8ac:	f107 021c 	add.w	r2, r7, #28
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	4413      	add	r3, r2
 800d8b4:	460a      	mov	r2, r1
 800d8b6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	7d5b      	ldrb	r3, [r3, #21]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	dbeb      	blt.n	800d8a2 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	bf14      	ite	ne
 800d8d2:	2301      	movne	r3, #1
 800d8d4:	2300      	moveq	r3, #0
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 fd6b 	bl	800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800d8de:	4b8b      	ldr	r3, [pc, #556]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	4a88      	ldr	r2, [pc, #544]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d8ec:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	791a      	ldrb	r2, [r3, #4]
 800d8f2:	4b86      	ldr	r3, [pc, #536]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d8f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f001 fb13 	bl	800ef28 <SUBGRF_GetFskBandwidthRegValue>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	4b81      	ldr	r3, [pc, #516]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800d90c:	4b7f      	ldr	r3, [pc, #508]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d90e:	2200      	movs	r2, #0
 800d910:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	691b      	ldr	r3, [r3, #16]
 800d916:	b29b      	uxth	r3, r3
 800d918:	00db      	lsls	r3, r3, #3
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	4b7b      	ldr	r3, [pc, #492]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d91e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	7d1a      	ldrb	r2, [r3, #20]
 800d924:	4b79      	ldr	r3, [pc, #484]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d926:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	7d5b      	ldrb	r3, [r3, #21]
 800d92c:	00db      	lsls	r3, r3, #3
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	4b76      	ldr	r3, [pc, #472]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d932:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d93a:	4b74      	ldr	r3, [pc, #464]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d93c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d944:	2b00      	cmp	r3, #0
 800d946:	d105      	bne.n	800d954 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	69db      	ldr	r3, [r3, #28]
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	4b6f      	ldr	r3, [pc, #444]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d950:	759a      	strb	r2, [r3, #22]
 800d952:	e00b      	b.n	800d96c <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d103      	bne.n	800d966 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800d95e:	4b6b      	ldr	r3, [pc, #428]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d960:	22ff      	movs	r2, #255	; 0xff
 800d962:	759a      	strb	r2, [r3, #22]
 800d964:	e002      	b.n	800d96c <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800d966:	4b69      	ldr	r3, [pc, #420]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d968:	22ff      	movs	r2, #255	; 0xff
 800d96a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800d972:	2b02      	cmp	r3, #2
 800d974:	d004      	beq.n	800d980 <RadioSetRxGenericConfig+0x150>
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d12d      	bne.n	800d9dc <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d986:	2bf1      	cmp	r3, #241	; 0xf1
 800d988:	d00c      	beq.n	800d9a4 <RadioSetRxGenericConfig+0x174>
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d990:	2bf2      	cmp	r3, #242	; 0xf2
 800d992:	d007      	beq.n	800d9a4 <RadioSetRxGenericConfig+0x174>
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d002      	beq.n	800d9a4 <RadioSetRxGenericConfig+0x174>
            return -1;
 800d99e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9a2:	e10b      	b.n	800dbbc <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800d9ac:	4b58      	ldr	r3, [pc, #352]	; (800db10 <RadioSetRxGenericConfig+0x2e0>)
 800d9ae:	6819      	ldr	r1, [r3, #0]
 800d9b0:	f107 0310 	add.w	r3, r7, #16
 800d9b4:	4a57      	ldr	r2, [pc, #348]	; (800db14 <RadioSetRxGenericConfig+0x2e4>)
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fb78 	bl	800f0ac <RFW_Init>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <RadioSetRxGenericConfig+0x198>
            return -1;
 800d9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9c6:	e0f9      	b.n	800dbbc <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800d9c8:	4b50      	ldr	r3, [pc, #320]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800d9ce:	4b4f      	ldr	r3, [pc, #316]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800d9d4:	4b4d      	ldr	r3, [pc, #308]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	755a      	strb	r2, [r3, #21]
        {
 800d9da:	e00e      	b.n	800d9fa <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d9e2:	4b4a      	ldr	r3, [pc, #296]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9e4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d9ec:	4b47      	ldr	r3, [pc, #284]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9ee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d9f6:	4b45      	ldr	r3, [pc, #276]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800d9f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800d9fa:	f7ff fac8 	bl	800cf8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800d9fe:	2000      	movs	r0, #0
 800da00:	f7fe fc60 	bl	800c2c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800da04:	4844      	ldr	r0, [pc, #272]	; (800db18 <RadioSetRxGenericConfig+0x2e8>)
 800da06:	f000 ff03 	bl	800e810 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800da0a:	4844      	ldr	r0, [pc, #272]	; (800db1c <RadioSetRxGenericConfig+0x2ec>)
 800da0c:	f000 ffcc 	bl	800e9a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800da10:	f107 031c 	add.w	r3, r7, #28
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fb06 	bl	800e026 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	8c1b      	ldrh	r3, [r3, #32]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 fb50 	bl	800e0c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 fb2b 	bl	800e084 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800da34:	fb02 f203 	mul.w	r2, r2, r3
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da40:	4a32      	ldr	r2, [pc, #200]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800da42:	6093      	str	r3, [r2, #8]
        break;
 800da44:	e0b9      	b.n	800dbba <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d102      	bne.n	800da54 <RadioSetRxGenericConfig+0x224>
            return -1;
 800da4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da52:	e0b3      	b.n	800dbbc <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d104      	bne.n	800da68 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800da66:	e002      	b.n	800da6e <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800da68:	23ff      	movs	r3, #255	; 0xff
 800da6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da72:	2b00      	cmp	r3, #0
 800da74:	bf14      	ite	ne
 800da76:	2301      	movne	r3, #1
 800da78:	2300      	moveq	r3, #0
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	4618      	mov	r0, r3
 800da7e:	f000 fc99 	bl	800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	b2db      	uxtb	r3, r3
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fca3 	bl	800e3d2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800da8c:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800da8e:	2201      	movs	r2, #1
 800da90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800da9a:	4b1c      	ldr	r3, [pc, #112]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800da9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800daa6:	4b19      	ldr	r3, [pc, #100]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800daa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800dab2:	4b16      	ldr	r3, [pc, #88]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800dab4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d010      	beq.n	800dae4 <RadioSetRxGenericConfig+0x2b4>
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	dc2c      	bgt.n	800db20 <RadioSetRxGenericConfig+0x2f0>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d002      	beq.n	800dad0 <RadioSetRxGenericConfig+0x2a0>
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d005      	beq.n	800dada <RadioSetRxGenericConfig+0x2aa>
            break;
 800dace:	e027      	b.n	800db20 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800dad0:	4b0e      	ldr	r3, [pc, #56]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800dad8:	e023      	b.n	800db22 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800dada:	4b0c      	ldr	r3, [pc, #48]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800dae2:	e01e      	b.n	800db22 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daea:	2b0b      	cmp	r3, #11
 800daec:	d004      	beq.n	800daf8 <RadioSetRxGenericConfig+0x2c8>
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daf4:	2b0c      	cmp	r3, #12
 800daf6:	d104      	bne.n	800db02 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800daf8:	4b04      	ldr	r3, [pc, #16]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db00:	e00f      	b.n	800db22 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800db02:	4b02      	ldr	r3, [pc, #8]	; (800db0c <RadioSetRxGenericConfig+0x2dc>)
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800db0a:	e00a      	b.n	800db22 <RadioSetRxGenericConfig+0x2f2>
 800db0c:	20002924 	.word	0x20002924
 800db10:	20001e9c 	.word	0x20001e9c
 800db14:	20002994 	.word	0x20002994
 800db18:	2000295c 	.word	0x2000295c
 800db1c:	20002932 	.word	0x20002932
            break;
 800db20:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800db22:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db24:	2201      	movs	r2, #1
 800db26:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800db2c:	4b25      	ldr	r3, [pc, #148]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db2e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800db36:	4b23      	ldr	r3, [pc, #140]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db38:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800db3a:	4a22      	ldr	r2, [pc, #136]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db40:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800db48:	4b1e      	ldr	r3, [pc, #120]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db4a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800db54:	4b1b      	ldr	r3, [pc, #108]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800db5a:	f7ff fa18 	bl	800cf8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800db5e:	2001      	movs	r0, #1
 800db60:	f7fe fbb0 	bl	800c2c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800db64:	4818      	ldr	r0, [pc, #96]	; (800dbc8 <RadioSetRxGenericConfig+0x398>)
 800db66:	f000 fe53 	bl	800e810 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800db6a:	4818      	ldr	r0, [pc, #96]	; (800dbcc <RadioSetRxGenericConfig+0x39c>)
 800db6c:	f000 ff1c 	bl	800e9a8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800db70:	4b14      	ldr	r3, [pc, #80]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800db72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800db76:	2b01      	cmp	r3, #1
 800db78:	d10d      	bne.n	800db96 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800db7a:	f240 7036 	movw	r0, #1846	; 0x736
 800db7e:	f001 f86f 	bl	800ec60 <SUBGRF_ReadRegister>
 800db82:	4603      	mov	r3, r0
 800db84:	f023 0304 	bic.w	r3, r3, #4
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	4619      	mov	r1, r3
 800db8c:	f240 7036 	movw	r0, #1846	; 0x736
 800db90:	f001 f852 	bl	800ec38 <SUBGRF_WriteRegister>
 800db94:	e00c      	b.n	800dbb0 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800db96:	f240 7036 	movw	r0, #1846	; 0x736
 800db9a:	f001 f861 	bl	800ec60 <SUBGRF_ReadRegister>
 800db9e:	4603      	mov	r3, r0
 800dba0:	f043 0304 	orr.w	r3, r3, #4
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	4619      	mov	r1, r3
 800dba8:	f240 7036 	movw	r0, #1846	; 0x736
 800dbac:	f001 f844 	bl	800ec38 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800dbb0:	4b04      	ldr	r3, [pc, #16]	; (800dbc4 <RadioSetRxGenericConfig+0x394>)
 800dbb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dbb6:	609a      	str	r2, [r3, #8]
        break;
 800dbb8:	bf00      	nop
    }
    return status;
 800dbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3730      	adds	r7, #48	; 0x30
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20002924 	.word	0x20002924
 800dbc8:	2000295c 	.word	0x2000295c
 800dbcc:	20002932 	.word	0x20002932

0800dbd0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60b9      	str	r1, [r7, #8]
 800dbd8:	607b      	str	r3, [r7, #4]
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73fb      	strb	r3, [r7, #15]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	61fb      	str	r3, [r7, #28]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800dbea:	f001 fa6c 	bl	800f0c6 <RFW_DeInit>
    switch( modem )
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	f000 8144 	beq.w	800de7e <RadioSetTxGenericConfig+0x2ae>
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	f300 8160 	bgt.w	800debc <RadioSetTxGenericConfig+0x2ec>
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d003      	beq.n	800dc08 <RadioSetTxGenericConfig+0x38>
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	f000 80b7 	beq.w	800dd74 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800dc06:	e159      	b.n	800debc <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d003      	beq.n	800dc18 <RadioSetTxGenericConfig+0x48>
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <RadioSetTxGenericConfig+0x4e>
            return -1;
 800dc18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc1c:	e163      	b.n	800dee6 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	7d1b      	ldrb	r3, [r3, #20]
 800dc22:	2b08      	cmp	r3, #8
 800dc24:	d902      	bls.n	800dc2c <RadioSetTxGenericConfig+0x5c>
            return -1;
 800dc26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc2a:	e15c      	b.n	800dee6 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	627b      	str	r3, [r7, #36]	; 0x24
 800dc30:	e00d      	b.n	800dc4e <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	699a      	ldr	r2, [r3, #24]
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	4413      	add	r3, r2
 800dc3a:	7819      	ldrb	r1, [r3, #0]
 800dc3c:	f107 021c 	add.w	r2, r7, #28
 800dc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc42:	4413      	add	r3, r2
 800dc44:	460a      	mov	r2, r1
 800dc46:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	7d1b      	ldrb	r3, [r3, #20]
 800dc52:	461a      	mov	r2, r3
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	4293      	cmp	r3, r2
 800dc58:	dbeb      	blt.n	800dc32 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800dc5a:	4ba5      	ldr	r3, [pc, #660]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	4aa2      	ldr	r2, [pc, #648]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc68:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	4ba0      	ldr	r3, [pc, #640]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 f955 	bl	800ef28 <SUBGRF_GetFskBandwidthRegValue>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	461a      	mov	r2, r3
 800dc82:	4b9b      	ldr	r3, [pc, #620]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	4a98      	ldr	r2, [pc, #608]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc8e:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800dc90:	4b97      	ldr	r3, [pc, #604]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	691b      	ldr	r3, [r3, #16]
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	00db      	lsls	r3, r3, #3
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	4b93      	ldr	r3, [pc, #588]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dca2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800dca4:	4b92      	ldr	r3, [pc, #584]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dca6:	2204      	movs	r2, #4
 800dca8:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	7d1b      	ldrb	r3, [r3, #20]
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	4b8f      	ldr	r3, [pc, #572]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dcb4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800dcb6:	4b8e      	ldr	r3, [pc, #568]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dcb8:	2200      	movs	r2, #0
 800dcba:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d003      	beq.n	800dcce <RadioSetTxGenericConfig+0xfe>
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	7f9b      	ldrb	r3, [r3, #30]
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d12a      	bne.n	800dd24 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	7fdb      	ldrb	r3, [r3, #31]
 800dcd2:	2bf1      	cmp	r3, #241	; 0xf1
 800dcd4:	d00a      	beq.n	800dcec <RadioSetTxGenericConfig+0x11c>
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	7fdb      	ldrb	r3, [r3, #31]
 800dcda:	2bf2      	cmp	r3, #242	; 0xf2
 800dcdc:	d006      	beq.n	800dcec <RadioSetTxGenericConfig+0x11c>
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	7fdb      	ldrb	r3, [r3, #31]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d002      	beq.n	800dcec <RadioSetTxGenericConfig+0x11c>
                return -1;
 800dce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcea:	e0fc      	b.n	800dee6 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800dcec:	2301      	movs	r3, #1
 800dcee:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800dcf4:	4b7f      	ldr	r3, [pc, #508]	; (800def4 <RadioSetTxGenericConfig+0x324>)
 800dcf6:	6819      	ldr	r1, [r3, #0]
 800dcf8:	f107 0310 	add.w	r3, r7, #16
 800dcfc:	4a7e      	ldr	r2, [pc, #504]	; (800def8 <RadioSetTxGenericConfig+0x328>)
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f001 f9d4 	bl	800f0ac <RFW_Init>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <RadioSetTxGenericConfig+0x140>
              return -1;
 800dd0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd0e:	e0ea      	b.n	800dee6 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800dd10:	4b77      	ldr	r3, [pc, #476]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800dd16:	4b76      	ldr	r3, [pc, #472]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd18:	2201      	movs	r2, #1
 800dd1a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800dd1c:	4b74      	ldr	r3, [pc, #464]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	755a      	strb	r2, [r3, #21]
        {
 800dd22:	e00c      	b.n	800dd3e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	7fda      	ldrb	r2, [r3, #31]
 800dd28:	4b71      	ldr	r3, [pc, #452]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd2a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800dd32:	4b6f      	ldr	r3, [pc, #444]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd34:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	7f9a      	ldrb	r2, [r3, #30]
 800dd3a:	4b6d      	ldr	r3, [pc, #436]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd3c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800dd3e:	f7ff f926 	bl	800cf8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800dd42:	2000      	movs	r0, #0
 800dd44:	f7fe fabe 	bl	800c2c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800dd48:	486c      	ldr	r0, [pc, #432]	; (800defc <RadioSetTxGenericConfig+0x32c>)
 800dd4a:	f000 fd61 	bl	800e810 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800dd4e:	486c      	ldr	r0, [pc, #432]	; (800df00 <RadioSetTxGenericConfig+0x330>)
 800dd50:	f000 fe2a 	bl	800e9a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800dd54:	f107 031c 	add.w	r3, r7, #28
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 f964 	bl	800e026 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	8b9b      	ldrh	r3, [r3, #28]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 f9ae 	bl	800e0c4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	8c1b      	ldrh	r3, [r3, #32]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 f989 	bl	800e084 <SUBGRF_SetCrcPolynomial>
        break;
 800dd72:	e0a4      	b.n	800debe <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dd74:	4b5e      	ldr	r3, [pc, #376]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800dd82:	4b5b      	ldr	r3, [pc, #364]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800dd8e:	4b58      	ldr	r3, [pc, #352]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dd9a:	4b55      	ldr	r3, [pc, #340]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dd9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	d010      	beq.n	800ddcc <RadioSetTxGenericConfig+0x1fc>
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	dc22      	bgt.n	800ddf4 <RadioSetTxGenericConfig+0x224>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d002      	beq.n	800ddb8 <RadioSetTxGenericConfig+0x1e8>
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d005      	beq.n	800ddc2 <RadioSetTxGenericConfig+0x1f2>
            break;
 800ddb6:	e01d      	b.n	800ddf4 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ddb8:	4b4d      	ldr	r3, [pc, #308]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ddc0:	e019      	b.n	800ddf6 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800ddc2:	4b4b      	ldr	r3, [pc, #300]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ddca:	e014      	b.n	800ddf6 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddd2:	2b0b      	cmp	r3, #11
 800ddd4:	d004      	beq.n	800dde0 <RadioSetTxGenericConfig+0x210>
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dddc:	2b0c      	cmp	r3, #12
 800ddde:	d104      	bne.n	800ddea <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800dde0:	4b43      	ldr	r3, [pc, #268]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800dde8:	e005      	b.n	800ddf6 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800ddea:	4b41      	ldr	r3, [pc, #260]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800ddf2:	e000      	b.n	800ddf6 <RadioSetTxGenericConfig+0x226>
            break;
 800ddf4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ddf6:	4b3e      	ldr	r3, [pc, #248]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800de00:	4b3b      	ldr	r3, [pc, #236]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de02:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800de0a:	4b39      	ldr	r3, [pc, #228]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de0c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800de14:	4b36      	ldr	r3, [pc, #216]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de16:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800de20:	4b33      	ldr	r3, [pc, #204]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800de26:	f7ff f8b2 	bl	800cf8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800de2a:	2001      	movs	r0, #1
 800de2c:	f7fe fa4a 	bl	800c2c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800de30:	4832      	ldr	r0, [pc, #200]	; (800defc <RadioSetTxGenericConfig+0x32c>)
 800de32:	f000 fced 	bl	800e810 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800de36:	4832      	ldr	r0, [pc, #200]	; (800df00 <RadioSetTxGenericConfig+0x330>)
 800de38:	f000 fdb6 	bl	800e9a8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800de3c:	4b2c      	ldr	r3, [pc, #176]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de42:	2b06      	cmp	r3, #6
 800de44:	d10d      	bne.n	800de62 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800de46:	f640 0089 	movw	r0, #2185	; 0x889
 800de4a:	f000 ff09 	bl	800ec60 <SUBGRF_ReadRegister>
 800de4e:	4603      	mov	r3, r0
 800de50:	f023 0304 	bic.w	r3, r3, #4
 800de54:	b2db      	uxtb	r3, r3
 800de56:	4619      	mov	r1, r3
 800de58:	f640 0089 	movw	r0, #2185	; 0x889
 800de5c:	f000 feec 	bl	800ec38 <SUBGRF_WriteRegister>
        break;
 800de60:	e02d      	b.n	800debe <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800de62:	f640 0089 	movw	r0, #2185	; 0x889
 800de66:	f000 fefb 	bl	800ec60 <SUBGRF_ReadRegister>
 800de6a:	4603      	mov	r3, r0
 800de6c:	f043 0304 	orr.w	r3, r3, #4
 800de70:	b2db      	uxtb	r3, r3
 800de72:	4619      	mov	r1, r3
 800de74:	f640 0089 	movw	r0, #2185	; 0x889
 800de78:	f000 fede 	bl	800ec38 <SUBGRF_WriteRegister>
        break;
 800de7c:	e01f      	b.n	800debe <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de82:	2b00      	cmp	r3, #0
 800de84:	d004      	beq.n	800de90 <RadioSetTxGenericConfig+0x2c0>
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de8e:	d902      	bls.n	800de96 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800de90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de94:	e027      	b.n	800dee6 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800de96:	2002      	movs	r0, #2
 800de98:	f7fe fa14 	bl	800c2c4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800de9c:	4b14      	ldr	r3, [pc, #80]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800de9e:	2202      	movs	r2, #2
 800dea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea8:	4a11      	ldr	r2, [pc, #68]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800deaa:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800deac:	4b10      	ldr	r3, [pc, #64]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800deae:	2216      	movs	r2, #22
 800deb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800deb4:	4811      	ldr	r0, [pc, #68]	; (800defc <RadioSetTxGenericConfig+0x32c>)
 800deb6:	f000 fcab 	bl	800e810 <SUBGRF_SetModulationParams>
        break;
 800deba:	e000      	b.n	800debe <RadioSetTxGenericConfig+0x2ee>
        break;
 800debc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800debe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 ffd4 	bl	800ee70 <SUBGRF_SetRfTxPower>
 800dec8:	4603      	mov	r3, r0
 800deca:	461a      	mov	r2, r3
 800decc:	4b08      	ldr	r3, [pc, #32]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dece:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800ded2:	4b07      	ldr	r3, [pc, #28]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800ded4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ded8:	4618      	mov	r0, r3
 800deda:	f001 f908 	bl	800f0ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800dede:	4a04      	ldr	r2, [pc, #16]	; (800def0 <RadioSetTxGenericConfig+0x320>)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6053      	str	r3, [r2, #4]
    return 0;
 800dee4:	2300      	movs	r3, #0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3728      	adds	r7, #40	; 0x28
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	20002924 	.word	0x20002924
 800def4:	20001e9c 	.word	0x20001e9c
 800def8:	2000297c 	.word	0x2000297c
 800defc:	2000295c 	.word	0x2000295c
 800df00:	20002932 	.word	0x20002932

0800df04 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d002      	beq.n	800df18 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800df12:	4a1a      	ldr	r2, [pc, #104]	; (800df7c <SUBGRF_Init+0x78>)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800df18:	f7f3 f9ee 	bl	80012f8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800df1c:	2002      	movs	r0, #2
 800df1e:	f000 ffe2 	bl	800eee6 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800df22:	4b17      	ldr	r3, [pc, #92]	; (800df80 <SUBGRF_Init+0x7c>)
 800df24:	2200      	movs	r2, #0
 800df26:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800df28:	2000      	movs	r0, #0
 800df2a:	f000 f977 	bl	800e21c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800df2e:	f001 fb72 	bl	800f616 <RBI_IsTCXO>
 800df32:	4603      	mov	r3, r0
 800df34:	2b01      	cmp	r3, #1
 800df36:	d10e      	bne.n	800df56 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800df38:	2140      	movs	r1, #64	; 0x40
 800df3a:	2001      	movs	r0, #1
 800df3c:	f000 fb78 	bl	800e630 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800df40:	2100      	movs	r1, #0
 800df42:	f640 1011 	movw	r0, #2321	; 0x911
 800df46:	f000 fe77 	bl	800ec38 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800df4a:	237f      	movs	r3, #127	; 0x7f
 800df4c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800df4e:	7b38      	ldrb	r0, [r7, #12]
 800df50:	f000 fa85 	bl	800e45e <SUBGRF_Calibrate>
 800df54:	e009      	b.n	800df6a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800df56:	2120      	movs	r1, #32
 800df58:	f640 1011 	movw	r0, #2321	; 0x911
 800df5c:	f000 fe6c 	bl	800ec38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800df60:	2120      	movs	r1, #32
 800df62:	f640 1012 	movw	r0, #2322	; 0x912
 800df66:	f000 fe67 	bl	800ec38 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800df6a:	f001 fb31 	bl	800f5d0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800df6e:	4b05      	ldr	r3, [pc, #20]	; (800df84 <SUBGRF_Init+0x80>)
 800df70:	2201      	movs	r2, #1
 800df72:	701a      	strb	r2, [r3, #0]
}
 800df74:	bf00      	nop
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	20001eac 	.word	0x20001eac
 800df80:	20001ea8 	.word	0x20001ea8
 800df84:	20001ea0 	.word	0x20001ea0

0800df88 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800df8c:	4b02      	ldr	r3, [pc, #8]	; (800df98 <SUBGRF_GetOperatingMode+0x10>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
}
 800df90:	4618      	mov	r0, r3
 800df92:	46bd      	mov	sp, r7
 800df94:	bc80      	pop	{r7}
 800df96:	4770      	bx	lr
 800df98:	20001ea0 	.word	0x20001ea0

0800df9c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800dfa8:	78fb      	ldrb	r3, [r7, #3]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	6879      	ldr	r1, [r7, #4]
 800dfae:	2000      	movs	r0, #0
 800dfb0:	f000 feae 	bl	800ed10 <SUBGRF_WriteBuffer>
}
 800dfb4:	bf00      	nop
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800dfce:	f107 0317 	add.w	r3, r7, #23
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	68b8      	ldr	r0, [r7, #8]
 800dfd6:	f000 fdb1 	bl	800eb3c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	79fa      	ldrb	r2, [r7, #7]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d201      	bcs.n	800dfe8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e007      	b.n	800dff8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800dfe8:	7df8      	ldrb	r0, [r7, #23]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	461a      	mov	r2, r3
 800dff0:	68f9      	ldr	r1, [r7, #12]
 800dff2:	f000 feaf 	bl	800ed54 <SUBGRF_ReadBuffer>

    return 0;
 800dff6:	2300      	movs	r3, #0
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	460b      	mov	r3, r1
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800e00e:	7afb      	ldrb	r3, [r7, #11]
 800e010:	4619      	mov	r1, r3
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f7ff ffc2 	bl	800df9c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 f91b 	bl	800e254 <SUBGRF_SetTx>
}
 800e01e:	bf00      	nop
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b082      	sub	sp, #8
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800e02e:	2208      	movs	r2, #8
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800e036:	f000 fe27 	bl	800ec88 <SUBGRF_WriteRegisters>
    return 0;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800e04e:	88fb      	ldrh	r3, [r7, #6]
 800e050:	0a1b      	lsrs	r3, r3, #8
 800e052:	b29b      	uxth	r3, r3
 800e054:	b2db      	uxtb	r3, r3
 800e056:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800e058:	88fb      	ldrh	r3, [r7, #6]
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e05e:	f000 fb67 	bl	800e730 <SUBGRF_GetPacketType>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d108      	bne.n	800e07a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800e068:	f107 030c 	add.w	r3, r7, #12
 800e06c:	2202      	movs	r2, #2
 800e06e:	4619      	mov	r1, r3
 800e070:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800e074:	f000 fe08 	bl	800ec88 <SUBGRF_WriteRegisters>
            break;
 800e078:	e000      	b.n	800e07c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800e07a:	bf00      	nop
    }
}
 800e07c:	bf00      	nop
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	4603      	mov	r3, r0
 800e08c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800e08e:	88fb      	ldrh	r3, [r7, #6]
 800e090:	0a1b      	lsrs	r3, r3, #8
 800e092:	b29b      	uxth	r3, r3
 800e094:	b2db      	uxtb	r3, r3
 800e096:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800e098:	88fb      	ldrh	r3, [r7, #6]
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e09e:	f000 fb47 	bl	800e730 <SUBGRF_GetPacketType>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d108      	bne.n	800e0ba <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800e0a8:	f107 030c 	add.w	r3, r7, #12
 800e0ac:	2202      	movs	r2, #2
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	f240 60be 	movw	r0, #1726	; 0x6be
 800e0b4:	f000 fde8 	bl	800ec88 <SUBGRF_WriteRegisters>
            break;
 800e0b8:	e000      	b.n	800e0bc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800e0ba:	bf00      	nop
    }
}
 800e0bc:	bf00      	nop
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800e0d2:	f000 fb2d 	bl	800e730 <SUBGRF_GetPacketType>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d121      	bne.n	800e120 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800e0dc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e0e0:	f000 fdbe 	bl	800ec60 <SUBGRF_ReadRegister>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	f023 0301 	bic.w	r3, r3, #1
 800e0ea:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800e0ec:	88fb      	ldrh	r3, [r7, #6]
 800e0ee:	0a1b      	lsrs	r3, r3, #8
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	b25b      	sxtb	r3, r3
 800e0f4:	f003 0301 	and.w	r3, r3, #1
 800e0f8:	b25a      	sxtb	r2, r3
 800e0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	b25b      	sxtb	r3, r3
 800e102:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800e104:	7bfb      	ldrb	r3, [r7, #15]
 800e106:	4619      	mov	r1, r3
 800e108:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e10c:	f000 fd94 	bl	800ec38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800e110:	88fb      	ldrh	r3, [r7, #6]
 800e112:	b2db      	uxtb	r3, r3
 800e114:	4619      	mov	r1, r3
 800e116:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800e11a:	f000 fd8d 	bl	800ec38 <SUBGRF_WriteRegister>
            break;
 800e11e:	e000      	b.n	800e122 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800e120:	bf00      	nop
    }
}
 800e122:	bf00      	nop
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800e130:	2300      	movs	r3, #0
 800e132:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800e134:	2300      	movs	r3, #0
 800e136:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800e13c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e140:	f000 fd8e 	bl	800ec60 <SUBGRF_ReadRegister>
 800e144:	4603      	mov	r3, r0
 800e146:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e148:	79fb      	ldrb	r3, [r7, #7]
 800e14a:	f023 0301 	bic.w	r3, r3, #1
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	4619      	mov	r1, r3
 800e152:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e156:	f000 fd6f 	bl	800ec38 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800e15a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e15e:	f000 fd7f 	bl	800ec60 <SUBGRF_ReadRegister>
 800e162:	4603      	mov	r3, r0
 800e164:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e166:	79bb      	ldrb	r3, [r7, #6]
 800e168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	4619      	mov	r1, r3
 800e170:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e174:	f000 fd60 	bl	800ec38 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e178:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e17c:	f000 f88a 	bl	800e294 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e180:	463b      	mov	r3, r7
 800e182:	2204      	movs	r2, #4
 800e184:	4619      	mov	r1, r3
 800e186:	f640 0019 	movw	r0, #2073	; 0x819
 800e18a:	f000 fd9f 	bl	800eccc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800e18e:	2000      	movs	r0, #0
 800e190:	f000 f844 	bl	800e21c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800e194:	79fb      	ldrb	r3, [r7, #7]
 800e196:	4619      	mov	r1, r3
 800e198:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e19c:	f000 fd4c 	bl	800ec38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800e1a0:	79bb      	ldrb	r3, [r7, #6]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e1a8:	f000 fd46 	bl	800ec38 <SUBGRF_WriteRegister>

    return number;
 800e1ac:	683b      	ldr	r3, [r7, #0]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	f001 fa10 	bl	800f5e6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e1c6:	2002      	movs	r0, #2
 800e1c8:	f000 fe8d 	bl	800eee6 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e1cc:	793b      	ldrb	r3, [r7, #4]
 800e1ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e1d8:	793b      	ldrb	r3, [r7, #4]
 800e1da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e1e2:	b25b      	sxtb	r3, r3
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800e1e8:	793b      	ldrb	r3, [r7, #4]
 800e1ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	b25b      	sxtb	r3, r3
 800e1f6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e1f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800e1fa:	f107 030f 	add.w	r3, r7, #15
 800e1fe:	2201      	movs	r2, #1
 800e200:	4619      	mov	r1, r3
 800e202:	2084      	movs	r0, #132	; 0x84
 800e204:	f000 fdc8 	bl	800ed98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800e208:	4b03      	ldr	r3, [pc, #12]	; (800e218 <SUBGRF_SetSleep+0x60>)
 800e20a:	2200      	movs	r2, #0
 800e20c:	701a      	strb	r2, [r3, #0]
}
 800e20e:	bf00      	nop
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20001ea0 	.word	0x20001ea0

0800e21c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	4603      	mov	r3, r0
 800e224:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800e226:	1dfb      	adds	r3, r7, #7
 800e228:	2201      	movs	r2, #1
 800e22a:	4619      	mov	r1, r3
 800e22c:	2080      	movs	r0, #128	; 0x80
 800e22e:	f000 fdb3 	bl	800ed98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800e232:	79fb      	ldrb	r3, [r7, #7]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d103      	bne.n	800e240 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800e238:	4b05      	ldr	r3, [pc, #20]	; (800e250 <SUBGRF_SetStandby+0x34>)
 800e23a:	2201      	movs	r2, #1
 800e23c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800e23e:	e002      	b.n	800e246 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800e240:	4b03      	ldr	r3, [pc, #12]	; (800e250 <SUBGRF_SetStandby+0x34>)
 800e242:	2202      	movs	r2, #2
 800e244:	701a      	strb	r2, [r3, #0]
}
 800e246:	bf00      	nop
 800e248:	3708      	adds	r7, #8
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20001ea0 	.word	0x20001ea0

0800e254 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800e25c:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <SUBGRF_SetTx+0x3c>)
 800e25e:	2204      	movs	r2, #4
 800e260:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	0c1b      	lsrs	r3, r3, #16
 800e266:	b2db      	uxtb	r3, r3
 800e268:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	b2db      	uxtb	r3, r3
 800e276:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800e278:	f107 030c 	add.w	r3, r7, #12
 800e27c:	2203      	movs	r2, #3
 800e27e:	4619      	mov	r1, r3
 800e280:	2083      	movs	r0, #131	; 0x83
 800e282:	f000 fd89 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	20001ea0 	.word	0x20001ea0

0800e294 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800e29c:	4b0c      	ldr	r3, [pc, #48]	; (800e2d0 <SUBGRF_SetRx+0x3c>)
 800e29e:	2205      	movs	r2, #5
 800e2a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	0c1b      	lsrs	r3, r3, #16
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	0a1b      	lsrs	r3, r3, #8
 800e2ae:	b2db      	uxtb	r3, r3
 800e2b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800e2b8:	f107 030c 	add.w	r3, r7, #12
 800e2bc:	2203      	movs	r2, #3
 800e2be:	4619      	mov	r1, r3
 800e2c0:	2082      	movs	r0, #130	; 0x82
 800e2c2:	f000 fd69 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e2c6:	bf00      	nop
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	20001ea0 	.word	0x20001ea0

0800e2d4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800e2dc:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <SUBGRF_SetRxBoosted+0x44>)
 800e2de:	2205      	movs	r2, #5
 800e2e0:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800e2e2:	2197      	movs	r1, #151	; 0x97
 800e2e4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800e2e8:	f000 fca6 	bl	800ec38 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	0c1b      	lsrs	r3, r3, #16
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800e302:	f107 030c 	add.w	r3, r7, #12
 800e306:	2203      	movs	r2, #3
 800e308:	4619      	mov	r1, r3
 800e30a:	2082      	movs	r0, #130	; 0x82
 800e30c:	f000 fd44 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e310:	bf00      	nop
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	20001ea0 	.word	0x20001ea0

0800e31c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	0c1b      	lsrs	r3, r3, #16
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	0a1b      	lsrs	r3, r3, #8
 800e332:	b2db      	uxtb	r3, r3
 800e334:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	0c1b      	lsrs	r3, r3, #16
 800e340:	b2db      	uxtb	r3, r3
 800e342:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	0a1b      	lsrs	r3, r3, #8
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800e352:	f107 0308 	add.w	r3, r7, #8
 800e356:	2206      	movs	r2, #6
 800e358:	4619      	mov	r1, r3
 800e35a:	2094      	movs	r0, #148	; 0x94
 800e35c:	f000 fd1c 	bl	800ed98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800e360:	4b03      	ldr	r3, [pc, #12]	; (800e370 <SUBGRF_SetRxDutyCycle+0x54>)
 800e362:	2206      	movs	r2, #6
 800e364:	701a      	strb	r2, [r3, #0]
}
 800e366:	bf00      	nop
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	20001ea0 	.word	0x20001ea0

0800e374 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800e378:	2200      	movs	r2, #0
 800e37a:	2100      	movs	r1, #0
 800e37c:	20c5      	movs	r0, #197	; 0xc5
 800e37e:	f000 fd0b 	bl	800ed98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800e382:	4b02      	ldr	r3, [pc, #8]	; (800e38c <SUBGRF_SetCad+0x18>)
 800e384:	2207      	movs	r2, #7
 800e386:	701a      	strb	r2, [r3, #0]
}
 800e388:	bf00      	nop
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	20001ea0 	.word	0x20001ea0

0800e390 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800e394:	2200      	movs	r2, #0
 800e396:	2100      	movs	r1, #0
 800e398:	20d1      	movs	r0, #209	; 0xd1
 800e39a:	f000 fcfd 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e39e:	bf00      	nop
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	20d2      	movs	r0, #210	; 0xd2
 800e3ac:	f000 fcf4 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e3b0:	bf00      	nop
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800e3be:	1dfb      	adds	r3, r7, #7
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	209f      	movs	r0, #159	; 0x9f
 800e3c6:	f000 fce7 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e3ca:	bf00      	nop
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	4603      	mov	r3, r0
 800e3da:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e3dc:	1dfb      	adds	r3, r7, #7
 800e3de:	2201      	movs	r2, #1
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	20a0      	movs	r0, #160	; 0xa0
 800e3e4:	f000 fcd8 	bl	800ed98 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	2b3f      	cmp	r3, #63	; 0x3f
 800e3ec:	d91c      	bls.n	800e428 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	085b      	lsrs	r3, r3, #1
 800e3f2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800e3fc:	e005      	b.n	800e40a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	089b      	lsrs	r3, r3, #2
 800e402:	73fb      	strb	r3, [r7, #15]
            exp++;
 800e404:	7bbb      	ldrb	r3, [r7, #14]
 800e406:	3301      	adds	r3, #1
 800e408:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800e40a:	7bfb      	ldrb	r3, [r7, #15]
 800e40c:	2b1f      	cmp	r3, #31
 800e40e:	d8f6      	bhi.n	800e3fe <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	b2da      	uxtb	r2, r3
 800e416:	7bbb      	ldrb	r3, [r7, #14]
 800e418:	4413      	add	r3, r2
 800e41a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800e41c:	7b7b      	ldrb	r3, [r7, #13]
 800e41e:	4619      	mov	r1, r3
 800e420:	f240 7006 	movw	r0, #1798	; 0x706
 800e424:	f000 fc08 	bl	800ec38 <SUBGRF_WriteRegister>
    }
}
 800e428:	bf00      	nop
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800e436:	f001 f8f9 	bl	800f62c <RBI_IsDCDC>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d102      	bne.n	800e446 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800e440:	2301      	movs	r3, #1
 800e442:	71fb      	strb	r3, [r7, #7]
 800e444:	e001      	b.n	800e44a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800e446:	2300      	movs	r3, #0
 800e448:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800e44a:	1dfb      	adds	r3, r7, #7
 800e44c:	2201      	movs	r2, #1
 800e44e:	4619      	mov	r1, r3
 800e450:	2096      	movs	r0, #150	; 0x96
 800e452:	f000 fca1 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e456:	bf00      	nop
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b084      	sub	sp, #16
 800e462:	af00      	add	r7, sp, #0
 800e464:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e466:	793b      	ldrb	r3, [r7, #4]
 800e468:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	019b      	lsls	r3, r3, #6
 800e470:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800e472:	793b      	ldrb	r3, [r7, #4]
 800e474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e47c:	b25b      	sxtb	r3, r3
 800e47e:	4313      	orrs	r3, r2
 800e480:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800e482:	793b      	ldrb	r3, [r7, #4]
 800e484:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800e48c:	b25b      	sxtb	r3, r3
 800e48e:	4313      	orrs	r3, r2
 800e490:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800e492:	793b      	ldrb	r3, [r7, #4]
 800e494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800e49c:	b25b      	sxtb	r3, r3
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800e4a2:	793b      	ldrb	r3, [r7, #4]
 800e4a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800e4ac:	b25b      	sxtb	r3, r3
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800e4b2:	793b      	ldrb	r3, [r7, #4]
 800e4b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e4b8:	b2db      	uxtb	r3, r3
 800e4ba:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800e4bc:	b25b      	sxtb	r3, r3
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800e4c2:	793b      	ldrb	r3, [r7, #4]
 800e4c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	b25b      	sxtb	r3, r3
 800e4d0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800e4d2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800e4d4:	f107 030f 	add.w	r3, r7, #15
 800e4d8:	2201      	movs	r2, #1
 800e4da:	4619      	mov	r1, r3
 800e4dc:	2089      	movs	r0, #137	; 0x89
 800e4de:	f000 fc5b 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e4e2:	bf00      	nop
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
	...

0800e4ec <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a1b      	ldr	r2, [pc, #108]	; (800e564 <SUBGRF_CalibrateImage+0x78>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d904      	bls.n	800e506 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800e4fc:	23e1      	movs	r3, #225	; 0xe1
 800e4fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800e500:	23e9      	movs	r3, #233	; 0xe9
 800e502:	737b      	strb	r3, [r7, #13]
 800e504:	e022      	b.n	800e54c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a17      	ldr	r2, [pc, #92]	; (800e568 <SUBGRF_CalibrateImage+0x7c>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d904      	bls.n	800e518 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800e50e:	23d7      	movs	r3, #215	; 0xd7
 800e510:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800e512:	23db      	movs	r3, #219	; 0xdb
 800e514:	737b      	strb	r3, [r7, #13]
 800e516:	e019      	b.n	800e54c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4a14      	ldr	r2, [pc, #80]	; (800e56c <SUBGRF_CalibrateImage+0x80>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d904      	bls.n	800e52a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800e520:	23c1      	movs	r3, #193	; 0xc1
 800e522:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800e524:	23c5      	movs	r3, #197	; 0xc5
 800e526:	737b      	strb	r3, [r7, #13]
 800e528:	e010      	b.n	800e54c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a10      	ldr	r2, [pc, #64]	; (800e570 <SUBGRF_CalibrateImage+0x84>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d904      	bls.n	800e53c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800e532:	2375      	movs	r3, #117	; 0x75
 800e534:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800e536:	2381      	movs	r3, #129	; 0x81
 800e538:	737b      	strb	r3, [r7, #13]
 800e53a:	e007      	b.n	800e54c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	4a0d      	ldr	r2, [pc, #52]	; (800e574 <SUBGRF_CalibrateImage+0x88>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d903      	bls.n	800e54c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800e544:	236b      	movs	r3, #107	; 0x6b
 800e546:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800e548:	236f      	movs	r3, #111	; 0x6f
 800e54a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800e54c:	f107 030c 	add.w	r3, r7, #12
 800e550:	2202      	movs	r2, #2
 800e552:	4619      	mov	r1, r3
 800e554:	2098      	movs	r0, #152	; 0x98
 800e556:	f000 fc1f 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e55a:	bf00      	nop
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	35a4e900 	.word	0x35a4e900
 800e568:	32a9f880 	.word	0x32a9f880
 800e56c:	2de54480 	.word	0x2de54480
 800e570:	1b6b0b00 	.word	0x1b6b0b00
 800e574:	1954fc40 	.word	0x1954fc40

0800e578 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800e578:	b590      	push	{r4, r7, lr}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4604      	mov	r4, r0
 800e580:	4608      	mov	r0, r1
 800e582:	4611      	mov	r1, r2
 800e584:	461a      	mov	r2, r3
 800e586:	4623      	mov	r3, r4
 800e588:	71fb      	strb	r3, [r7, #7]
 800e58a:	4603      	mov	r3, r0
 800e58c:	71bb      	strb	r3, [r7, #6]
 800e58e:	460b      	mov	r3, r1
 800e590:	717b      	strb	r3, [r7, #5]
 800e592:	4613      	mov	r3, r2
 800e594:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800e596:	79fb      	ldrb	r3, [r7, #7]
 800e598:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800e59a:	79bb      	ldrb	r3, [r7, #6]
 800e59c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800e59e:	797b      	ldrb	r3, [r7, #5]
 800e5a0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800e5a2:	793b      	ldrb	r3, [r7, #4]
 800e5a4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800e5a6:	f107 030c 	add.w	r3, r7, #12
 800e5aa:	2204      	movs	r2, #4
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	2095      	movs	r0, #149	; 0x95
 800e5b0:	f000 fbf2 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e5b4:	bf00      	nop
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd90      	pop	{r4, r7, pc}

0800e5bc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800e5bc:	b590      	push	{r4, r7, lr}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	4608      	mov	r0, r1
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	4623      	mov	r3, r4
 800e5cc:	80fb      	strh	r3, [r7, #6]
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	80bb      	strh	r3, [r7, #4]
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	807b      	strh	r3, [r7, #2]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800e5da:	88fb      	ldrh	r3, [r7, #6]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800e5ea:	88bb      	ldrh	r3, [r7, #4]
 800e5ec:	0a1b      	lsrs	r3, r3, #8
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800e5f4:	88bb      	ldrh	r3, [r7, #4]
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800e5fa:	887b      	ldrh	r3, [r7, #2]
 800e5fc:	0a1b      	lsrs	r3, r3, #8
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	b2db      	uxtb	r3, r3
 800e602:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800e604:	887b      	ldrh	r3, [r7, #2]
 800e606:	b2db      	uxtb	r3, r3
 800e608:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800e60a:	883b      	ldrh	r3, [r7, #0]
 800e60c:	0a1b      	lsrs	r3, r3, #8
 800e60e:	b29b      	uxth	r3, r3
 800e610:	b2db      	uxtb	r3, r3
 800e612:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800e614:	883b      	ldrh	r3, [r7, #0]
 800e616:	b2db      	uxtb	r3, r3
 800e618:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800e61a:	f107 0308 	add.w	r3, r7, #8
 800e61e:	2208      	movs	r2, #8
 800e620:	4619      	mov	r1, r3
 800e622:	2008      	movs	r0, #8
 800e624:	f000 fbb8 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e628:	bf00      	nop
 800e62a:	3714      	adds	r7, #20
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd90      	pop	{r4, r7, pc}

0800e630 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	6039      	str	r1, [r7, #0]
 800e63a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800e63c:	79fb      	ldrb	r3, [r7, #7]
 800e63e:	f003 0307 	and.w	r3, r3, #7
 800e642:	b2db      	uxtb	r3, r3
 800e644:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	0c1b      	lsrs	r3, r3, #16
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	0a1b      	lsrs	r3, r3, #8
 800e652:	b2db      	uxtb	r3, r3
 800e654:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800e65c:	f107 030c 	add.w	r3, r7, #12
 800e660:	2204      	movs	r2, #4
 800e662:	4619      	mov	r1, r3
 800e664:	2097      	movs	r0, #151	; 0x97
 800e666:	f000 fb97 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e66a:	bf00      	nop
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800e674:	b5b0      	push	{r4, r5, r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800e680:	4b1b      	ldr	r3, [pc, #108]	; (800e6f0 <SUBGRF_SetRfFrequency+0x7c>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	f083 0301 	eor.w	r3, r3, #1
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d005      	beq.n	800e69a <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ff2c 	bl	800e4ec <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800e694:	4b16      	ldr	r3, [pc, #88]	; (800e6f0 <SUBGRF_SetRfFrequency+0x7c>)
 800e696:	2201      	movs	r2, #1
 800e698:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	461a      	mov	r2, r3
 800e69e:	f04f 0300 	mov.w	r3, #0
 800e6a2:	09d5      	lsrs	r5, r2, #7
 800e6a4:	0654      	lsls	r4, r2, #25
 800e6a6:	4a13      	ldr	r2, [pc, #76]	; (800e6f4 <SUBGRF_SetRfFrequency+0x80>)
 800e6a8:	f04f 0300 	mov.w	r3, #0
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	f7f2 fae2 	bl	8000c78 <__aeabi_uldivmod>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4613      	mov	r3, r2
 800e6ba:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	0e1b      	lsrs	r3, r3, #24
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	0c1b      	lsrs	r3, r3, #16
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	0a1b      	lsrs	r3, r3, #8
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800e6da:	f107 0308 	add.w	r3, r7, #8
 800e6de:	2204      	movs	r2, #4
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	2086      	movs	r0, #134	; 0x86
 800e6e4:	f000 fb58 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e6e8:	bf00      	nop
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bdb0      	pop	{r4, r5, r7, pc}
 800e6f0:	20001ea8 	.word	0x20001ea8
 800e6f4:	01e84800 	.word	0x01e84800

0800e6f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800e702:	79fa      	ldrb	r2, [r7, #7]
 800e704:	4b09      	ldr	r3, [pc, #36]	; (800e72c <SUBGRF_SetPacketType+0x34>)
 800e706:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800e708:	79fb      	ldrb	r3, [r7, #7]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d104      	bne.n	800e718 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800e70e:	2100      	movs	r1, #0
 800e710:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800e714:	f000 fa90 	bl	800ec38 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800e718:	1dfb      	adds	r3, r7, #7
 800e71a:	2201      	movs	r2, #1
 800e71c:	4619      	mov	r1, r3
 800e71e:	208a      	movs	r0, #138	; 0x8a
 800e720:	f000 fb3a 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	20001ea1 	.word	0x20001ea1

0800e730 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800e730:	b480      	push	{r7}
 800e732:	af00      	add	r7, sp, #0
    return PacketType;
 800e734:	4b02      	ldr	r3, [pc, #8]	; (800e740 <SUBGRF_GetPacketType+0x10>)
 800e736:	781b      	ldrb	r3, [r3, #0]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bc80      	pop	{r7}
 800e73e:	4770      	bx	lr
 800e740:	20001ea1 	.word	0x20001ea1

0800e744 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	71fb      	strb	r3, [r7, #7]
 800e74e:	460b      	mov	r3, r1
 800e750:	71bb      	strb	r3, [r7, #6]
 800e752:	4613      	mov	r3, r2
 800e754:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d124      	bne.n	800e7a6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800e75c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e760:	2b0f      	cmp	r3, #15
 800e762:	d106      	bne.n	800e772 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800e764:	2301      	movs	r3, #1
 800e766:	2201      	movs	r2, #1
 800e768:	2100      	movs	r1, #0
 800e76a:	2006      	movs	r0, #6
 800e76c:	f7ff ff04 	bl	800e578 <SUBGRF_SetPaConfig>
 800e770:	e005      	b.n	800e77e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800e772:	2301      	movs	r3, #1
 800e774:	2201      	movs	r2, #1
 800e776:	2100      	movs	r1, #0
 800e778:	2004      	movs	r0, #4
 800e77a:	f7ff fefd 	bl	800e578 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800e77e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e782:	2b0d      	cmp	r3, #13
 800e784:	dd02      	ble.n	800e78c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800e786:	230e      	movs	r3, #14
 800e788:	71bb      	strb	r3, [r7, #6]
 800e78a:	e006      	b.n	800e79a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800e78c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e790:	f113 0f11 	cmn.w	r3, #17
 800e794:	da01      	bge.n	800e79a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800e796:	23ef      	movs	r3, #239	; 0xef
 800e798:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800e79a:	2118      	movs	r1, #24
 800e79c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800e7a0:	f000 fa4a 	bl	800ec38 <SUBGRF_WriteRegister>
 800e7a4:	e025      	b.n	800e7f2 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800e7a6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800e7aa:	f000 fa59 	bl	800ec60 <SUBGRF_ReadRegister>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f043 031e 	orr.w	r3, r3, #30
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800e7bc:	f000 fa3c 	bl	800ec38 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	2107      	movs	r1, #7
 800e7c6:	2004      	movs	r0, #4
 800e7c8:	f7ff fed6 	bl	800e578 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800e7cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e7d0:	2b16      	cmp	r3, #22
 800e7d2:	dd02      	ble.n	800e7da <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800e7d4:	2316      	movs	r3, #22
 800e7d6:	71bb      	strb	r3, [r7, #6]
 800e7d8:	e006      	b.n	800e7e8 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800e7da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e7de:	f113 0f09 	cmn.w	r3, #9
 800e7e2:	da01      	bge.n	800e7e8 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800e7e4:	23f7      	movs	r3, #247	; 0xf7
 800e7e6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800e7e8:	2138      	movs	r1, #56	; 0x38
 800e7ea:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800e7ee:	f000 fa23 	bl	800ec38 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800e7f2:	79bb      	ldrb	r3, [r7, #6]
 800e7f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800e7f6:	797b      	ldrb	r3, [r7, #5]
 800e7f8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800e7fa:	f107 030c 	add.w	r3, r7, #12
 800e7fe:	2202      	movs	r2, #2
 800e800:	4619      	mov	r1, r3
 800e802:	208e      	movs	r0, #142	; 0x8e
 800e804:	f000 fac8 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800e810:	b5b0      	push	{r4, r5, r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e81c:	4a5e      	ldr	r2, [pc, #376]	; (800e998 <SUBGRF_SetModulationParams+0x188>)
 800e81e:	f107 0308 	add.w	r3, r7, #8
 800e822:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e826:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	4b5b      	ldr	r3, [pc, #364]	; (800e99c <SUBGRF_SetModulationParams+0x18c>)
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	429a      	cmp	r2, r3
 800e834:	d004      	beq.n	800e840 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	781b      	ldrb	r3, [r3, #0]
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7ff ff5c 	bl	800e6f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b03      	cmp	r3, #3
 800e846:	f200 80a2 	bhi.w	800e98e <SUBGRF_SetModulationParams+0x17e>
 800e84a:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <SUBGRF_SetModulationParams+0x40>)
 800e84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e850:	0800e861 	.word	0x0800e861
 800e854:	0800e91d 	.word	0x0800e91d
 800e858:	0800e8df 	.word	0x0800e8df
 800e85c:	0800e94b 	.word	0x0800e94b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800e860:	2308      	movs	r3, #8
 800e862:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4a4d      	ldr	r2, [pc, #308]	; (800e9a0 <SUBGRF_SetModulationParams+0x190>)
 800e86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e86e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	0c1b      	lsrs	r3, r3, #16
 800e874:	b2db      	uxtb	r3, r3
 800e876:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	0a1b      	lsrs	r3, r3, #8
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	b2db      	uxtb	r3, r3
 800e884:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7b1b      	ldrb	r3, [r3, #12]
 800e88a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	7b5b      	ldrb	r3, [r3, #13]
 800e890:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	461a      	mov	r2, r3
 800e898:	f04f 0300 	mov.w	r3, #0
 800e89c:	09d5      	lsrs	r5, r2, #7
 800e89e:	0654      	lsls	r4, r2, #25
 800e8a0:	4a40      	ldr	r2, [pc, #256]	; (800e9a4 <SUBGRF_SetModulationParams+0x194>)
 800e8a2:	f04f 0300 	mov.w	r3, #0
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7f2 f9e5 	bl	8000c78 <__aeabi_uldivmod>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	0c1b      	lsrs	r3, r3, #16
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	0a1b      	lsrs	r3, r3, #8
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e8cc:	7cfb      	ldrb	r3, [r7, #19]
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	f107 0308 	add.w	r3, r7, #8
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	208b      	movs	r0, #139	; 0x8b
 800e8d8:	f000 fa5e 	bl	800ed98 <SUBGRF_WriteCommand>
        break;
 800e8dc:	e058      	b.n	800e990 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800e8de:	2304      	movs	r3, #4
 800e8e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	691b      	ldr	r3, [r3, #16]
 800e8e6:	4a2e      	ldr	r2, [pc, #184]	; (800e9a0 <SUBGRF_SetModulationParams+0x190>)
 800e8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	0c1b      	lsrs	r3, r3, #16
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	0a1b      	lsrs	r3, r3, #8
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	b2db      	uxtb	r3, r3
 800e902:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e90a:	7cfb      	ldrb	r3, [r7, #19]
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	4619      	mov	r1, r3
 800e914:	208b      	movs	r0, #139	; 0x8b
 800e916:	f000 fa3f 	bl	800ed98 <SUBGRF_WriteCommand>
        break;
 800e91a:	e039      	b.n	800e990 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800e91c:	2304      	movs	r3, #4
 800e91e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	7e1b      	ldrb	r3, [r3, #24]
 800e924:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	7e5b      	ldrb	r3, [r3, #25]
 800e92a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	7e9b      	ldrb	r3, [r3, #26]
 800e930:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	7edb      	ldrb	r3, [r3, #27]
 800e936:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e938:	7cfb      	ldrb	r3, [r7, #19]
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	f107 0308 	add.w	r3, r7, #8
 800e940:	4619      	mov	r1, r3
 800e942:	208b      	movs	r0, #139	; 0x8b
 800e944:	f000 fa28 	bl	800ed98 <SUBGRF_WriteCommand>

        break;
 800e948:	e022      	b.n	800e990 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800e94a:	2305      	movs	r3, #5
 800e94c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	4a13      	ldr	r2, [pc, #76]	; (800e9a0 <SUBGRF_SetModulationParams+0x190>)
 800e954:	fbb2 f3f3 	udiv	r3, r2, r3
 800e958:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	0c1b      	lsrs	r3, r3, #16
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	0a1b      	lsrs	r3, r3, #8
 800e966:	b2db      	uxtb	r3, r3
 800e968:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7b1b      	ldrb	r3, [r3, #12]
 800e974:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7b5b      	ldrb	r3, [r3, #13]
 800e97a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800e97c:	7cfb      	ldrb	r3, [r7, #19]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	f107 0308 	add.w	r3, r7, #8
 800e984:	4619      	mov	r1, r3
 800e986:	208b      	movs	r0, #139	; 0x8b
 800e988:	f000 fa06 	bl	800ed98 <SUBGRF_WriteCommand>
        break;
 800e98c:	e000      	b.n	800e990 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 800e98e:	bf00      	nop
    }
}
 800e990:	bf00      	nop
 800e992:	3718      	adds	r7, #24
 800e994:	46bd      	mov	sp, r7
 800e996:	bdb0      	pop	{r4, r5, r7, pc}
 800e998:	080105bc 	.word	0x080105bc
 800e99c:	20001ea1 	.word	0x20001ea1
 800e9a0:	3d090000 	.word	0x3d090000
 800e9a4:	01e84800 	.word	0x01e84800

0800e9a8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800e9b4:	4a48      	ldr	r2, [pc, #288]	; (800ead8 <SUBGRF_SetPacketParams+0x130>)
 800e9b6:	f107 030c 	add.w	r3, r7, #12
 800e9ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800e9bc:	c303      	stmia	r3!, {r0, r1}
 800e9be:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	781a      	ldrb	r2, [r3, #0]
 800e9c4:	4b45      	ldr	r3, [pc, #276]	; (800eadc <SUBGRF_SetPacketParams+0x134>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d004      	beq.n	800e9d6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fe91 	bl	800e6f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	781b      	ldrb	r3, [r3, #0]
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	d878      	bhi.n	800ead0 <SUBGRF_SetPacketParams+0x128>
 800e9de:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <SUBGRF_SetPacketParams+0x3c>)
 800e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e4:	0800e9f5 	.word	0x0800e9f5
 800e9e8:	0800ea85 	.word	0x0800ea85
 800e9ec:	0800ea79 	.word	0x0800ea79
 800e9f0:	0800e9f5 	.word	0x0800e9f5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7a5b      	ldrb	r3, [r3, #9]
 800e9f8:	2bf1      	cmp	r3, #241	; 0xf1
 800e9fa:	d10a      	bne.n	800ea12 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800e9fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ea00:	f7ff fb20 	bl	800e044 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800ea04:	f248 0005 	movw	r0, #32773	; 0x8005
 800ea08:	f7ff fb3c 	bl	800e084 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	75bb      	strb	r3, [r7, #22]
 800ea10:	e011      	b.n	800ea36 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7a5b      	ldrb	r3, [r3, #9]
 800ea16:	2bf2      	cmp	r3, #242	; 0xf2
 800ea18:	d10a      	bne.n	800ea30 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800ea1a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800ea1e:	f7ff fb11 	bl	800e044 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800ea22:	f241 0021 	movw	r0, #4129	; 0x1021
 800ea26:	f7ff fb2d 	bl	800e084 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ea2a:	2306      	movs	r3, #6
 800ea2c:	75bb      	strb	r3, [r7, #22]
 800ea2e:	e002      	b.n	800ea36 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7a5b      	ldrb	r3, [r3, #9]
 800ea34:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800ea36:	2309      	movs	r3, #9
 800ea38:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	885b      	ldrh	r3, [r3, #2]
 800ea3e:	0a1b      	lsrs	r3, r3, #8
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	885b      	ldrh	r3, [r3, #2]
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	791b      	ldrb	r3, [r3, #4]
 800ea52:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	795b      	ldrb	r3, [r3, #5]
 800ea58:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	799b      	ldrb	r3, [r3, #6]
 800ea5e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	79db      	ldrb	r3, [r3, #7]
 800ea64:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7a1b      	ldrb	r3, [r3, #8]
 800ea6a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ea6c:	7dbb      	ldrb	r3, [r7, #22]
 800ea6e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7a9b      	ldrb	r3, [r3, #10]
 800ea74:	753b      	strb	r3, [r7, #20]
        break;
 800ea76:	e022      	b.n	800eabe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	7b1b      	ldrb	r3, [r3, #12]
 800ea80:	733b      	strb	r3, [r7, #12]
        break;
 800ea82:	e01c      	b.n	800eabe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ea84:	2306      	movs	r3, #6
 800ea86:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	89db      	ldrh	r3, [r3, #14]
 800ea8c:	0a1b      	lsrs	r3, r3, #8
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	89db      	ldrh	r3, [r3, #14]
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7c1a      	ldrb	r2, [r3, #16]
 800eaa0:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <SUBGRF_SetPacketParams+0x138>)
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	7019      	strb	r1, [r3, #0]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7c5b      	ldrb	r3, [r3, #17]
 800eaae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	7c9b      	ldrb	r3, [r3, #18]
 800eab4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	7cdb      	ldrb	r3, [r3, #19]
 800eaba:	747b      	strb	r3, [r7, #17]
        break;
 800eabc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	f107 030c 	add.w	r3, r7, #12
 800eac6:	4619      	mov	r1, r3
 800eac8:	208c      	movs	r0, #140	; 0x8c
 800eaca:	f000 f965 	bl	800ed98 <SUBGRF_WriteCommand>
 800eace:	e000      	b.n	800ead2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800ead0:	bf00      	nop
}
 800ead2:	3718      	adds	r7, #24
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	080105c4 	.word	0x080105c4
 800eadc:	20001ea1 	.word	0x20001ea1
 800eae0:	20001ea2 	.word	0x20001ea2

0800eae4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	460a      	mov	r2, r1
 800eaee:	71fb      	strb	r3, [r7, #7]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800eaf4:	79fb      	ldrb	r3, [r7, #7]
 800eaf6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800eaf8:	79bb      	ldrb	r3, [r7, #6]
 800eafa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800eafc:	f107 030c 	add.w	r3, r7, #12
 800eb00:	2202      	movs	r2, #2
 800eb02:	4619      	mov	r1, r3
 800eb04:	208f      	movs	r0, #143	; 0x8f
 800eb06:	f000 f947 	bl	800ed98 <SUBGRF_WriteCommand>
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b082      	sub	sp, #8
 800eb16:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800eb1c:	1d3b      	adds	r3, r7, #4
 800eb1e:	2201      	movs	r2, #1
 800eb20:	4619      	mov	r1, r3
 800eb22:	2015      	movs	r0, #21
 800eb24:	f000 f95a 	bl	800eddc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800eb28:	793b      	ldrb	r3, [r7, #4]
 800eb2a:	425b      	negs	r3, r3
 800eb2c:	105b      	asrs	r3, r3, #1
 800eb2e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800eb30:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3708      	adds	r7, #8
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800eb46:	f107 030c 	add.w	r3, r7, #12
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	2013      	movs	r0, #19
 800eb50:	f000 f944 	bl	800eddc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800eb54:	f7ff fdec 	bl	800e730 <SUBGRF_GetPacketType>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d10d      	bne.n	800eb7a <SUBGRF_GetRxBufferStatus+0x3e>
 800eb5e:	4b0c      	ldr	r3, [pc, #48]	; (800eb90 <SUBGRF_GetRxBufferStatus+0x54>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d108      	bne.n	800eb7a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800eb68:	f240 7002 	movw	r0, #1794	; 0x702
 800eb6c:	f000 f878 	bl	800ec60 <SUBGRF_ReadRegister>
 800eb70:	4603      	mov	r3, r0
 800eb72:	461a      	mov	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	701a      	strb	r2, [r3, #0]
 800eb78:	e002      	b.n	800eb80 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800eb7a:	7b3a      	ldrb	r2, [r7, #12]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800eb80:	7b7a      	ldrb	r2, [r7, #13]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	701a      	strb	r2, [r3, #0]
}
 800eb86:	bf00      	nop
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20001ea2 	.word	0x20001ea2

0800eb94 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800eb9c:	f107 030c 	add.w	r3, r7, #12
 800eba0:	2203      	movs	r2, #3
 800eba2:	4619      	mov	r1, r3
 800eba4:	2014      	movs	r0, #20
 800eba6:	f000 f919 	bl	800eddc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ebaa:	f7ff fdc1 	bl	800e730 <SUBGRF_GetPacketType>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <SUBGRF_GetPacketStatus+0x30>
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d013      	beq.n	800ebea <SUBGRF_GetPacketStatus+0x56>
 800ebc2:	e02a      	b.n	800ec1a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ebc4:	7b3a      	ldrb	r2, [r7, #12]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ebca:	7b7b      	ldrb	r3, [r7, #13]
 800ebcc:	425b      	negs	r3, r3
 800ebce:	105b      	asrs	r3, r3, #1
 800ebd0:	b25a      	sxtb	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ebd6:	7bbb      	ldrb	r3, [r7, #14]
 800ebd8:	425b      	negs	r3, r3
 800ebda:	105b      	asrs	r3, r3, #1
 800ebdc:	b25a      	sxtb	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	609a      	str	r2, [r3, #8]
            break;
 800ebe8:	e020      	b.n	800ec2c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ebea:	7b3b      	ldrb	r3, [r7, #12]
 800ebec:	425b      	negs	r3, r3
 800ebee:	105b      	asrs	r3, r3, #1
 800ebf0:	b25a      	sxtb	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ebf6:	7b7b      	ldrb	r3, [r7, #13]
 800ebf8:	b25b      	sxtb	r3, r3
 800ebfa:	3302      	adds	r3, #2
 800ebfc:	109b      	asrs	r3, r3, #2
 800ebfe:	b25a      	sxtb	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ec04:	7bbb      	ldrb	r3, [r7, #14]
 800ec06:	425b      	negs	r3, r3
 800ec08:	105b      	asrs	r3, r3, #1
 800ec0a:	b25a      	sxtb	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ec10:	4b08      	ldr	r3, [pc, #32]	; (800ec34 <SUBGRF_GetPacketStatus+0xa0>)
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	611a      	str	r2, [r3, #16]
            break;
 800ec18:	e008      	b.n	800ec2c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ec1a:	2214      	movs	r2, #20
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 fd0f 	bl	800f642 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	220f      	movs	r2, #15
 800ec28:	701a      	strb	r2, [r3, #0]
            break;
 800ec2a:	bf00      	nop
    }
}
 800ec2c:	bf00      	nop
 800ec2e:	3710      	adds	r7, #16
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	20001ea4 	.word	0x20001ea4

0800ec38 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	4603      	mov	r3, r0
 800ec40:	460a      	mov	r2, r1
 800ec42:	80fb      	strh	r3, [r7, #6]
 800ec44:	4613      	mov	r3, r2
 800ec46:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ec48:	1d7a      	adds	r2, r7, #5
 800ec4a:	88f9      	ldrh	r1, [r7, #6]
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	4803      	ldr	r0, [pc, #12]	; (800ec5c <SUBGRF_WriteRegister+0x24>)
 800ec50:	f7f6 ffda 	bl	8005c08 <HAL_SUBGHZ_WriteRegisters>
}
 800ec54:	bf00      	nop
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20001ff0 	.word	0x20001ff0

0800ec60 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ec6a:	f107 020f 	add.w	r2, r7, #15
 800ec6e:	88f9      	ldrh	r1, [r7, #6]
 800ec70:	2301      	movs	r3, #1
 800ec72:	4804      	ldr	r0, [pc, #16]	; (800ec84 <SUBGRF_ReadRegister+0x24>)
 800ec74:	f7f7 f827 	bl	8005cc6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ec78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20001ff0 	.word	0x20001ff0

0800ec88 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b086      	sub	sp, #24
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	4603      	mov	r3, r0
 800ec90:	6039      	str	r1, [r7, #0]
 800ec92:	80fb      	strh	r3, [r7, #6]
 800ec94:	4613      	mov	r3, r2
 800ec96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec98:	f3ef 8310 	mrs	r3, PRIMASK
 800ec9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800eca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eca2:	b672      	cpsid	i
}
 800eca4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800eca6:	88bb      	ldrh	r3, [r7, #4]
 800eca8:	88f9      	ldrh	r1, [r7, #6]
 800ecaa:	683a      	ldr	r2, [r7, #0]
 800ecac:	4806      	ldr	r0, [pc, #24]	; (800ecc8 <SUBGRF_WriteRegisters+0x40>)
 800ecae:	f7f6 ffab 	bl	8005c08 <HAL_SUBGHZ_WriteRegisters>
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f383 8810 	msr	PRIMASK, r3
}
 800ecbc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ecbe:	bf00      	nop
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20001ff0 	.word	0x20001ff0

0800eccc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	6039      	str	r1, [r7, #0]
 800ecd6:	80fb      	strh	r3, [r7, #6]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecdc:	f3ef 8310 	mrs	r3, PRIMASK
 800ece0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ece2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ece4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ece6:	b672      	cpsid	i
}
 800ece8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ecea:	88bb      	ldrh	r3, [r7, #4]
 800ecec:	88f9      	ldrh	r1, [r7, #6]
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	4806      	ldr	r0, [pc, #24]	; (800ed0c <SUBGRF_ReadRegisters+0x40>)
 800ecf2:	f7f6 ffe8 	bl	8005cc6 <HAL_SUBGHZ_ReadRegisters>
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	f383 8810 	msr	PRIMASK, r3
}
 800ed00:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ed02:	bf00      	nop
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	20001ff0 	.word	0x20001ff0

0800ed10 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4603      	mov	r3, r0
 800ed18:	6039      	str	r1, [r7, #0]
 800ed1a:	71fb      	strb	r3, [r7, #7]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed20:	f3ef 8310 	mrs	r3, PRIMASK
 800ed24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ed28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed2a:	b672      	cpsid	i
}
 800ed2c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ed2e:	79bb      	ldrb	r3, [r7, #6]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	79f9      	ldrb	r1, [r7, #7]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	4806      	ldr	r0, [pc, #24]	; (800ed50 <SUBGRF_WriteBuffer+0x40>)
 800ed38:	f7f7 f8d9 	bl	8005eee <HAL_SUBGHZ_WriteBuffer>
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	f383 8810 	msr	PRIMASK, r3
}
 800ed46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ed48:	bf00      	nop
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20001ff0 	.word	0x20001ff0

0800ed54 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	6039      	str	r1, [r7, #0]
 800ed5e:	71fb      	strb	r3, [r7, #7]
 800ed60:	4613      	mov	r3, r2
 800ed62:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed64:	f3ef 8310 	mrs	r3, PRIMASK
 800ed68:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ed6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed6e:	b672      	cpsid	i
}
 800ed70:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ed72:	79bb      	ldrb	r3, [r7, #6]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	79f9      	ldrb	r1, [r7, #7]
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	4806      	ldr	r0, [pc, #24]	; (800ed94 <SUBGRF_ReadBuffer+0x40>)
 800ed7c:	f7f7 f90a 	bl	8005f94 <HAL_SUBGHZ_ReadBuffer>
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	f383 8810 	msr	PRIMASK, r3
}
 800ed8a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ed8c:	bf00      	nop
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	20001ff0 	.word	0x20001ff0

0800ed98 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b086      	sub	sp, #24
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	6039      	str	r1, [r7, #0]
 800eda2:	71fb      	strb	r3, [r7, #7]
 800eda4:	4613      	mov	r3, r2
 800eda6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eda8:	f3ef 8310 	mrs	r3, PRIMASK
 800edac:	60fb      	str	r3, [r7, #12]
  return(result);
 800edae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800edb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edb2:	b672      	cpsid	i
}
 800edb4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800edb6:	88bb      	ldrh	r3, [r7, #4]
 800edb8:	79f9      	ldrb	r1, [r7, #7]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	4806      	ldr	r0, [pc, #24]	; (800edd8 <SUBGRF_WriteCommand+0x40>)
 800edbe:	f7f6 ffe3 	bl	8005d88 <HAL_SUBGHZ_ExecSetCmd>
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f383 8810 	msr	PRIMASK, r3
}
 800edcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800edce:	bf00      	nop
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20001ff0 	.word	0x20001ff0

0800eddc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b086      	sub	sp, #24
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	4603      	mov	r3, r0
 800ede4:	6039      	str	r1, [r7, #0]
 800ede6:	71fb      	strb	r3, [r7, #7]
 800ede8:	4613      	mov	r3, r2
 800edea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edec:	f3ef 8310 	mrs	r3, PRIMASK
 800edf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800edf2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800edf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edf6:	b672      	cpsid	i
}
 800edf8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800edfa:	88bb      	ldrh	r3, [r7, #4]
 800edfc:	79f9      	ldrb	r1, [r7, #7]
 800edfe:	683a      	ldr	r2, [r7, #0]
 800ee00:	4806      	ldr	r0, [pc, #24]	; (800ee1c <SUBGRF_ReadCommand+0x40>)
 800ee02:	f7f7 f820 	bl	8005e46 <HAL_SUBGHZ_ExecGetCmd>
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	f383 8810 	msr	PRIMASK, r3
}
 800ee10:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ee12:	bf00      	nop
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20001ff0 	.word	0x20001ff0

0800ee20 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	460a      	mov	r2, r1
 800ee2a:	71fb      	strb	r3, [r7, #7]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ee30:	2301      	movs	r3, #1
 800ee32:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ee34:	79bb      	ldrb	r3, [r7, #6]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d10d      	bne.n	800ee56 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ee3a:	79fb      	ldrb	r3, [r7, #7]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d104      	bne.n	800ee4a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ee40:	2302      	movs	r3, #2
 800ee42:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ee44:	2004      	movs	r0, #4
 800ee46:	f000 f84e 	bl	800eee6 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	d107      	bne.n	800ee60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ee50:	2303      	movs	r3, #3
 800ee52:	73fb      	strb	r3, [r7, #15]
 800ee54:	e004      	b.n	800ee60 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ee56:	79bb      	ldrb	r3, [r7, #6]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 fbbf 	bl	800f5e6 <RBI_ConfigRFSwitch>
}
 800ee68:	bf00      	nop
 800ee6a:	3710      	adds	r7, #16
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	4603      	mov	r3, r0
 800ee78:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ee7e:	f000 fbbf 	bl	800f600 <RBI_GetTxConfig>
 800ee82:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	2b02      	cmp	r3, #2
 800ee88:	d016      	beq.n	800eeb8 <SUBGRF_SetRfTxPower+0x48>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	dc16      	bgt.n	800eebe <SUBGRF_SetRfTxPower+0x4e>
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d003      	beq.n	800ee9e <SUBGRF_SetRfTxPower+0x2e>
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d00a      	beq.n	800eeb2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ee9c:	e00f      	b.n	800eebe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ee9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eea2:	2b0f      	cmp	r3, #15
 800eea4:	dd02      	ble.n	800eeac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800eea6:	2302      	movs	r3, #2
 800eea8:	73fb      	strb	r3, [r7, #15]
            break;
 800eeaa:	e009      	b.n	800eec0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800eeac:	2301      	movs	r3, #1
 800eeae:	73fb      	strb	r3, [r7, #15]
            break;
 800eeb0:	e006      	b.n	800eec0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	73fb      	strb	r3, [r7, #15]
            break;
 800eeb6:	e003      	b.n	800eec0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800eeb8:	2302      	movs	r3, #2
 800eeba:	73fb      	strb	r3, [r7, #15]
            break;
 800eebc:	e000      	b.n	800eec0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800eebe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800eec0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
 800eec6:	2202      	movs	r2, #2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7ff fc3b 	bl	800e744 <SUBGRF_SetTxParams>

    return paSelect;
 800eece:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800eed8:	b480      	push	{r7}
 800eeda:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800eedc:	2301      	movs	r3, #1
}
 800eede:	4618      	mov	r0, r3
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bc80      	pop	{r7}
 800eee4:	4770      	bx	lr

0800eee6 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800eee6:	b580      	push	{r7, lr}
 800eee8:	b084      	sub	sp, #16
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	4603      	mov	r3, r0
 800eeee:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800eef0:	f000 fb9c 	bl	800f62c <RBI_IsDCDC>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d112      	bne.n	800ef20 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800eefa:	f640 1023 	movw	r0, #2339	; 0x923
 800eefe:	f7ff feaf 	bl	800ec60 <SUBGRF_ReadRegister>
 800ef02:	4603      	mov	r3, r0
 800ef04:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	f023 0306 	bic.w	r3, r3, #6
 800ef0c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800ef0e:	7bfa      	ldrb	r2, [r7, #15]
 800ef10:	79fb      	ldrb	r3, [r7, #7]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	4619      	mov	r1, r3
 800ef18:	f640 1023 	movw	r0, #2339	; 0x923
 800ef1c:	f7ff fe8c 	bl	800ec38 <SUBGRF_WriteRegister>
  }
}
 800ef20:	bf00      	nop
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800ef36:	231f      	movs	r3, #31
 800ef38:	e016      	b.n	800ef68 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	73fb      	strb	r3, [r7, #15]
 800ef3e:	e00f      	b.n	800ef60 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800ef40:	7bfb      	ldrb	r3, [r7, #15]
 800ef42:	4a0c      	ldr	r2, [pc, #48]	; (800ef74 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ef44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d205      	bcs.n	800ef5a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800ef4e:	7bfb      	ldrb	r3, [r7, #15]
 800ef50:	4a08      	ldr	r2, [pc, #32]	; (800ef74 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800ef52:	00db      	lsls	r3, r3, #3
 800ef54:	4413      	add	r3, r2
 800ef56:	791b      	ldrb	r3, [r3, #4]
 800ef58:	e006      	b.n	800ef68 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	73fb      	strb	r3, [r7, #15]
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	2b15      	cmp	r3, #21
 800ef64:	d9ec      	bls.n	800ef40 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800ef66:	e7fe      	b.n	800ef66 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bc80      	pop	{r7}
 800ef70:	4770      	bx	lr
 800ef72:	bf00      	nop
 800ef74:	080107c4 	.word	0x080107c4

0800ef78 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b08a      	sub	sp, #40	; 0x28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800ef82:	4b36      	ldr	r3, [pc, #216]	; (800f05c <SUBGRF_GetCFO+0xe4>)
 800ef84:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800ef86:	f640 0007 	movw	r0, #2055	; 0x807
 800ef8a:	f7ff fe69 	bl	800ec60 <SUBGRF_ReadRegister>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800ef92:	7ffb      	ldrb	r3, [r7, #31]
 800ef94:	08db      	lsrs	r3, r3, #3
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	f003 0303 	and.w	r3, r3, #3
 800ef9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efa0:	4413      	add	r3, r2
 800efa2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800efa6:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800efa8:	7ffb      	ldrb	r3, [r7, #31]
 800efaa:	f003 0307 	and.w	r3, r3, #7
 800efae:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800efb0:	7fba      	ldrb	r2, [r7, #30]
 800efb2:	7f7b      	ldrb	r3, [r7, #29]
 800efb4:	3b01      	subs	r3, #1
 800efb6:	fa02 f303 	lsl.w	r3, r2, r3
 800efba:	461a      	mov	r2, r3
 800efbc:	4b28      	ldr	r3, [pc, #160]	; (800f060 <SUBGRF_GetCFO+0xe8>)
 800efbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800efc2:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800efcc:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800efce:	2301      	movs	r3, #1
 800efd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800efd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	fb02 f303 	mul.w	r3, r2, r3
 800efde:	2b07      	cmp	r3, #7
 800efe0:	d802      	bhi.n	800efe8 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 800efe2:	2302      	movs	r3, #2
 800efe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800efe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efec:	697a      	ldr	r2, [r7, #20]
 800efee:	fb02 f303 	mul.w	r3, r2, r3
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d802      	bhi.n	800effc <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 800eff6:	2304      	movs	r3, #4
 800eff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800effc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	fb02 f303 	mul.w	r3, r2, r3
 800f006:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800f008:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800f00c:	f7ff fe28 	bl	800ec60 <SUBGRF_ReadRegister>
 800f010:	4603      	mov	r3, r0
 800f012:	021b      	lsls	r3, r3, #8
 800f014:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f018:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800f01a:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800f01e:	f7ff fe1f 	bl	800ec60 <SUBGRF_ReadRegister>
 800f022:	4603      	mov	r3, r0
 800f024:	461a      	mov	r2, r3
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	4313      	orrs	r3, r2
 800f02a:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f032:	2b00      	cmp	r3, #0
 800f034:	d005      	beq.n	800f042 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800f03c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800f040:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	095b      	lsrs	r3, r3, #5
 800f046:	6a3a      	ldr	r2, [r7, #32]
 800f048:	fb02 f303 	mul.w	r3, r2, r3
 800f04c:	11da      	asrs	r2, r3, #7
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	601a      	str	r2, [r3, #0]
}
 800f052:	bf00      	nop
 800f054:	3728      	adds	r7, #40	; 0x28
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	0c0a0804 	.word	0x0c0a0804
 800f060:	01e84800 	.word	0x01e84800

0800f064 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800f064:	b480      	push	{r7}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	4603      	mov	r3, r0
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800f072:	2300      	movs	r3, #0
 800f074:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800f076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f07a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f07c:	697b      	ldr	r3, [r7, #20]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	371c      	adds	r7, #28
 800f082:	46bd      	mov	sp, r7
 800f084:	bc80      	pop	{r7}
 800f086:	4770      	bx	lr

0800f088 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800f088:	b480      	push	{r7}
 800f08a:	b087      	sub	sp, #28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	4603      	mov	r3, r0
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800f096:	2300      	movs	r3, #0
 800f098:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800f09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f09e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f0a0:	697b      	ldr	r3, [r7, #20]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	371c      	adds	r7, #28
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bc80      	pop	{r7}
 800f0aa:	4770      	bx	lr

0800f0ac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800f0b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3714      	adds	r7, #20
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bc80      	pop	{r7}
 800f0c4:	4770      	bx	lr

0800f0c6 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800f0ca:	bf00      	nop
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bc80      	pop	{r7}
 800f0d0:	4770      	bx	lr

0800f0d2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800f0d6:	2300      	movs	r3, #0
#endif
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bc80      	pop	{r7}
 800f0de:	4770      	bx	lr

0800f0e0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800f0e4:	2300      	movs	r3, #0
#endif
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bc80      	pop	{r7}
 800f0ec:	4770      	bx	lr

0800f0ee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800f0ee:	b480      	push	{r7}
 800f0f0:	b083      	sub	sp, #12
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800f0f8:	bf00      	nop
 800f0fa:	370c      	adds	r7, #12
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bc80      	pop	{r7}
 800f100:	4770      	bx	lr

0800f102 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800f102:	b480      	push	{r7}
 800f104:	b087      	sub	sp, #28
 800f106:	af00      	add	r7, sp, #0
 800f108:	60f8      	str	r0, [r7, #12]
 800f10a:	460b      	mov	r3, r1
 800f10c:	607a      	str	r2, [r7, #4]
 800f10e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800f110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f114:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800f116:	697b      	ldr	r3, [r7, #20]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	371c      	adds	r7, #28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bc80      	pop	{r7}
 800f120:	4770      	bx	lr

0800f122 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800f122:	b480      	push	{r7}
 800f124:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800f126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bc80      	pop	{r7}
 800f130:	4770      	bx	lr

0800f132 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800f132:	b480      	push	{r7}
 800f134:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800f136:	bf00      	nop
 800f138:	46bd      	mov	sp, r7
 800f13a:	bc80      	pop	{r7}
 800f13c:	4770      	bx	lr

0800f13e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800f13e:	b480      	push	{r7}
 800f140:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800f142:	bf00      	nop
 800f144:	46bd      	mov	sp, r7
 800f146:	bc80      	pop	{r7}
 800f148:	4770      	bx	lr

0800f14a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b083      	sub	sp, #12
 800f14e:	af00      	add	r7, sp, #0
 800f150:	4603      	mov	r3, r0
 800f152:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	bc80      	pop	{r7}
 800f15c:	4770      	bx	lr
	...

0800f160 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800f164:	f7f3 f916 	bl	8002394 <SystemApp_Init>
  SubghzApp_Init();
 800f168:	f000 f8b6 	bl	800f2d8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

	PacketSendCallbackRegister(packetSendCallback);
 800f16c:	4803      	ldr	r0, [pc, #12]	; (800f17c <MX_SubGHz_Phy_Init+0x1c>)
 800f16e:	f000 f923 	bl	800f3b8 <PacketSendCallbackRegister>
	PacketRecviceCallbackRegister(packetRecviceCallback);
 800f172:	4803      	ldr	r0, [pc, #12]	; (800f180 <MX_SubGHz_Phy_Init+0x20>)
 800f174:	f000 f92e 	bl	800f3d4 <PacketRecviceCallbackRegister>

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800f178:	bf00      	nop
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	0800f185 	.word	0x0800f185
 800f180:	0800f1b1 	.word	0x0800f1b1

0800f184 <packetSendCallback>:

/* USER CODE BEGIN EF */

static void packetSendCallback(uint8_t state) {
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]

	radio_tx_state = state;
 800f18e:	4a06      	ldr	r2, [pc, #24]	; (800f1a8 <packetSendCallback+0x24>)
 800f190:	79fb      	ldrb	r3, [r7, #7]
 800f192:	7013      	strb	r3, [r2, #0]

	osSemaphoreRelease(radioBinarySemHandle);
 800f194:	4b05      	ldr	r3, [pc, #20]	; (800f1ac <packetSendCallback+0x28>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7f9 fd87 	bl	8008cac <osSemaphoreRelease>

}
 800f19e:	bf00      	nop
 800f1a0:	3708      	adds	r7, #8
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20001eb0 	.word	0x20001eb0
 800f1ac:	20002394 	.word	0x20002394

0800f1b0 <packetRecviceCallback>:

static void packetRecviceCallback(uint8_t state, int16_t rssi, int8_t snr,
		uint8_t *payload, uint8_t payload_size) {
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	71fb      	strb	r3, [r7, #7]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	80bb      	strh	r3, [r7, #4]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	71bb      	strb	r3, [r7, #6]

	radio_rx_state = state;
 800f1c4:	4a0d      	ldr	r2, [pc, #52]	; (800f1fc <packetRecviceCallback+0x4c>)
 800f1c6:	79fb      	ldrb	r3, [r7, #7]
 800f1c8:	7013      	strb	r3, [r2, #0]

	rx_rssi = rssi;
 800f1ca:	4a0d      	ldr	r2, [pc, #52]	; (800f200 <packetRecviceCallback+0x50>)
 800f1cc:	88bb      	ldrh	r3, [r7, #4]
 800f1ce:	8013      	strh	r3, [r2, #0]
	rx_snr = snr;
 800f1d0:	4a0c      	ldr	r2, [pc, #48]	; (800f204 <packetRecviceCallback+0x54>)
 800f1d2:	79bb      	ldrb	r3, [r7, #6]
 800f1d4:	7013      	strb	r3, [r2, #0]
	rx_payload_size = payload_size;
 800f1d6:	4a0c      	ldr	r2, [pc, #48]	; (800f208 <packetRecviceCallback+0x58>)
 800f1d8:	7c3b      	ldrb	r3, [r7, #16]
 800f1da:	7013      	strb	r3, [r2, #0]
	memcpy(rx_payload_buffer, payload, rx_payload_size);
 800f1dc:	4b0a      	ldr	r3, [pc, #40]	; (800f208 <packetRecviceCallback+0x58>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	4809      	ldr	r0, [pc, #36]	; (800f20c <packetRecviceCallback+0x5c>)
 800f1e6:	f000 fc73 	bl	800fad0 <memcpy>

	osSemaphoreRelease(radioBinarySemHandle);
 800f1ea:	4b09      	ldr	r3, [pc, #36]	; (800f210 <packetRecviceCallback+0x60>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f9 fd5c 	bl	8008cac <osSemaphoreRelease>

}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20001eb1 	.word	0x20001eb1
 800f200:	20001eb2 	.word	0x20001eb2
 800f204:	20001eb4 	.word	0x20001eb4
 800f208:	20001eb5 	.word	0x20001eb5
 800f20c:	20001eb8 	.word	0x20001eb8
 800f210:	20002394 	.word	0x20002394

0800f214 <MX_SubGhz_Phy_Radio_Sleep>:

void MX_SubGhz_Phy_Radio_Sleep() {
 800f214:	b580      	push	{r7, lr}
 800f216:	af00      	add	r7, sp, #0

	SubghzApp_Sleep();
 800f218:	f000 f8ea 	bl	800f3f0 <SubghzApp_Sleep>

}
 800f21c:	bf00      	nop
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <MX_SubGhz_Phy_SendPacket>:

void MX_SubGhz_Phy_SendPacket(uint8_t *payload, uint8_t payload_size) {
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]

	radio_tx_state = 0x00;
 800f22c:	4b05      	ldr	r3, [pc, #20]	; (800f244 <MX_SubGhz_Phy_SendPacket+0x24>)
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
	SubghzApp_TX(payload, payload_size);
 800f232:	78fb      	ldrb	r3, [r7, #3]
 800f234:	4619      	mov	r1, r3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f8e4 	bl	800f404 <SubghzApp_TX>

}
 800f23c:	bf00      	nop
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	20001eb0 	.word	0x20001eb0

0800f248 <MX_SubGhz_Phy_Get_SendPacket_State>:

uint8_t MX_SubGhz_Phy_Get_SendPacket_State() {
 800f248:	b480      	push	{r7}
 800f24a:	af00      	add	r7, sp, #0

	return radio_tx_state;
 800f24c:	4b02      	ldr	r3, [pc, #8]	; (800f258 <MX_SubGhz_Phy_Get_SendPacket_State+0x10>)
 800f24e:	781b      	ldrb	r3, [r3, #0]

}
 800f250:	4618      	mov	r0, r3
 800f252:	46bd      	mov	sp, r7
 800f254:	bc80      	pop	{r7}
 800f256:	4770      	bx	lr
 800f258:	20001eb0 	.word	0x20001eb0

0800f25c <MX_SubGhz_Phy_RecvicePacket>:

void MX_SubGhz_Phy_RecvicePacket() {
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0

	radio_rx_state = 0x00;
 800f260:	4b03      	ldr	r3, [pc, #12]	; (800f270 <MX_SubGhz_Phy_RecvicePacket+0x14>)
 800f262:	2200      	movs	r2, #0
 800f264:	701a      	strb	r2, [r3, #0]
	SubghzApp_RX(0);
 800f266:	2000      	movs	r0, #0
 800f268:	f000 f8de 	bl	800f428 <SubghzApp_RX>

}
 800f26c:	bf00      	nop
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	20001eb1 	.word	0x20001eb1

0800f274 <MX_SubGhz_Phy_Get_RecvicePacket_State>:

uint8_t MX_SubGhz_Phy_Get_RecvicePacket_State() {
 800f274:	b480      	push	{r7}
 800f276:	af00      	add	r7, sp, #0

	return radio_rx_state;
 800f278:	4b02      	ldr	r3, [pc, #8]	; (800f284 <MX_SubGhz_Phy_Get_RecvicePacket_State+0x10>)
 800f27a:	781b      	ldrb	r3, [r3, #0]

}
 800f27c:	4618      	mov	r0, r3
 800f27e:	46bd      	mov	sp, r7
 800f280:	bc80      	pop	{r7}
 800f282:	4770      	bx	lr
 800f284:	20001eb1 	.word	0x20001eb1

0800f288 <MX_SubGhz_Phy_Get_RecvicePacket>:

void MX_SubGhz_Phy_Get_RecvicePacket(int16_t *rssi, int8_t *snr,
		uint8_t *payload, uint8_t *payload_size) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	603b      	str	r3, [r7, #0]

	*rssi = rx_rssi;
 800f296:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <MX_SubGhz_Phy_Get_RecvicePacket+0x40>)
 800f298:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	801a      	strh	r2, [r3, #0]
	*snr = rx_snr;
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <MX_SubGhz_Phy_Get_RecvicePacket+0x44>)
 800f2a2:	f993 2000 	ldrsb.w	r2, [r3]
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	701a      	strb	r2, [r3, #0]
	*payload_size = rx_payload_size;
 800f2aa:	4b09      	ldr	r3, [pc, #36]	; (800f2d0 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800f2ac:	781a      	ldrb	r2, [r3, #0]
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	701a      	strb	r2, [r3, #0]
	memcpy(payload, rx_payload_buffer, rx_payload_size);
 800f2b2:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <MX_SubGhz_Phy_Get_RecvicePacket+0x48>)
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	4906      	ldr	r1, [pc, #24]	; (800f2d4 <MX_SubGhz_Phy_Get_RecvicePacket+0x4c>)
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fc08 	bl	800fad0 <memcpy>

}
 800f2c0:	bf00      	nop
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20001eb2 	.word	0x20001eb2
 800f2cc:	20001eb4 	.word	0x20001eb4
 800f2d0:	20001eb5 	.word	0x20001eb5
 800f2d4:	20001eb8 	.word	0x20001eb8

0800f2d8 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800f2d8:	b590      	push	{r4, r7, lr}
 800f2da:	b08b      	sub	sp, #44	; 0x2c
 800f2dc:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800f2de:	4b2e      	ldr	r3, [pc, #184]	; (800f398 <SubghzApp_Init+0xc0>)
 800f2e0:	4a2e      	ldr	r2, [pc, #184]	; (800f39c <SubghzApp_Init+0xc4>)
 800f2e2:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800f2e4:	4b2c      	ldr	r3, [pc, #176]	; (800f398 <SubghzApp_Init+0xc0>)
 800f2e6:	4a2e      	ldr	r2, [pc, #184]	; (800f3a0 <SubghzApp_Init+0xc8>)
 800f2e8:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800f2ea:	4b2b      	ldr	r3, [pc, #172]	; (800f398 <SubghzApp_Init+0xc0>)
 800f2ec:	4a2d      	ldr	r2, [pc, #180]	; (800f3a4 <SubghzApp_Init+0xcc>)
 800f2ee:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800f2f0:	4b29      	ldr	r3, [pc, #164]	; (800f398 <SubghzApp_Init+0xc0>)
 800f2f2:	4a2d      	ldr	r2, [pc, #180]	; (800f3a8 <SubghzApp_Init+0xd0>)
 800f2f4:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800f2f6:	4b28      	ldr	r3, [pc, #160]	; (800f398 <SubghzApp_Init+0xc0>)
 800f2f8:	4a2c      	ldr	r2, [pc, #176]	; (800f3ac <SubghzApp_Init+0xd4>)
 800f2fa:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800f2fc:	4b2c      	ldr	r3, [pc, #176]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	4825      	ldr	r0, [pc, #148]	; (800f398 <SubghzApp_Init+0xc0>)
 800f302:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

	Radio.SetChannel(RF_FREQUENCY);
 800f304:	4b2a      	ldr	r3, [pc, #168]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	482a      	ldr	r0, [pc, #168]	; (800f3b4 <SubghzApp_Init+0xdc>)
 800f30a:	4798      	blx	r3

	Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800f30c:	4b28      	ldr	r3, [pc, #160]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f30e:	69dc      	ldr	r4, [r3, #28]
 800f310:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f314:	9308      	str	r3, [sp, #32]
 800f316:	2300      	movs	r3, #0
 800f318:	9307      	str	r3, [sp, #28]
 800f31a:	2300      	movs	r3, #0
 800f31c:	9306      	str	r3, [sp, #24]
 800f31e:	2300      	movs	r3, #0
 800f320:	9305      	str	r3, [sp, #20]
 800f322:	2301      	movs	r3, #1
 800f324:	9304      	str	r3, [sp, #16]
 800f326:	2300      	movs	r3, #0
 800f328:	9303      	str	r3, [sp, #12]
 800f32a:	2308      	movs	r3, #8
 800f32c:	9302      	str	r3, [sp, #8]
 800f32e:	2301      	movs	r3, #1
 800f330:	9301      	str	r3, [sp, #4]
 800f332:	230a      	movs	r3, #10
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	2300      	movs	r3, #0
 800f338:	2200      	movs	r2, #0
 800f33a:	210e      	movs	r1, #14
 800f33c:	2001      	movs	r0, #1
 800f33e:	47a0      	blx	r4
	LORA_SPREADING_FACTOR, LORA_CODINGRATE, LORA_PREAMBLE_LENGTH,
	LORA_FIX_LENGTH_PAYLOAD_ON,
	true, 0, 0, LORA_IQ_INVERSION_ON, 3000);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800f340:	4b1b      	ldr	r3, [pc, #108]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f342:	699c      	ldr	r4, [r3, #24]
 800f344:	2301      	movs	r3, #1
 800f346:	9309      	str	r3, [sp, #36]	; 0x24
 800f348:	2300      	movs	r3, #0
 800f34a:	9308      	str	r3, [sp, #32]
 800f34c:	2300      	movs	r3, #0
 800f34e:	9307      	str	r3, [sp, #28]
 800f350:	2300      	movs	r3, #0
 800f352:	9306      	str	r3, [sp, #24]
 800f354:	2301      	movs	r3, #1
 800f356:	9305      	str	r3, [sp, #20]
 800f358:	2300      	movs	r3, #0
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	2300      	movs	r3, #0
 800f35e:	9303      	str	r3, [sp, #12]
 800f360:	2305      	movs	r3, #5
 800f362:	9302      	str	r3, [sp, #8]
 800f364:	2308      	movs	r3, #8
 800f366:	9301      	str	r3, [sp, #4]
 800f368:	2300      	movs	r3, #0
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	2301      	movs	r3, #1
 800f36e:	220a      	movs	r2, #10
 800f370:	2100      	movs	r1, #0
 800f372:	2001      	movs	r0, #1
 800f374:	47a0      	blx	r4
	LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH, LORA_SYMBOL_TIMEOUT,
	LORA_FIX_LENGTH_PAYLOAD_ON, 0, true, 0, 0, LORA_IQ_INVERSION_ON,
	true);

	Radio.SetPublicNetwork(false);
 800f376:	4b0e      	ldr	r3, [pc, #56]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f37a:	2000      	movs	r0, #0
 800f37c:	4798      	blx	r3

	Radio.SetMaxPayloadLength(MODEM_LORA, TX_BUFFER_SIZE);
 800f37e:	4b0c      	ldr	r3, [pc, #48]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f382:	2180      	movs	r1, #128	; 0x80
 800f384:	2001      	movs	r0, #1
 800f386:	4798      	blx	r3

	Radio.Sleep();
 800f388:	4b09      	ldr	r3, [pc, #36]	; (800f3b0 <SubghzApp_Init+0xd8>)
 800f38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38c:	4798      	blx	r3

  /* USER CODE END SubghzApp_Init_2 */
}
 800f38e:	bf00      	nop
 800f390:	3704      	adds	r7, #4
 800f392:	46bd      	mov	sp, r7
 800f394:	bd90      	pop	{r4, r7, pc}
 800f396:	bf00      	nop
 800f398:	20001f38 	.word	0x20001f38
 800f39c:	0800f475 	.word	0x0800f475
 800f3a0:	0800f491 	.word	0x0800f491
 800f3a4:	0800f525 	.word	0x0800f525
 800f3a8:	0800f541 	.word	0x0800f541
 800f3ac:	0800f589 	.word	0x0800f589
 800f3b0:	0801073c 	.word	0x0801073c
 800f3b4:	3703dcc0 	.word	0x3703dcc0

0800f3b8 <PacketSendCallbackRegister>:

/* USER CODE BEGIN EF */

void PacketSendCallbackRegister(PacketSendCallback callback) {
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]

	packetSendCallback = callback;
 800f3c0:	4a03      	ldr	r2, [pc, #12]	; (800f3d0 <PacketSendCallbackRegister+0x18>)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6013      	str	r3, [r2, #0]

}
 800f3c6:	bf00      	nop
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bc80      	pop	{r7}
 800f3ce:	4770      	bx	lr
 800f3d0:	20001f54 	.word	0x20001f54

0800f3d4 <PacketRecviceCallbackRegister>:

void PacketRecviceCallbackRegister(PacketRecviceCallback callback) {
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]

	packetRecviceCallback = callback;
 800f3dc:	4a03      	ldr	r2, [pc, #12]	; (800f3ec <PacketRecviceCallbackRegister+0x18>)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6013      	str	r3, [r2, #0]

}
 800f3e2:	bf00      	nop
 800f3e4:	370c      	adds	r7, #12
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bc80      	pop	{r7}
 800f3ea:	4770      	bx	lr
 800f3ec:	20001f58 	.word	0x20001f58

0800f3f0 <SubghzApp_Sleep>:

void SubghzApp_Sleep() {
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	af00      	add	r7, sp, #0

	Radio.Sleep();
 800f3f4:	4b02      	ldr	r3, [pc, #8]	; (800f400 <SubghzApp_Sleep+0x10>)
 800f3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f8:	4798      	blx	r3

}
 800f3fa:	bf00      	nop
 800f3fc:	bd80      	pop	{r7, pc}
 800f3fe:	bf00      	nop
 800f400:	0801073c 	.word	0x0801073c

0800f404 <SubghzApp_TX>:

void SubghzApp_TX(uint8_t *payload, uint8_t payload_size) {
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	460b      	mov	r3, r1
 800f40e:	70fb      	strb	r3, [r7, #3]

	Radio.Send(payload, payload_size);
 800f410:	4b04      	ldr	r3, [pc, #16]	; (800f424 <SubghzApp_TX+0x20>)
 800f412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f414:	78fa      	ldrb	r2, [r7, #3]
 800f416:	4611      	mov	r1, r2
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	4798      	blx	r3

}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	0801073c 	.word	0x0801073c

0800f428 <SubghzApp_RX>:

void SubghzApp_RX(uint16_t timeout) {
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	80fb      	strh	r3, [r7, #6]

	rx_rssi = 0;
 800f432:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <SubghzApp_RX+0x38>)
 800f434:	2200      	movs	r2, #0
 800f436:	801a      	strh	r2, [r3, #0]
	rx_snr = 0;
 800f438:	4b0a      	ldr	r3, [pc, #40]	; (800f464 <SubghzApp_RX+0x3c>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	701a      	strb	r2, [r3, #0]
	radio_rx_buffer_size = 0;
 800f43e:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <SubghzApp_RX+0x40>)
 800f440:	2200      	movs	r2, #0
 800f442:	701a      	strb	r2, [r3, #0]
	memset(radio_rx_buffer, 0x00, sizeof(radio_rx_buffer));
 800f444:	2280      	movs	r2, #128	; 0x80
 800f446:	2100      	movs	r1, #0
 800f448:	4808      	ldr	r0, [pc, #32]	; (800f46c <SubghzApp_RX+0x44>)
 800f44a:	f000 fb4f 	bl	800faec <memset>

	Radio.Rx(timeout);
 800f44e:	4b08      	ldr	r3, [pc, #32]	; (800f470 <SubghzApp_RX+0x48>)
 800f450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f452:	88fa      	ldrh	r2, [r7, #6]
 800f454:	4610      	mov	r0, r2
 800f456:	4798      	blx	r3

}
 800f458:	bf00      	nop
 800f45a:	3708      	adds	r7, #8
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	20001f5c 	.word	0x20001f5c
 800f464:	20001f5e 	.word	0x20001f5e
 800f468:	20001f5f 	.word	0x20001f5f
 800f46c:	20001f60 	.word	0x20001f60
 800f470:	0801073c 	.word	0x0801073c

0800f474 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */

	if (packetSendCallback) {
 800f478:	4b04      	ldr	r3, [pc, #16]	; (800f48c <OnTxDone+0x18>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d003      	beq.n	800f488 <OnTxDone+0x14>

		packetSendCallback(0x01);
 800f480:	4b02      	ldr	r3, [pc, #8]	; (800f48c <OnTxDone+0x18>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2001      	movs	r0, #1
 800f486:	4798      	blx	r3

	}

  /* USER CODE END OnTxDone */
}
 800f488:	bf00      	nop
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20001f54 	.word	0x20001f54

0800f490 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800f490:	b590      	push	{r4, r7, lr}
 800f492:	b089      	sub	sp, #36	; 0x24
 800f494:	af02      	add	r7, sp, #8
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	4608      	mov	r0, r1
 800f49a:	4611      	mov	r1, r2
 800f49c:	461a      	mov	r2, r3
 800f49e:	4603      	mov	r3, r0
 800f4a0:	817b      	strh	r3, [r7, #10]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	813b      	strh	r3, [r7, #8]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */

	uint8_t rx_state = 0x00;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	75fb      	strb	r3, [r7, #23]

	rx_rssi = rssi;
 800f4ae:	4a18      	ldr	r2, [pc, #96]	; (800f510 <OnRxDone+0x80>)
 800f4b0:	893b      	ldrh	r3, [r7, #8]
 800f4b2:	8013      	strh	r3, [r2, #0]

	rx_snr = LoraSnr_FskCfo;
 800f4b4:	4a17      	ldr	r2, [pc, #92]	; (800f514 <OnRxDone+0x84>)
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	7013      	strb	r3, [r2, #0]

	radio_rx_buffer_size = size;
 800f4ba:	897b      	ldrh	r3, [r7, #10]
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	4b16      	ldr	r3, [pc, #88]	; (800f518 <OnRxDone+0x88>)
 800f4c0:	701a      	strb	r2, [r3, #0]

	if (radio_rx_buffer_size <= sizeof(radio_rx_buffer)) {
 800f4c2:	4b15      	ldr	r3, [pc, #84]	; (800f518 <OnRxDone+0x88>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b80      	cmp	r3, #128	; 0x80
 800f4c8:	d809      	bhi.n	800f4de <OnRxDone+0x4e>

		memcpy(radio_rx_buffer, payload, radio_rx_buffer_size);
 800f4ca:	4b13      	ldr	r3, [pc, #76]	; (800f518 <OnRxDone+0x88>)
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	68f9      	ldr	r1, [r7, #12]
 800f4d2:	4812      	ldr	r0, [pc, #72]	; (800f51c <OnRxDone+0x8c>)
 800f4d4:	f000 fafc 	bl	800fad0 <memcpy>
		rx_state = 0x01;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	75fb      	strb	r3, [r7, #23]
 800f4dc:	e001      	b.n	800f4e2 <OnRxDone+0x52>

	} else {

		rx_state = 0x04;
 800f4de:	2304      	movs	r3, #4
 800f4e0:	75fb      	strb	r3, [r7, #23]

	}

	if (packetRecviceCallback) {
 800f4e2:	4b0f      	ldr	r3, [pc, #60]	; (800f520 <OnRxDone+0x90>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00d      	beq.n	800f506 <OnRxDone+0x76>

		packetRecviceCallback(rx_state, rx_rssi, rx_snr, radio_rx_buffer,
 800f4ea:	4b0d      	ldr	r3, [pc, #52]	; (800f520 <OnRxDone+0x90>)
 800f4ec:	681c      	ldr	r4, [r3, #0]
 800f4ee:	4b08      	ldr	r3, [pc, #32]	; (800f510 <OnRxDone+0x80>)
 800f4f0:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f4f4:	4b07      	ldr	r3, [pc, #28]	; (800f514 <OnRxDone+0x84>)
 800f4f6:	f993 2000 	ldrsb.w	r2, [r3]
 800f4fa:	4b07      	ldr	r3, [pc, #28]	; (800f518 <OnRxDone+0x88>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	7df8      	ldrb	r0, [r7, #23]
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	4b06      	ldr	r3, [pc, #24]	; (800f51c <OnRxDone+0x8c>)
 800f504:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxDone */
}
 800f506:	bf00      	nop
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd90      	pop	{r4, r7, pc}
 800f50e:	bf00      	nop
 800f510:	20001f5c 	.word	0x20001f5c
 800f514:	20001f5e 	.word	0x20001f5e
 800f518:	20001f5f 	.word	0x20001f5f
 800f51c:	20001f60 	.word	0x20001f60
 800f520:	20001f58 	.word	0x20001f58

0800f524 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */

	if (packetSendCallback) {
 800f528:	4b04      	ldr	r3, [pc, #16]	; (800f53c <OnTxTimeout+0x18>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d003      	beq.n	800f538 <OnTxTimeout+0x14>

		packetSendCallback(0x02);
 800f530:	4b02      	ldr	r3, [pc, #8]	; (800f53c <OnTxTimeout+0x18>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2002      	movs	r0, #2
 800f536:	4798      	blx	r3

	}

  /* USER CODE END OnTxTimeout */
}
 800f538:	bf00      	nop
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20001f54 	.word	0x20001f54

0800f540 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b083      	sub	sp, #12
 800f544:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN OnRxTimeout */

	if (packetRecviceCallback) {
 800f546:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <OnRxTimeout+0x34>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00d      	beq.n	800f56a <OnRxTimeout+0x2a>

		packetRecviceCallback(0x02, rx_rssi, rx_snr, radio_rx_buffer,
 800f54e:	4b09      	ldr	r3, [pc, #36]	; (800f574 <OnRxTimeout+0x34>)
 800f550:	681c      	ldr	r4, [r3, #0]
 800f552:	4b09      	ldr	r3, [pc, #36]	; (800f578 <OnRxTimeout+0x38>)
 800f554:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f558:	4b08      	ldr	r3, [pc, #32]	; (800f57c <OnRxTimeout+0x3c>)
 800f55a:	f993 2000 	ldrsb.w	r2, [r3]
 800f55e:	4b08      	ldr	r3, [pc, #32]	; (800f580 <OnRxTimeout+0x40>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	4b07      	ldr	r3, [pc, #28]	; (800f584 <OnRxTimeout+0x44>)
 800f566:	2002      	movs	r0, #2
 800f568:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxTimeout */
}
 800f56a:	bf00      	nop
 800f56c:	3704      	adds	r7, #4
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd90      	pop	{r4, r7, pc}
 800f572:	bf00      	nop
 800f574:	20001f58 	.word	0x20001f58
 800f578:	20001f5c 	.word	0x20001f5c
 800f57c:	20001f5e 	.word	0x20001f5e
 800f580:	20001f5f 	.word	0x20001f5f
 800f584:	20001f60 	.word	0x20001f60

0800f588 <OnRxError>:

static void OnRxError(void)
{
 800f588:	b590      	push	{r4, r7, lr}
 800f58a:	b083      	sub	sp, #12
 800f58c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN OnRxError */

	if (packetRecviceCallback) {
 800f58e:	4b0b      	ldr	r3, [pc, #44]	; (800f5bc <OnRxError+0x34>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00d      	beq.n	800f5b2 <OnRxError+0x2a>

		packetRecviceCallback(0x03, rx_rssi, rx_snr, radio_rx_buffer,
 800f596:	4b09      	ldr	r3, [pc, #36]	; (800f5bc <OnRxError+0x34>)
 800f598:	681c      	ldr	r4, [r3, #0]
 800f59a:	4b09      	ldr	r3, [pc, #36]	; (800f5c0 <OnRxError+0x38>)
 800f59c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f5a0:	4b08      	ldr	r3, [pc, #32]	; (800f5c4 <OnRxError+0x3c>)
 800f5a2:	f993 2000 	ldrsb.w	r2, [r3]
 800f5a6:	4b08      	ldr	r3, [pc, #32]	; (800f5c8 <OnRxError+0x40>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	9300      	str	r3, [sp, #0]
 800f5ac:	4b07      	ldr	r3, [pc, #28]	; (800f5cc <OnRxError+0x44>)
 800f5ae:	2003      	movs	r0, #3
 800f5b0:	47a0      	blx	r4
				radio_rx_buffer_size);

	}

  /* USER CODE END OnRxError */
}
 800f5b2:	bf00      	nop
 800f5b4:	3704      	adds	r7, #4
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd90      	pop	{r4, r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	20001f58 	.word	0x20001f58
 800f5c0:	20001f5c 	.word	0x20001f5c
 800f5c4:	20001f5e 	.word	0x20001f5e
 800f5c8:	20001f5f 	.word	0x20001f5f
 800f5cc:	20001f60 	.word	0x20001f60

0800f5d0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b083      	sub	sp, #12
 800f5d4:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800f5da:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bc80      	pop	{r7}
 800f5e4:	4770      	bx	lr

0800f5e6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800f5e6:	b480      	push	{r7}
 800f5e8:	b085      	sub	sp, #20
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3714      	adds	r7, #20
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bc80      	pop	{r7}
 800f5fe:	4770      	bx	lr

0800f600 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800f606:	2302      	movs	r3, #2
 800f608:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800f60a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	bc80      	pop	{r7}
 800f614:	4770      	bx	lr

0800f616 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800f616:	b480      	push	{r7}
 800f618:	b083      	sub	sp, #12
 800f61a:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800f61c:	2300      	movs	r3, #0
 800f61e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800f620:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800f622:	4618      	mov	r0, r3
 800f624:	370c      	adds	r7, #12
 800f626:	46bd      	mov	sp, r7
 800f628:	bc80      	pop	{r7}
 800f62a:	4770      	bx	lr

0800f62c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b083      	sub	sp, #12
 800f630:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800f632:	2301      	movs	r3, #1
 800f634:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800f636:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bc80      	pop	{r7}
 800f640:	4770      	bx	lr

0800f642 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800f642:	b480      	push	{r7}
 800f644:	b085      	sub	sp, #20
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	460b      	mov	r3, r1
 800f64c:	70fb      	strb	r3, [r7, #3]
 800f64e:	4613      	mov	r3, r2
 800f650:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800f656:	e004      	b.n	800f662 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	1c5a      	adds	r2, r3, #1
 800f65c:	60fa      	str	r2, [r7, #12]
 800f65e:	78fa      	ldrb	r2, [r7, #3]
 800f660:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800f662:	883b      	ldrh	r3, [r7, #0]
 800f664:	1e5a      	subs	r2, r3, #1
 800f666:	803a      	strh	r2, [r7, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1f5      	bne.n	800f658 <UTIL_MEM_set_8+0x16>
  }
}
 800f66c:	bf00      	nop
 800f66e:	bf00      	nop
 800f670:	3714      	adds	r7, #20
 800f672:	46bd      	mov	sp, r7
 800f674:	bc80      	pop	{r7}
 800f676:	4770      	bx	lr

0800f678 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	4613      	mov	r3, r2
 800f686:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d023      	beq.n	800f6d6 <UTIL_TIMER_Create+0x5e>
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d020      	beq.n	800f6d6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800f69a:	4b11      	ldr	r3, [pc, #68]	; (800f6e0 <UTIL_TIMER_Create+0x68>)
 800f69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f69e:	68b8      	ldr	r0, [r7, #8]
 800f6a0:	4798      	blx	r3
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	683a      	ldr	r2, [r7, #0]
 800f6be:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	69ba      	ldr	r2, [r7, #24]
 800f6c4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	79fa      	ldrb	r2, [r7, #7]
 800f6ca:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	e000      	b.n	800f6d8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800f6d6:	2301      	movs	r3, #1
  }
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	080106e8 	.word	0x080106e8

0800f6e4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b08a      	sub	sp, #40	; 0x28
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d056      	beq.n	800f7a6 <UTIL_TIMER_Start+0xc2>
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f929 	bl	800f950 <TimerExists>
 800f6fe:	4603      	mov	r3, r0
 800f700:	f083 0301 	eor.w	r3, r3, #1
 800f704:	b2db      	uxtb	r3, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	d04d      	beq.n	800f7a6 <UTIL_TIMER_Start+0xc2>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	7a5b      	ldrb	r3, [r3, #9]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d149      	bne.n	800f7a6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f712:	f3ef 8310 	mrs	r3, PRIMASK
 800f716:	613b      	str	r3, [r7, #16]
  return(result);
 800f718:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800f71a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800f71c:	b672      	cpsid	i
}
 800f71e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800f726:	4b24      	ldr	r3, [pc, #144]	; (800f7b8 <UTIL_TIMER_Start+0xd4>)
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	4798      	blx	r3
 800f72c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800f72e:	6a3a      	ldr	r2, [r7, #32]
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	429a      	cmp	r2, r3
 800f734:	d201      	bcs.n	800f73a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a3a      	ldr	r2, [r7, #32]
 800f73e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800f752:	4b1a      	ldr	r3, [pc, #104]	; (800f7bc <UTIL_TIMER_Start+0xd8>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800f75a:	4b17      	ldr	r3, [pc, #92]	; (800f7b8 <UTIL_TIMER_Start+0xd4>)
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f96b 	bl	800fa3c <TimerInsertNewHeadTimer>
 800f766:	e017      	b.n	800f798 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800f768:	4b13      	ldr	r3, [pc, #76]	; (800f7b8 <UTIL_TIMER_Start+0xd4>)
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	4798      	blx	r3
 800f76e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	441a      	add	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	4b0e      	ldr	r3, [pc, #56]	; (800f7bc <UTIL_TIMER_Start+0xd8>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	429a      	cmp	r2, r3
 800f788:	d203      	bcs.n	800f792 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 f956 	bl	800fa3c <TimerInsertNewHeadTimer>
 800f790:	e002      	b.n	800f798 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f922 	bl	800f9dc <TimerInsertTimer>
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f383 8810 	msr	PRIMASK, r3
}
 800f7a2:	bf00      	nop
  {
 800f7a4:	e002      	b.n	800f7ac <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800f7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3728      	adds	r7, #40	; 0x28
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	080106e8 	.word	0x080106e8
 800f7bc:	20001fe0 	.word	0x20001fe0

0800f7c0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b088      	sub	sp, #32
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d05b      	beq.n	800f88a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f7d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800f7da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f7dc:	b672      	cpsid	i
}
 800f7de:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800f7e0:	4b2d      	ldr	r3, [pc, #180]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800f7e6:	4b2c      	ldr	r3, [pc, #176]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800f7f2:	4b29      	ldr	r3, [pc, #164]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d041      	beq.n	800f87e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800f800:	4b25      	ldr	r3, [pc, #148]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	429a      	cmp	r2, r3
 800f808:	d134      	bne.n	800f874 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800f80a:	4b23      	ldr	r3, [pc, #140]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2200      	movs	r2, #0
 800f810:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800f812:	4b21      	ldr	r3, [pc, #132]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d00a      	beq.n	800f832 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800f81c:	4b1e      	ldr	r3, [pc, #120]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	4a1d      	ldr	r2, [pc, #116]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f824:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800f826:	4b1c      	ldr	r3, [pc, #112]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 f8ac 	bl	800f988 <TimerSetTimeout>
 800f830:	e023      	b.n	800f87a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800f832:	4b1a      	ldr	r3, [pc, #104]	; (800f89c <UTIL_TIMER_Stop+0xdc>)
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	4798      	blx	r3
            TimerListHead = NULL;
 800f838:	4b17      	ldr	r3, [pc, #92]	; (800f898 <UTIL_TIMER_Stop+0xd8>)
 800f83a:	2200      	movs	r2, #0
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	e01c      	b.n	800f87a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	429a      	cmp	r2, r3
 800f846:	d110      	bne.n	800f86a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	695b      	ldr	r3, [r3, #20]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d006      	beq.n	800f85e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	697a      	ldr	r2, [r7, #20]
 800f85a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800f85c:	e00d      	b.n	800f87a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	615a      	str	r2, [r3, #20]
            break;
 800f868:	e007      	b.n	800f87a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	695b      	ldr	r3, [r3, #20]
 800f872:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1e2      	bne.n	800f840 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	77fb      	strb	r3, [r7, #31]
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	f383 8810 	msr	PRIMASK, r3
}
 800f888:	e001      	b.n	800f88e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800f88a:	2301      	movs	r3, #1
 800f88c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800f88e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f890:	4618      	mov	r0, r3
 800f892:	3720      	adds	r7, #32
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	20001fe0 	.word	0x20001fe0
 800f89c:	080106e8 	.word	0x080106e8

0800f8a0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d102      	bne.n	800f8ba <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	73fb      	strb	r3, [r7, #15]
 800f8b8:	e014      	b.n	800f8e4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800f8ba:	4b0d      	ldr	r3, [pc, #52]	; (800f8f0 <UTIL_TIMER_SetPeriod+0x50>)
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	6838      	ldr	r0, [r7, #0]
 800f8c0:	4798      	blx	r3
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 f841 	bl	800f950 <TimerExists>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d007      	beq.n	800f8e4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7ff ff73 	bl	800f7c0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff ff02 	bl	800f6e4 <UTIL_TIMER_Start>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	080106e8 	.word	0x080106e8

0800f8f4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800f8fa:	4b06      	ldr	r3, [pc, #24]	; (800f914 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f8fc:	69db      	ldr	r3, [r3, #28]
 800f8fe:	4798      	blx	r3
 800f900:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800f902:	4b04      	ldr	r3, [pc, #16]	; (800f914 <UTIL_TIMER_GetCurrentTime+0x20>)
 800f904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	4798      	blx	r3
 800f90a:	4603      	mov	r3, r0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	080106e8 	.word	0x080106e8

0800f918 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800f920:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <UTIL_TIMER_GetElapsedTime+0x34>)
 800f922:	69db      	ldr	r3, [r3, #28]
 800f924:	4798      	blx	r3
 800f926:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800f928:	4b08      	ldr	r3, [pc, #32]	; (800f94c <UTIL_TIMER_GetElapsedTime+0x34>)
 800f92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	4798      	blx	r3
 800f930:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800f932:	4b06      	ldr	r3, [pc, #24]	; (800f94c <UTIL_TIMER_GetElapsedTime+0x34>)
 800f934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f936:	68f9      	ldr	r1, [r7, #12]
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	1a8a      	subs	r2, r1, r2
 800f93c:	4610      	mov	r0, r2
 800f93e:	4798      	blx	r3
 800f940:	4603      	mov	r3, r0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	080106e8 	.word	0x080106e8

0800f950 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <TimerExists+0x34>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800f95e:	e008      	b.n	800f972 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	429a      	cmp	r2, r3
 800f966:	d101      	bne.n	800f96c <TimerExists+0x1c>
    {
      return true;
 800f968:	2301      	movs	r3, #1
 800f96a:	e006      	b.n	800f97a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	695b      	ldr	r3, [r3, #20]
 800f970:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1f3      	bne.n	800f960 <TimerExists+0x10>
  }
  return false;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3714      	adds	r7, #20
 800f97e:	46bd      	mov	sp, r7
 800f980:	bc80      	pop	{r7}
 800f982:	4770      	bx	lr
 800f984:	20001fe0 	.word	0x20001fe0

0800f988 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800f988:	b590      	push	{r4, r7, lr}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800f990:	4b11      	ldr	r3, [pc, #68]	; (800f9d8 <TimerSetTimeout+0x50>)
 800f992:	6a1b      	ldr	r3, [r3, #32]
 800f994:	4798      	blx	r3
 800f996:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2201      	movs	r2, #1
 800f99c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681c      	ldr	r4, [r3, #0]
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	; (800f9d8 <TimerSetTimeout+0x50>)
 800f9a4:	699b      	ldr	r3, [r3, #24]
 800f9a6:	4798      	blx	r3
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	429c      	cmp	r4, r3
 800f9b0:	d207      	bcs.n	800f9c2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800f9b2:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <TimerSetTimeout+0x50>)
 800f9b4:	699b      	ldr	r3, [r3, #24]
 800f9b6:	4798      	blx	r3
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	441a      	add	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800f9c2:	4b05      	ldr	r3, [pc, #20]	; (800f9d8 <TimerSetTimeout+0x50>)
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	6812      	ldr	r2, [r2, #0]
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	4798      	blx	r3
}
 800f9ce:	bf00      	nop
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd90      	pop	{r4, r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	080106e8 	.word	0x080106e8

0800f9dc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b085      	sub	sp, #20
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800f9e4:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <TimerInsertTimer+0x5c>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800f9ea:	4b13      	ldr	r3, [pc, #76]	; (800fa38 <TimerInsertTimer+0x5c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800f9f2:	e012      	b.n	800fa1a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d905      	bls.n	800fa0c <TimerInsertTimer+0x30>
    {
        cur = next;
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	60bb      	str	r3, [r7, #8]
 800fa0a:	e006      	b.n	800fa1a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68ba      	ldr	r2, [r7, #8]
 800fa16:	615a      	str	r2, [r3, #20]
        return;
 800fa18:	e009      	b.n	800fa2e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1e8      	bne.n	800f9f4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	615a      	str	r2, [r3, #20]
}
 800fa2e:	3714      	adds	r7, #20
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bc80      	pop	{r7}
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	20001fe0 	.word	0x20001fe0

0800fa3c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b084      	sub	sp, #16
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fa44:	4b0b      	ldr	r3, [pc, #44]	; (800fa74 <TimerInsertNewHeadTimer+0x38>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d002      	beq.n	800fa56 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800fa5c:	4a05      	ldr	r2, [pc, #20]	; (800fa74 <TimerInsertNewHeadTimer+0x38>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800fa62:	4b04      	ldr	r3, [pc, #16]	; (800fa74 <TimerInsertNewHeadTimer+0x38>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7ff ff8e 	bl	800f988 <TimerSetTimeout>
}
 800fa6c:	bf00      	nop
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	20001fe0 	.word	0x20001fe0

0800fa78 <__errno>:
 800fa78:	4b01      	ldr	r3, [pc, #4]	; (800fa80 <__errno+0x8>)
 800fa7a:	6818      	ldr	r0, [r3, #0]
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	20000018 	.word	0x20000018

0800fa84 <__libc_init_array>:
 800fa84:	b570      	push	{r4, r5, r6, lr}
 800fa86:	4d0d      	ldr	r5, [pc, #52]	; (800fabc <__libc_init_array+0x38>)
 800fa88:	4c0d      	ldr	r4, [pc, #52]	; (800fac0 <__libc_init_array+0x3c>)
 800fa8a:	1b64      	subs	r4, r4, r5
 800fa8c:	10a4      	asrs	r4, r4, #2
 800fa8e:	2600      	movs	r6, #0
 800fa90:	42a6      	cmp	r6, r4
 800fa92:	d109      	bne.n	800faa8 <__libc_init_array+0x24>
 800fa94:	4d0b      	ldr	r5, [pc, #44]	; (800fac4 <__libc_init_array+0x40>)
 800fa96:	4c0c      	ldr	r4, [pc, #48]	; (800fac8 <__libc_init_array+0x44>)
 800fa98:	f000 fcb6 	bl	8010408 <_init>
 800fa9c:	1b64      	subs	r4, r4, r5
 800fa9e:	10a4      	asrs	r4, r4, #2
 800faa0:	2600      	movs	r6, #0
 800faa2:	42a6      	cmp	r6, r4
 800faa4:	d105      	bne.n	800fab2 <__libc_init_array+0x2e>
 800faa6:	bd70      	pop	{r4, r5, r6, pc}
 800faa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800faac:	4798      	blx	r3
 800faae:	3601      	adds	r6, #1
 800fab0:	e7ee      	b.n	800fa90 <__libc_init_array+0xc>
 800fab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800fab6:	4798      	blx	r3
 800fab8:	3601      	adds	r6, #1
 800faba:	e7f2      	b.n	800faa2 <__libc_init_array+0x1e>
 800fabc:	08010910 	.word	0x08010910
 800fac0:	08010910 	.word	0x08010910
 800fac4:	08010910 	.word	0x08010910
 800fac8:	08010914 	.word	0x08010914

0800facc <__retarget_lock_acquire_recursive>:
 800facc:	4770      	bx	lr

0800face <__retarget_lock_release_recursive>:
 800face:	4770      	bx	lr

0800fad0 <memcpy>:
 800fad0:	440a      	add	r2, r1
 800fad2:	4291      	cmp	r1, r2
 800fad4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fad8:	d100      	bne.n	800fadc <memcpy+0xc>
 800fada:	4770      	bx	lr
 800fadc:	b510      	push	{r4, lr}
 800fade:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fae6:	4291      	cmp	r1, r2
 800fae8:	d1f9      	bne.n	800fade <memcpy+0xe>
 800faea:	bd10      	pop	{r4, pc}

0800faec <memset>:
 800faec:	4402      	add	r2, r0
 800faee:	4603      	mov	r3, r0
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d100      	bne.n	800faf6 <memset+0xa>
 800faf4:	4770      	bx	lr
 800faf6:	f803 1b01 	strb.w	r1, [r3], #1
 800fafa:	e7f9      	b.n	800faf0 <memset+0x4>

0800fafc <_malloc_r>:
 800fafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafe:	1ccd      	adds	r5, r1, #3
 800fb00:	f025 0503 	bic.w	r5, r5, #3
 800fb04:	3508      	adds	r5, #8
 800fb06:	2d0c      	cmp	r5, #12
 800fb08:	bf38      	it	cc
 800fb0a:	250c      	movcc	r5, #12
 800fb0c:	2d00      	cmp	r5, #0
 800fb0e:	4606      	mov	r6, r0
 800fb10:	db01      	blt.n	800fb16 <_malloc_r+0x1a>
 800fb12:	42a9      	cmp	r1, r5
 800fb14:	d903      	bls.n	800fb1e <_malloc_r+0x22>
 800fb16:	230c      	movs	r3, #12
 800fb18:	6033      	str	r3, [r6, #0]
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb1e:	f000 f8e1 	bl	800fce4 <__malloc_lock>
 800fb22:	4921      	ldr	r1, [pc, #132]	; (800fba8 <_malloc_r+0xac>)
 800fb24:	680a      	ldr	r2, [r1, #0]
 800fb26:	4614      	mov	r4, r2
 800fb28:	b99c      	cbnz	r4, 800fb52 <_malloc_r+0x56>
 800fb2a:	4f20      	ldr	r7, [pc, #128]	; (800fbac <_malloc_r+0xb0>)
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	b923      	cbnz	r3, 800fb3a <_malloc_r+0x3e>
 800fb30:	4621      	mov	r1, r4
 800fb32:	4630      	mov	r0, r6
 800fb34:	f000 f8a6 	bl	800fc84 <_sbrk_r>
 800fb38:	6038      	str	r0, [r7, #0]
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f000 f8a1 	bl	800fc84 <_sbrk_r>
 800fb42:	1c43      	adds	r3, r0, #1
 800fb44:	d123      	bne.n	800fb8e <_malloc_r+0x92>
 800fb46:	230c      	movs	r3, #12
 800fb48:	6033      	str	r3, [r6, #0]
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	f000 f8d0 	bl	800fcf0 <__malloc_unlock>
 800fb50:	e7e3      	b.n	800fb1a <_malloc_r+0x1e>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	1b5b      	subs	r3, r3, r5
 800fb56:	d417      	bmi.n	800fb88 <_malloc_r+0x8c>
 800fb58:	2b0b      	cmp	r3, #11
 800fb5a:	d903      	bls.n	800fb64 <_malloc_r+0x68>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	441c      	add	r4, r3
 800fb60:	6025      	str	r5, [r4, #0]
 800fb62:	e004      	b.n	800fb6e <_malloc_r+0x72>
 800fb64:	6863      	ldr	r3, [r4, #4]
 800fb66:	42a2      	cmp	r2, r4
 800fb68:	bf0c      	ite	eq
 800fb6a:	600b      	streq	r3, [r1, #0]
 800fb6c:	6053      	strne	r3, [r2, #4]
 800fb6e:	4630      	mov	r0, r6
 800fb70:	f000 f8be 	bl	800fcf0 <__malloc_unlock>
 800fb74:	f104 000b 	add.w	r0, r4, #11
 800fb78:	1d23      	adds	r3, r4, #4
 800fb7a:	f020 0007 	bic.w	r0, r0, #7
 800fb7e:	1ac2      	subs	r2, r0, r3
 800fb80:	d0cc      	beq.n	800fb1c <_malloc_r+0x20>
 800fb82:	1a1b      	subs	r3, r3, r0
 800fb84:	50a3      	str	r3, [r4, r2]
 800fb86:	e7c9      	b.n	800fb1c <_malloc_r+0x20>
 800fb88:	4622      	mov	r2, r4
 800fb8a:	6864      	ldr	r4, [r4, #4]
 800fb8c:	e7cc      	b.n	800fb28 <_malloc_r+0x2c>
 800fb8e:	1cc4      	adds	r4, r0, #3
 800fb90:	f024 0403 	bic.w	r4, r4, #3
 800fb94:	42a0      	cmp	r0, r4
 800fb96:	d0e3      	beq.n	800fb60 <_malloc_r+0x64>
 800fb98:	1a21      	subs	r1, r4, r0
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	f000 f872 	bl	800fc84 <_sbrk_r>
 800fba0:	3001      	adds	r0, #1
 800fba2:	d1dd      	bne.n	800fb60 <_malloc_r+0x64>
 800fba4:	e7cf      	b.n	800fb46 <_malloc_r+0x4a>
 800fba6:	bf00      	nop
 800fba8:	20001fe4 	.word	0x20001fe4
 800fbac:	20001fe8 	.word	0x20001fe8

0800fbb0 <cleanup_glue>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	6809      	ldr	r1, [r1, #0]
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	b109      	cbz	r1, 800fbbe <cleanup_glue+0xe>
 800fbba:	f7ff fff9 	bl	800fbb0 <cleanup_glue>
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbc6:	f000 b899 	b.w	800fcfc <_free_r>
	...

0800fbcc <_reclaim_reent>:
 800fbcc:	4b2c      	ldr	r3, [pc, #176]	; (800fc80 <_reclaim_reent+0xb4>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4283      	cmp	r3, r0
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	d051      	beq.n	800fc7c <_reclaim_reent+0xb0>
 800fbd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fbda:	b143      	cbz	r3, 800fbee <_reclaim_reent+0x22>
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d14a      	bne.n	800fc78 <_reclaim_reent+0xac>
 800fbe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbe4:	6819      	ldr	r1, [r3, #0]
 800fbe6:	b111      	cbz	r1, 800fbee <_reclaim_reent+0x22>
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 f887 	bl	800fcfc <_free_r>
 800fbee:	6961      	ldr	r1, [r4, #20]
 800fbf0:	b111      	cbz	r1, 800fbf8 <_reclaim_reent+0x2c>
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	f000 f882 	bl	800fcfc <_free_r>
 800fbf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fbfa:	b111      	cbz	r1, 800fc02 <_reclaim_reent+0x36>
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f000 f87d 	bl	800fcfc <_free_r>
 800fc02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fc04:	b111      	cbz	r1, 800fc0c <_reclaim_reent+0x40>
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 f878 	bl	800fcfc <_free_r>
 800fc0c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fc0e:	b111      	cbz	r1, 800fc16 <_reclaim_reent+0x4a>
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 f873 	bl	800fcfc <_free_r>
 800fc16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fc18:	b111      	cbz	r1, 800fc20 <_reclaim_reent+0x54>
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f000 f86e 	bl	800fcfc <_free_r>
 800fc20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fc22:	b111      	cbz	r1, 800fc2a <_reclaim_reent+0x5e>
 800fc24:	4620      	mov	r0, r4
 800fc26:	f000 f869 	bl	800fcfc <_free_r>
 800fc2a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fc2c:	b111      	cbz	r1, 800fc34 <_reclaim_reent+0x68>
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 f864 	bl	800fcfc <_free_r>
 800fc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc36:	b111      	cbz	r1, 800fc3e <_reclaim_reent+0x72>
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f000 f85f 	bl	800fcfc <_free_r>
 800fc3e:	69a3      	ldr	r3, [r4, #24]
 800fc40:	b1e3      	cbz	r3, 800fc7c <_reclaim_reent+0xb0>
 800fc42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc44:	4620      	mov	r0, r4
 800fc46:	4798      	blx	r3
 800fc48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fc4a:	b1b9      	cbz	r1, 800fc7c <_reclaim_reent+0xb0>
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc52:	f7ff bfad 	b.w	800fbb0 <cleanup_glue>
 800fc56:	5949      	ldr	r1, [r1, r5]
 800fc58:	b941      	cbnz	r1, 800fc6c <_reclaim_reent+0xa0>
 800fc5a:	3504      	adds	r5, #4
 800fc5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc5e:	2d80      	cmp	r5, #128	; 0x80
 800fc60:	68d9      	ldr	r1, [r3, #12]
 800fc62:	d1f8      	bne.n	800fc56 <_reclaim_reent+0x8a>
 800fc64:	4620      	mov	r0, r4
 800fc66:	f000 f849 	bl	800fcfc <_free_r>
 800fc6a:	e7ba      	b.n	800fbe2 <_reclaim_reent+0x16>
 800fc6c:	680e      	ldr	r6, [r1, #0]
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f000 f844 	bl	800fcfc <_free_r>
 800fc74:	4631      	mov	r1, r6
 800fc76:	e7ef      	b.n	800fc58 <_reclaim_reent+0x8c>
 800fc78:	2500      	movs	r5, #0
 800fc7a:	e7ef      	b.n	800fc5c <_reclaim_reent+0x90>
 800fc7c:	bd70      	pop	{r4, r5, r6, pc}
 800fc7e:	bf00      	nop
 800fc80:	20000018 	.word	0x20000018

0800fc84 <_sbrk_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4d06      	ldr	r5, [pc, #24]	; (800fca0 <_sbrk_r+0x1c>)
 800fc88:	2300      	movs	r3, #0
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	4608      	mov	r0, r1
 800fc8e:	602b      	str	r3, [r5, #0]
 800fc90:	f7f2 fb86 	bl	80023a0 <_sbrk>
 800fc94:	1c43      	adds	r3, r0, #1
 800fc96:	d102      	bne.n	800fc9e <_sbrk_r+0x1a>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	b103      	cbz	r3, 800fc9e <_sbrk_r+0x1a>
 800fc9c:	6023      	str	r3, [r4, #0]
 800fc9e:	bd38      	pop	{r3, r4, r5, pc}
 800fca0:	200029b8 	.word	0x200029b8

0800fca4 <siprintf>:
 800fca4:	b40e      	push	{r1, r2, r3}
 800fca6:	b500      	push	{lr}
 800fca8:	b09c      	sub	sp, #112	; 0x70
 800fcaa:	ab1d      	add	r3, sp, #116	; 0x74
 800fcac:	9002      	str	r0, [sp, #8]
 800fcae:	9006      	str	r0, [sp, #24]
 800fcb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fcb4:	4809      	ldr	r0, [pc, #36]	; (800fcdc <siprintf+0x38>)
 800fcb6:	9107      	str	r1, [sp, #28]
 800fcb8:	9104      	str	r1, [sp, #16]
 800fcba:	4909      	ldr	r1, [pc, #36]	; (800fce0 <siprintf+0x3c>)
 800fcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc0:	9105      	str	r1, [sp, #20]
 800fcc2:	6800      	ldr	r0, [r0, #0]
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	a902      	add	r1, sp, #8
 800fcc8:	f000 f8c2 	bl	800fe50 <_svfiprintf_r>
 800fccc:	9b02      	ldr	r3, [sp, #8]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	701a      	strb	r2, [r3, #0]
 800fcd2:	b01c      	add	sp, #112	; 0x70
 800fcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcd8:	b003      	add	sp, #12
 800fcda:	4770      	bx	lr
 800fcdc:	20000018 	.word	0x20000018
 800fce0:	ffff0208 	.word	0xffff0208

0800fce4 <__malloc_lock>:
 800fce4:	4801      	ldr	r0, [pc, #4]	; (800fcec <__malloc_lock+0x8>)
 800fce6:	f7ff bef1 	b.w	800facc <__retarget_lock_acquire_recursive>
 800fcea:	bf00      	nop
 800fcec:	200029b0 	.word	0x200029b0

0800fcf0 <__malloc_unlock>:
 800fcf0:	4801      	ldr	r0, [pc, #4]	; (800fcf8 <__malloc_unlock+0x8>)
 800fcf2:	f7ff beec 	b.w	800face <__retarget_lock_release_recursive>
 800fcf6:	bf00      	nop
 800fcf8:	200029b0 	.word	0x200029b0

0800fcfc <_free_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4605      	mov	r5, r0
 800fd00:	2900      	cmp	r1, #0
 800fd02:	d045      	beq.n	800fd90 <_free_r+0x94>
 800fd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd08:	1f0c      	subs	r4, r1, #4
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	bfb8      	it	lt
 800fd0e:	18e4      	addlt	r4, r4, r3
 800fd10:	f7ff ffe8 	bl	800fce4 <__malloc_lock>
 800fd14:	4a1f      	ldr	r2, [pc, #124]	; (800fd94 <_free_r+0x98>)
 800fd16:	6813      	ldr	r3, [r2, #0]
 800fd18:	4610      	mov	r0, r2
 800fd1a:	b933      	cbnz	r3, 800fd2a <_free_r+0x2e>
 800fd1c:	6063      	str	r3, [r4, #4]
 800fd1e:	6014      	str	r4, [r2, #0]
 800fd20:	4628      	mov	r0, r5
 800fd22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd26:	f7ff bfe3 	b.w	800fcf0 <__malloc_unlock>
 800fd2a:	42a3      	cmp	r3, r4
 800fd2c:	d90b      	bls.n	800fd46 <_free_r+0x4a>
 800fd2e:	6821      	ldr	r1, [r4, #0]
 800fd30:	1862      	adds	r2, r4, r1
 800fd32:	4293      	cmp	r3, r2
 800fd34:	bf04      	itt	eq
 800fd36:	681a      	ldreq	r2, [r3, #0]
 800fd38:	685b      	ldreq	r3, [r3, #4]
 800fd3a:	6063      	str	r3, [r4, #4]
 800fd3c:	bf04      	itt	eq
 800fd3e:	1852      	addeq	r2, r2, r1
 800fd40:	6022      	streq	r2, [r4, #0]
 800fd42:	6004      	str	r4, [r0, #0]
 800fd44:	e7ec      	b.n	800fd20 <_free_r+0x24>
 800fd46:	461a      	mov	r2, r3
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	b10b      	cbz	r3, 800fd50 <_free_r+0x54>
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	d9fa      	bls.n	800fd46 <_free_r+0x4a>
 800fd50:	6811      	ldr	r1, [r2, #0]
 800fd52:	1850      	adds	r0, r2, r1
 800fd54:	42a0      	cmp	r0, r4
 800fd56:	d10b      	bne.n	800fd70 <_free_r+0x74>
 800fd58:	6820      	ldr	r0, [r4, #0]
 800fd5a:	4401      	add	r1, r0
 800fd5c:	1850      	adds	r0, r2, r1
 800fd5e:	4283      	cmp	r3, r0
 800fd60:	6011      	str	r1, [r2, #0]
 800fd62:	d1dd      	bne.n	800fd20 <_free_r+0x24>
 800fd64:	6818      	ldr	r0, [r3, #0]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	6053      	str	r3, [r2, #4]
 800fd6a:	4401      	add	r1, r0
 800fd6c:	6011      	str	r1, [r2, #0]
 800fd6e:	e7d7      	b.n	800fd20 <_free_r+0x24>
 800fd70:	d902      	bls.n	800fd78 <_free_r+0x7c>
 800fd72:	230c      	movs	r3, #12
 800fd74:	602b      	str	r3, [r5, #0]
 800fd76:	e7d3      	b.n	800fd20 <_free_r+0x24>
 800fd78:	6820      	ldr	r0, [r4, #0]
 800fd7a:	1821      	adds	r1, r4, r0
 800fd7c:	428b      	cmp	r3, r1
 800fd7e:	bf04      	itt	eq
 800fd80:	6819      	ldreq	r1, [r3, #0]
 800fd82:	685b      	ldreq	r3, [r3, #4]
 800fd84:	6063      	str	r3, [r4, #4]
 800fd86:	bf04      	itt	eq
 800fd88:	1809      	addeq	r1, r1, r0
 800fd8a:	6021      	streq	r1, [r4, #0]
 800fd8c:	6054      	str	r4, [r2, #4]
 800fd8e:	e7c7      	b.n	800fd20 <_free_r+0x24>
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
 800fd92:	bf00      	nop
 800fd94:	20001fe4 	.word	0x20001fe4

0800fd98 <__ssputs_r>:
 800fd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd9c:	688e      	ldr	r6, [r1, #8]
 800fd9e:	429e      	cmp	r6, r3
 800fda0:	4682      	mov	sl, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	4690      	mov	r8, r2
 800fda6:	461f      	mov	r7, r3
 800fda8:	d838      	bhi.n	800fe1c <__ssputs_r+0x84>
 800fdaa:	898a      	ldrh	r2, [r1, #12]
 800fdac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdb0:	d032      	beq.n	800fe18 <__ssputs_r+0x80>
 800fdb2:	6825      	ldr	r5, [r4, #0]
 800fdb4:	6909      	ldr	r1, [r1, #16]
 800fdb6:	eba5 0901 	sub.w	r9, r5, r1
 800fdba:	6965      	ldr	r5, [r4, #20]
 800fdbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	444b      	add	r3, r9
 800fdc8:	106d      	asrs	r5, r5, #1
 800fdca:	429d      	cmp	r5, r3
 800fdcc:	bf38      	it	cc
 800fdce:	461d      	movcc	r5, r3
 800fdd0:	0553      	lsls	r3, r2, #21
 800fdd2:	d531      	bpl.n	800fe38 <__ssputs_r+0xa0>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	f7ff fe91 	bl	800fafc <_malloc_r>
 800fdda:	4606      	mov	r6, r0
 800fddc:	b950      	cbnz	r0, 800fdf4 <__ssputs_r+0x5c>
 800fdde:	230c      	movs	r3, #12
 800fde0:	f8ca 3000 	str.w	r3, [sl]
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdea:	81a3      	strh	r3, [r4, #12]
 800fdec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf4:	6921      	ldr	r1, [r4, #16]
 800fdf6:	464a      	mov	r2, r9
 800fdf8:	f7ff fe6a 	bl	800fad0 <memcpy>
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe06:	81a3      	strh	r3, [r4, #12]
 800fe08:	6126      	str	r6, [r4, #16]
 800fe0a:	6165      	str	r5, [r4, #20]
 800fe0c:	444e      	add	r6, r9
 800fe0e:	eba5 0509 	sub.w	r5, r5, r9
 800fe12:	6026      	str	r6, [r4, #0]
 800fe14:	60a5      	str	r5, [r4, #8]
 800fe16:	463e      	mov	r6, r7
 800fe18:	42be      	cmp	r6, r7
 800fe1a:	d900      	bls.n	800fe1e <__ssputs_r+0x86>
 800fe1c:	463e      	mov	r6, r7
 800fe1e:	4632      	mov	r2, r6
 800fe20:	6820      	ldr	r0, [r4, #0]
 800fe22:	4641      	mov	r1, r8
 800fe24:	f000 faa8 	bl	8010378 <memmove>
 800fe28:	68a3      	ldr	r3, [r4, #8]
 800fe2a:	6822      	ldr	r2, [r4, #0]
 800fe2c:	1b9b      	subs	r3, r3, r6
 800fe2e:	4432      	add	r2, r6
 800fe30:	60a3      	str	r3, [r4, #8]
 800fe32:	6022      	str	r2, [r4, #0]
 800fe34:	2000      	movs	r0, #0
 800fe36:	e7db      	b.n	800fdf0 <__ssputs_r+0x58>
 800fe38:	462a      	mov	r2, r5
 800fe3a:	f000 fab7 	bl	80103ac <_realloc_r>
 800fe3e:	4606      	mov	r6, r0
 800fe40:	2800      	cmp	r0, #0
 800fe42:	d1e1      	bne.n	800fe08 <__ssputs_r+0x70>
 800fe44:	6921      	ldr	r1, [r4, #16]
 800fe46:	4650      	mov	r0, sl
 800fe48:	f7ff ff58 	bl	800fcfc <_free_r>
 800fe4c:	e7c7      	b.n	800fdde <__ssputs_r+0x46>
	...

0800fe50 <_svfiprintf_r>:
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	4698      	mov	r8, r3
 800fe56:	898b      	ldrh	r3, [r1, #12]
 800fe58:	061b      	lsls	r3, r3, #24
 800fe5a:	b09d      	sub	sp, #116	; 0x74
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	460d      	mov	r5, r1
 800fe60:	4614      	mov	r4, r2
 800fe62:	d50e      	bpl.n	800fe82 <_svfiprintf_r+0x32>
 800fe64:	690b      	ldr	r3, [r1, #16]
 800fe66:	b963      	cbnz	r3, 800fe82 <_svfiprintf_r+0x32>
 800fe68:	2140      	movs	r1, #64	; 0x40
 800fe6a:	f7ff fe47 	bl	800fafc <_malloc_r>
 800fe6e:	6028      	str	r0, [r5, #0]
 800fe70:	6128      	str	r0, [r5, #16]
 800fe72:	b920      	cbnz	r0, 800fe7e <_svfiprintf_r+0x2e>
 800fe74:	230c      	movs	r3, #12
 800fe76:	603b      	str	r3, [r7, #0]
 800fe78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe7c:	e0d1      	b.n	8010022 <_svfiprintf_r+0x1d2>
 800fe7e:	2340      	movs	r3, #64	; 0x40
 800fe80:	616b      	str	r3, [r5, #20]
 800fe82:	2300      	movs	r3, #0
 800fe84:	9309      	str	r3, [sp, #36]	; 0x24
 800fe86:	2320      	movs	r3, #32
 800fe88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe90:	2330      	movs	r3, #48	; 0x30
 800fe92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801003c <_svfiprintf_r+0x1ec>
 800fe96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe9a:	f04f 0901 	mov.w	r9, #1
 800fe9e:	4623      	mov	r3, r4
 800fea0:	469a      	mov	sl, r3
 800fea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fea6:	b10a      	cbz	r2, 800feac <_svfiprintf_r+0x5c>
 800fea8:	2a25      	cmp	r2, #37	; 0x25
 800feaa:	d1f9      	bne.n	800fea0 <_svfiprintf_r+0x50>
 800feac:	ebba 0b04 	subs.w	fp, sl, r4
 800feb0:	d00b      	beq.n	800feca <_svfiprintf_r+0x7a>
 800feb2:	465b      	mov	r3, fp
 800feb4:	4622      	mov	r2, r4
 800feb6:	4629      	mov	r1, r5
 800feb8:	4638      	mov	r0, r7
 800feba:	f7ff ff6d 	bl	800fd98 <__ssputs_r>
 800febe:	3001      	adds	r0, #1
 800fec0:	f000 80aa 	beq.w	8010018 <_svfiprintf_r+0x1c8>
 800fec4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fec6:	445a      	add	r2, fp
 800fec8:	9209      	str	r2, [sp, #36]	; 0x24
 800feca:	f89a 3000 	ldrb.w	r3, [sl]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	f000 80a2 	beq.w	8010018 <_svfiprintf_r+0x1c8>
 800fed4:	2300      	movs	r3, #0
 800fed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fede:	f10a 0a01 	add.w	sl, sl, #1
 800fee2:	9304      	str	r3, [sp, #16]
 800fee4:	9307      	str	r3, [sp, #28]
 800fee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800feea:	931a      	str	r3, [sp, #104]	; 0x68
 800feec:	4654      	mov	r4, sl
 800feee:	2205      	movs	r2, #5
 800fef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fef4:	4851      	ldr	r0, [pc, #324]	; (801003c <_svfiprintf_r+0x1ec>)
 800fef6:	f7f0 f943 	bl	8000180 <memchr>
 800fefa:	9a04      	ldr	r2, [sp, #16]
 800fefc:	b9d8      	cbnz	r0, 800ff36 <_svfiprintf_r+0xe6>
 800fefe:	06d0      	lsls	r0, r2, #27
 800ff00:	bf44      	itt	mi
 800ff02:	2320      	movmi	r3, #32
 800ff04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff08:	0711      	lsls	r1, r2, #28
 800ff0a:	bf44      	itt	mi
 800ff0c:	232b      	movmi	r3, #43	; 0x2b
 800ff0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff12:	f89a 3000 	ldrb.w	r3, [sl]
 800ff16:	2b2a      	cmp	r3, #42	; 0x2a
 800ff18:	d015      	beq.n	800ff46 <_svfiprintf_r+0xf6>
 800ff1a:	9a07      	ldr	r2, [sp, #28]
 800ff1c:	4654      	mov	r4, sl
 800ff1e:	2000      	movs	r0, #0
 800ff20:	f04f 0c0a 	mov.w	ip, #10
 800ff24:	4621      	mov	r1, r4
 800ff26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff2a:	3b30      	subs	r3, #48	; 0x30
 800ff2c:	2b09      	cmp	r3, #9
 800ff2e:	d94e      	bls.n	800ffce <_svfiprintf_r+0x17e>
 800ff30:	b1b0      	cbz	r0, 800ff60 <_svfiprintf_r+0x110>
 800ff32:	9207      	str	r2, [sp, #28]
 800ff34:	e014      	b.n	800ff60 <_svfiprintf_r+0x110>
 800ff36:	eba0 0308 	sub.w	r3, r0, r8
 800ff3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	9304      	str	r3, [sp, #16]
 800ff42:	46a2      	mov	sl, r4
 800ff44:	e7d2      	b.n	800feec <_svfiprintf_r+0x9c>
 800ff46:	9b03      	ldr	r3, [sp, #12]
 800ff48:	1d19      	adds	r1, r3, #4
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	9103      	str	r1, [sp, #12]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	bfbb      	ittet	lt
 800ff52:	425b      	neglt	r3, r3
 800ff54:	f042 0202 	orrlt.w	r2, r2, #2
 800ff58:	9307      	strge	r3, [sp, #28]
 800ff5a:	9307      	strlt	r3, [sp, #28]
 800ff5c:	bfb8      	it	lt
 800ff5e:	9204      	strlt	r2, [sp, #16]
 800ff60:	7823      	ldrb	r3, [r4, #0]
 800ff62:	2b2e      	cmp	r3, #46	; 0x2e
 800ff64:	d10c      	bne.n	800ff80 <_svfiprintf_r+0x130>
 800ff66:	7863      	ldrb	r3, [r4, #1]
 800ff68:	2b2a      	cmp	r3, #42	; 0x2a
 800ff6a:	d135      	bne.n	800ffd8 <_svfiprintf_r+0x188>
 800ff6c:	9b03      	ldr	r3, [sp, #12]
 800ff6e:	1d1a      	adds	r2, r3, #4
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	9203      	str	r2, [sp, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	bfb8      	it	lt
 800ff78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff7c:	3402      	adds	r4, #2
 800ff7e:	9305      	str	r3, [sp, #20]
 800ff80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801004c <_svfiprintf_r+0x1fc>
 800ff84:	7821      	ldrb	r1, [r4, #0]
 800ff86:	2203      	movs	r2, #3
 800ff88:	4650      	mov	r0, sl
 800ff8a:	f7f0 f8f9 	bl	8000180 <memchr>
 800ff8e:	b140      	cbz	r0, 800ffa2 <_svfiprintf_r+0x152>
 800ff90:	2340      	movs	r3, #64	; 0x40
 800ff92:	eba0 000a 	sub.w	r0, r0, sl
 800ff96:	fa03 f000 	lsl.w	r0, r3, r0
 800ff9a:	9b04      	ldr	r3, [sp, #16]
 800ff9c:	4303      	orrs	r3, r0
 800ff9e:	3401      	adds	r4, #1
 800ffa0:	9304      	str	r3, [sp, #16]
 800ffa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffa6:	4826      	ldr	r0, [pc, #152]	; (8010040 <_svfiprintf_r+0x1f0>)
 800ffa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffac:	2206      	movs	r2, #6
 800ffae:	f7f0 f8e7 	bl	8000180 <memchr>
 800ffb2:	2800      	cmp	r0, #0
 800ffb4:	d038      	beq.n	8010028 <_svfiprintf_r+0x1d8>
 800ffb6:	4b23      	ldr	r3, [pc, #140]	; (8010044 <_svfiprintf_r+0x1f4>)
 800ffb8:	bb1b      	cbnz	r3, 8010002 <_svfiprintf_r+0x1b2>
 800ffba:	9b03      	ldr	r3, [sp, #12]
 800ffbc:	3307      	adds	r3, #7
 800ffbe:	f023 0307 	bic.w	r3, r3, #7
 800ffc2:	3308      	adds	r3, #8
 800ffc4:	9303      	str	r3, [sp, #12]
 800ffc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc8:	4433      	add	r3, r6
 800ffca:	9309      	str	r3, [sp, #36]	; 0x24
 800ffcc:	e767      	b.n	800fe9e <_svfiprintf_r+0x4e>
 800ffce:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	2001      	movs	r0, #1
 800ffd6:	e7a5      	b.n	800ff24 <_svfiprintf_r+0xd4>
 800ffd8:	2300      	movs	r3, #0
 800ffda:	3401      	adds	r4, #1
 800ffdc:	9305      	str	r3, [sp, #20]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	f04f 0c0a 	mov.w	ip, #10
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffea:	3a30      	subs	r2, #48	; 0x30
 800ffec:	2a09      	cmp	r2, #9
 800ffee:	d903      	bls.n	800fff8 <_svfiprintf_r+0x1a8>
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d0c5      	beq.n	800ff80 <_svfiprintf_r+0x130>
 800fff4:	9105      	str	r1, [sp, #20]
 800fff6:	e7c3      	b.n	800ff80 <_svfiprintf_r+0x130>
 800fff8:	fb0c 2101 	mla	r1, ip, r1, r2
 800fffc:	4604      	mov	r4, r0
 800fffe:	2301      	movs	r3, #1
 8010000:	e7f0      	b.n	800ffe4 <_svfiprintf_r+0x194>
 8010002:	ab03      	add	r3, sp, #12
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	462a      	mov	r2, r5
 8010008:	4b0f      	ldr	r3, [pc, #60]	; (8010048 <_svfiprintf_r+0x1f8>)
 801000a:	a904      	add	r1, sp, #16
 801000c:	4638      	mov	r0, r7
 801000e:	f3af 8000 	nop.w
 8010012:	1c42      	adds	r2, r0, #1
 8010014:	4606      	mov	r6, r0
 8010016:	d1d6      	bne.n	800ffc6 <_svfiprintf_r+0x176>
 8010018:	89ab      	ldrh	r3, [r5, #12]
 801001a:	065b      	lsls	r3, r3, #25
 801001c:	f53f af2c 	bmi.w	800fe78 <_svfiprintf_r+0x28>
 8010020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010022:	b01d      	add	sp, #116	; 0x74
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010028:	ab03      	add	r3, sp, #12
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	462a      	mov	r2, r5
 801002e:	4b06      	ldr	r3, [pc, #24]	; (8010048 <_svfiprintf_r+0x1f8>)
 8010030:	a904      	add	r1, sp, #16
 8010032:	4638      	mov	r0, r7
 8010034:	f000 f87a 	bl	801012c <_printf_i>
 8010038:	e7eb      	b.n	8010012 <_svfiprintf_r+0x1c2>
 801003a:	bf00      	nop
 801003c:	080108d4 	.word	0x080108d4
 8010040:	080108de 	.word	0x080108de
 8010044:	00000000 	.word	0x00000000
 8010048:	0800fd99 	.word	0x0800fd99
 801004c:	080108da 	.word	0x080108da

08010050 <_printf_common>:
 8010050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	4616      	mov	r6, r2
 8010056:	4699      	mov	r9, r3
 8010058:	688a      	ldr	r2, [r1, #8]
 801005a:	690b      	ldr	r3, [r1, #16]
 801005c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010060:	4293      	cmp	r3, r2
 8010062:	bfb8      	it	lt
 8010064:	4613      	movlt	r3, r2
 8010066:	6033      	str	r3, [r6, #0]
 8010068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801006c:	4607      	mov	r7, r0
 801006e:	460c      	mov	r4, r1
 8010070:	b10a      	cbz	r2, 8010076 <_printf_common+0x26>
 8010072:	3301      	adds	r3, #1
 8010074:	6033      	str	r3, [r6, #0]
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	0699      	lsls	r1, r3, #26
 801007a:	bf42      	ittt	mi
 801007c:	6833      	ldrmi	r3, [r6, #0]
 801007e:	3302      	addmi	r3, #2
 8010080:	6033      	strmi	r3, [r6, #0]
 8010082:	6825      	ldr	r5, [r4, #0]
 8010084:	f015 0506 	ands.w	r5, r5, #6
 8010088:	d106      	bne.n	8010098 <_printf_common+0x48>
 801008a:	f104 0a19 	add.w	sl, r4, #25
 801008e:	68e3      	ldr	r3, [r4, #12]
 8010090:	6832      	ldr	r2, [r6, #0]
 8010092:	1a9b      	subs	r3, r3, r2
 8010094:	42ab      	cmp	r3, r5
 8010096:	dc26      	bgt.n	80100e6 <_printf_common+0x96>
 8010098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801009c:	1e13      	subs	r3, r2, #0
 801009e:	6822      	ldr	r2, [r4, #0]
 80100a0:	bf18      	it	ne
 80100a2:	2301      	movne	r3, #1
 80100a4:	0692      	lsls	r2, r2, #26
 80100a6:	d42b      	bmi.n	8010100 <_printf_common+0xb0>
 80100a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100ac:	4649      	mov	r1, r9
 80100ae:	4638      	mov	r0, r7
 80100b0:	47c0      	blx	r8
 80100b2:	3001      	adds	r0, #1
 80100b4:	d01e      	beq.n	80100f4 <_printf_common+0xa4>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	68e5      	ldr	r5, [r4, #12]
 80100ba:	6832      	ldr	r2, [r6, #0]
 80100bc:	f003 0306 	and.w	r3, r3, #6
 80100c0:	2b04      	cmp	r3, #4
 80100c2:	bf08      	it	eq
 80100c4:	1aad      	subeq	r5, r5, r2
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	6922      	ldr	r2, [r4, #16]
 80100ca:	bf0c      	ite	eq
 80100cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100d0:	2500      	movne	r5, #0
 80100d2:	4293      	cmp	r3, r2
 80100d4:	bfc4      	itt	gt
 80100d6:	1a9b      	subgt	r3, r3, r2
 80100d8:	18ed      	addgt	r5, r5, r3
 80100da:	2600      	movs	r6, #0
 80100dc:	341a      	adds	r4, #26
 80100de:	42b5      	cmp	r5, r6
 80100e0:	d11a      	bne.n	8010118 <_printf_common+0xc8>
 80100e2:	2000      	movs	r0, #0
 80100e4:	e008      	b.n	80100f8 <_printf_common+0xa8>
 80100e6:	2301      	movs	r3, #1
 80100e8:	4652      	mov	r2, sl
 80100ea:	4649      	mov	r1, r9
 80100ec:	4638      	mov	r0, r7
 80100ee:	47c0      	blx	r8
 80100f0:	3001      	adds	r0, #1
 80100f2:	d103      	bne.n	80100fc <_printf_common+0xac>
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fc:	3501      	adds	r5, #1
 80100fe:	e7c6      	b.n	801008e <_printf_common+0x3e>
 8010100:	18e1      	adds	r1, r4, r3
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	2030      	movs	r0, #48	; 0x30
 8010106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801010a:	4422      	add	r2, r4
 801010c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010114:	3302      	adds	r3, #2
 8010116:	e7c7      	b.n	80100a8 <_printf_common+0x58>
 8010118:	2301      	movs	r3, #1
 801011a:	4622      	mov	r2, r4
 801011c:	4649      	mov	r1, r9
 801011e:	4638      	mov	r0, r7
 8010120:	47c0      	blx	r8
 8010122:	3001      	adds	r0, #1
 8010124:	d0e6      	beq.n	80100f4 <_printf_common+0xa4>
 8010126:	3601      	adds	r6, #1
 8010128:	e7d9      	b.n	80100de <_printf_common+0x8e>
	...

0801012c <_printf_i>:
 801012c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010130:	460c      	mov	r4, r1
 8010132:	4691      	mov	r9, r2
 8010134:	7e27      	ldrb	r7, [r4, #24]
 8010136:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010138:	2f78      	cmp	r7, #120	; 0x78
 801013a:	4680      	mov	r8, r0
 801013c:	469a      	mov	sl, r3
 801013e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010142:	d807      	bhi.n	8010154 <_printf_i+0x28>
 8010144:	2f62      	cmp	r7, #98	; 0x62
 8010146:	d80a      	bhi.n	801015e <_printf_i+0x32>
 8010148:	2f00      	cmp	r7, #0
 801014a:	f000 80d8 	beq.w	80102fe <_printf_i+0x1d2>
 801014e:	2f58      	cmp	r7, #88	; 0x58
 8010150:	f000 80a3 	beq.w	801029a <_printf_i+0x16e>
 8010154:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801015c:	e03a      	b.n	80101d4 <_printf_i+0xa8>
 801015e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010162:	2b15      	cmp	r3, #21
 8010164:	d8f6      	bhi.n	8010154 <_printf_i+0x28>
 8010166:	a001      	add	r0, pc, #4	; (adr r0, 801016c <_printf_i+0x40>)
 8010168:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801016c:	080101c5 	.word	0x080101c5
 8010170:	080101d9 	.word	0x080101d9
 8010174:	08010155 	.word	0x08010155
 8010178:	08010155 	.word	0x08010155
 801017c:	08010155 	.word	0x08010155
 8010180:	08010155 	.word	0x08010155
 8010184:	080101d9 	.word	0x080101d9
 8010188:	08010155 	.word	0x08010155
 801018c:	08010155 	.word	0x08010155
 8010190:	08010155 	.word	0x08010155
 8010194:	08010155 	.word	0x08010155
 8010198:	080102e5 	.word	0x080102e5
 801019c:	08010209 	.word	0x08010209
 80101a0:	080102c7 	.word	0x080102c7
 80101a4:	08010155 	.word	0x08010155
 80101a8:	08010155 	.word	0x08010155
 80101ac:	08010307 	.word	0x08010307
 80101b0:	08010155 	.word	0x08010155
 80101b4:	08010209 	.word	0x08010209
 80101b8:	08010155 	.word	0x08010155
 80101bc:	08010155 	.word	0x08010155
 80101c0:	080102cf 	.word	0x080102cf
 80101c4:	680b      	ldr	r3, [r1, #0]
 80101c6:	1d1a      	adds	r2, r3, #4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	600a      	str	r2, [r1, #0]
 80101cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80101d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101d4:	2301      	movs	r3, #1
 80101d6:	e0a3      	b.n	8010320 <_printf_i+0x1f4>
 80101d8:	6825      	ldr	r5, [r4, #0]
 80101da:	6808      	ldr	r0, [r1, #0]
 80101dc:	062e      	lsls	r6, r5, #24
 80101de:	f100 0304 	add.w	r3, r0, #4
 80101e2:	d50a      	bpl.n	80101fa <_printf_i+0xce>
 80101e4:	6805      	ldr	r5, [r0, #0]
 80101e6:	600b      	str	r3, [r1, #0]
 80101e8:	2d00      	cmp	r5, #0
 80101ea:	da03      	bge.n	80101f4 <_printf_i+0xc8>
 80101ec:	232d      	movs	r3, #45	; 0x2d
 80101ee:	426d      	negs	r5, r5
 80101f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f4:	485e      	ldr	r0, [pc, #376]	; (8010370 <_printf_i+0x244>)
 80101f6:	230a      	movs	r3, #10
 80101f8:	e019      	b.n	801022e <_printf_i+0x102>
 80101fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80101fe:	6805      	ldr	r5, [r0, #0]
 8010200:	600b      	str	r3, [r1, #0]
 8010202:	bf18      	it	ne
 8010204:	b22d      	sxthne	r5, r5
 8010206:	e7ef      	b.n	80101e8 <_printf_i+0xbc>
 8010208:	680b      	ldr	r3, [r1, #0]
 801020a:	6825      	ldr	r5, [r4, #0]
 801020c:	1d18      	adds	r0, r3, #4
 801020e:	6008      	str	r0, [r1, #0]
 8010210:	0628      	lsls	r0, r5, #24
 8010212:	d501      	bpl.n	8010218 <_printf_i+0xec>
 8010214:	681d      	ldr	r5, [r3, #0]
 8010216:	e002      	b.n	801021e <_printf_i+0xf2>
 8010218:	0669      	lsls	r1, r5, #25
 801021a:	d5fb      	bpl.n	8010214 <_printf_i+0xe8>
 801021c:	881d      	ldrh	r5, [r3, #0]
 801021e:	4854      	ldr	r0, [pc, #336]	; (8010370 <_printf_i+0x244>)
 8010220:	2f6f      	cmp	r7, #111	; 0x6f
 8010222:	bf0c      	ite	eq
 8010224:	2308      	moveq	r3, #8
 8010226:	230a      	movne	r3, #10
 8010228:	2100      	movs	r1, #0
 801022a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801022e:	6866      	ldr	r6, [r4, #4]
 8010230:	60a6      	str	r6, [r4, #8]
 8010232:	2e00      	cmp	r6, #0
 8010234:	bfa2      	ittt	ge
 8010236:	6821      	ldrge	r1, [r4, #0]
 8010238:	f021 0104 	bicge.w	r1, r1, #4
 801023c:	6021      	strge	r1, [r4, #0]
 801023e:	b90d      	cbnz	r5, 8010244 <_printf_i+0x118>
 8010240:	2e00      	cmp	r6, #0
 8010242:	d04d      	beq.n	80102e0 <_printf_i+0x1b4>
 8010244:	4616      	mov	r6, r2
 8010246:	fbb5 f1f3 	udiv	r1, r5, r3
 801024a:	fb03 5711 	mls	r7, r3, r1, r5
 801024e:	5dc7      	ldrb	r7, [r0, r7]
 8010250:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010254:	462f      	mov	r7, r5
 8010256:	42bb      	cmp	r3, r7
 8010258:	460d      	mov	r5, r1
 801025a:	d9f4      	bls.n	8010246 <_printf_i+0x11a>
 801025c:	2b08      	cmp	r3, #8
 801025e:	d10b      	bne.n	8010278 <_printf_i+0x14c>
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	07df      	lsls	r7, r3, #31
 8010264:	d508      	bpl.n	8010278 <_printf_i+0x14c>
 8010266:	6923      	ldr	r3, [r4, #16]
 8010268:	6861      	ldr	r1, [r4, #4]
 801026a:	4299      	cmp	r1, r3
 801026c:	bfde      	ittt	le
 801026e:	2330      	movle	r3, #48	; 0x30
 8010270:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010274:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010278:	1b92      	subs	r2, r2, r6
 801027a:	6122      	str	r2, [r4, #16]
 801027c:	f8cd a000 	str.w	sl, [sp]
 8010280:	464b      	mov	r3, r9
 8010282:	aa03      	add	r2, sp, #12
 8010284:	4621      	mov	r1, r4
 8010286:	4640      	mov	r0, r8
 8010288:	f7ff fee2 	bl	8010050 <_printf_common>
 801028c:	3001      	adds	r0, #1
 801028e:	d14c      	bne.n	801032a <_printf_i+0x1fe>
 8010290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010294:	b004      	add	sp, #16
 8010296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029a:	4835      	ldr	r0, [pc, #212]	; (8010370 <_printf_i+0x244>)
 801029c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	680e      	ldr	r6, [r1, #0]
 80102a4:	061f      	lsls	r7, r3, #24
 80102a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80102aa:	600e      	str	r6, [r1, #0]
 80102ac:	d514      	bpl.n	80102d8 <_printf_i+0x1ac>
 80102ae:	07d9      	lsls	r1, r3, #31
 80102b0:	bf44      	itt	mi
 80102b2:	f043 0320 	orrmi.w	r3, r3, #32
 80102b6:	6023      	strmi	r3, [r4, #0]
 80102b8:	b91d      	cbnz	r5, 80102c2 <_printf_i+0x196>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	f023 0320 	bic.w	r3, r3, #32
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	2310      	movs	r3, #16
 80102c4:	e7b0      	b.n	8010228 <_printf_i+0xfc>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	f043 0320 	orr.w	r3, r3, #32
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	2378      	movs	r3, #120	; 0x78
 80102d0:	4828      	ldr	r0, [pc, #160]	; (8010374 <_printf_i+0x248>)
 80102d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102d6:	e7e3      	b.n	80102a0 <_printf_i+0x174>
 80102d8:	065e      	lsls	r6, r3, #25
 80102da:	bf48      	it	mi
 80102dc:	b2ad      	uxthmi	r5, r5
 80102de:	e7e6      	b.n	80102ae <_printf_i+0x182>
 80102e0:	4616      	mov	r6, r2
 80102e2:	e7bb      	b.n	801025c <_printf_i+0x130>
 80102e4:	680b      	ldr	r3, [r1, #0]
 80102e6:	6826      	ldr	r6, [r4, #0]
 80102e8:	6960      	ldr	r0, [r4, #20]
 80102ea:	1d1d      	adds	r5, r3, #4
 80102ec:	600d      	str	r5, [r1, #0]
 80102ee:	0635      	lsls	r5, r6, #24
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	d501      	bpl.n	80102f8 <_printf_i+0x1cc>
 80102f4:	6018      	str	r0, [r3, #0]
 80102f6:	e002      	b.n	80102fe <_printf_i+0x1d2>
 80102f8:	0671      	lsls	r1, r6, #25
 80102fa:	d5fb      	bpl.n	80102f4 <_printf_i+0x1c8>
 80102fc:	8018      	strh	r0, [r3, #0]
 80102fe:	2300      	movs	r3, #0
 8010300:	6123      	str	r3, [r4, #16]
 8010302:	4616      	mov	r6, r2
 8010304:	e7ba      	b.n	801027c <_printf_i+0x150>
 8010306:	680b      	ldr	r3, [r1, #0]
 8010308:	1d1a      	adds	r2, r3, #4
 801030a:	600a      	str	r2, [r1, #0]
 801030c:	681e      	ldr	r6, [r3, #0]
 801030e:	6862      	ldr	r2, [r4, #4]
 8010310:	2100      	movs	r1, #0
 8010312:	4630      	mov	r0, r6
 8010314:	f7ef ff34 	bl	8000180 <memchr>
 8010318:	b108      	cbz	r0, 801031e <_printf_i+0x1f2>
 801031a:	1b80      	subs	r0, r0, r6
 801031c:	6060      	str	r0, [r4, #4]
 801031e:	6863      	ldr	r3, [r4, #4]
 8010320:	6123      	str	r3, [r4, #16]
 8010322:	2300      	movs	r3, #0
 8010324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010328:	e7a8      	b.n	801027c <_printf_i+0x150>
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	4632      	mov	r2, r6
 801032e:	4649      	mov	r1, r9
 8010330:	4640      	mov	r0, r8
 8010332:	47d0      	blx	sl
 8010334:	3001      	adds	r0, #1
 8010336:	d0ab      	beq.n	8010290 <_printf_i+0x164>
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	079b      	lsls	r3, r3, #30
 801033c:	d413      	bmi.n	8010366 <_printf_i+0x23a>
 801033e:	68e0      	ldr	r0, [r4, #12]
 8010340:	9b03      	ldr	r3, [sp, #12]
 8010342:	4298      	cmp	r0, r3
 8010344:	bfb8      	it	lt
 8010346:	4618      	movlt	r0, r3
 8010348:	e7a4      	b.n	8010294 <_printf_i+0x168>
 801034a:	2301      	movs	r3, #1
 801034c:	4632      	mov	r2, r6
 801034e:	4649      	mov	r1, r9
 8010350:	4640      	mov	r0, r8
 8010352:	47d0      	blx	sl
 8010354:	3001      	adds	r0, #1
 8010356:	d09b      	beq.n	8010290 <_printf_i+0x164>
 8010358:	3501      	adds	r5, #1
 801035a:	68e3      	ldr	r3, [r4, #12]
 801035c:	9903      	ldr	r1, [sp, #12]
 801035e:	1a5b      	subs	r3, r3, r1
 8010360:	42ab      	cmp	r3, r5
 8010362:	dcf2      	bgt.n	801034a <_printf_i+0x21e>
 8010364:	e7eb      	b.n	801033e <_printf_i+0x212>
 8010366:	2500      	movs	r5, #0
 8010368:	f104 0619 	add.w	r6, r4, #25
 801036c:	e7f5      	b.n	801035a <_printf_i+0x22e>
 801036e:	bf00      	nop
 8010370:	080108e5 	.word	0x080108e5
 8010374:	080108f6 	.word	0x080108f6

08010378 <memmove>:
 8010378:	4288      	cmp	r0, r1
 801037a:	b510      	push	{r4, lr}
 801037c:	eb01 0402 	add.w	r4, r1, r2
 8010380:	d902      	bls.n	8010388 <memmove+0x10>
 8010382:	4284      	cmp	r4, r0
 8010384:	4623      	mov	r3, r4
 8010386:	d807      	bhi.n	8010398 <memmove+0x20>
 8010388:	1e43      	subs	r3, r0, #1
 801038a:	42a1      	cmp	r1, r4
 801038c:	d008      	beq.n	80103a0 <memmove+0x28>
 801038e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010396:	e7f8      	b.n	801038a <memmove+0x12>
 8010398:	4402      	add	r2, r0
 801039a:	4601      	mov	r1, r0
 801039c:	428a      	cmp	r2, r1
 801039e:	d100      	bne.n	80103a2 <memmove+0x2a>
 80103a0:	bd10      	pop	{r4, pc}
 80103a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103aa:	e7f7      	b.n	801039c <memmove+0x24>

080103ac <_realloc_r>:
 80103ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ae:	4607      	mov	r7, r0
 80103b0:	4614      	mov	r4, r2
 80103b2:	460e      	mov	r6, r1
 80103b4:	b921      	cbnz	r1, 80103c0 <_realloc_r+0x14>
 80103b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103ba:	4611      	mov	r1, r2
 80103bc:	f7ff bb9e 	b.w	800fafc <_malloc_r>
 80103c0:	b922      	cbnz	r2, 80103cc <_realloc_r+0x20>
 80103c2:	f7ff fc9b 	bl	800fcfc <_free_r>
 80103c6:	4625      	mov	r5, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103cc:	f000 f814 	bl	80103f8 <_malloc_usable_size_r>
 80103d0:	42a0      	cmp	r0, r4
 80103d2:	d20f      	bcs.n	80103f4 <_realloc_r+0x48>
 80103d4:	4621      	mov	r1, r4
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7ff fb90 	bl	800fafc <_malloc_r>
 80103dc:	4605      	mov	r5, r0
 80103de:	2800      	cmp	r0, #0
 80103e0:	d0f2      	beq.n	80103c8 <_realloc_r+0x1c>
 80103e2:	4631      	mov	r1, r6
 80103e4:	4622      	mov	r2, r4
 80103e6:	f7ff fb73 	bl	800fad0 <memcpy>
 80103ea:	4631      	mov	r1, r6
 80103ec:	4638      	mov	r0, r7
 80103ee:	f7ff fc85 	bl	800fcfc <_free_r>
 80103f2:	e7e9      	b.n	80103c8 <_realloc_r+0x1c>
 80103f4:	4635      	mov	r5, r6
 80103f6:	e7e7      	b.n	80103c8 <_realloc_r+0x1c>

080103f8 <_malloc_usable_size_r>:
 80103f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103fc:	1f18      	subs	r0, r3, #4
 80103fe:	2b00      	cmp	r3, #0
 8010400:	bfbc      	itt	lt
 8010402:	580b      	ldrlt	r3, [r1, r0]
 8010404:	18c0      	addlt	r0, r0, r3
 8010406:	4770      	bx	lr

08010408 <_init>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	bf00      	nop
 801040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801040e:	bc08      	pop	{r3}
 8010410:	469e      	mov	lr, r3
 8010412:	4770      	bx	lr

08010414 <_fini>:
 8010414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010416:	bf00      	nop
 8010418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041a:	bc08      	pop	{r3}
 801041c:	469e      	mov	lr, r3
 801041e:	4770      	bx	lr
